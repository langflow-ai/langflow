name: Nightly Build

on:
  workflow_dispatch:
    inputs:
      runs_on:
        description: "Runner to use for tests (use self-hosted for safe/release code)"
        required: false
        type: choice
        options:
          - ubuntu-latest
          - self-hosted
          - "[self-hosted, linux, ARM64, langflow-ai-arm64-40gb]"
        default: ubuntu-latest
      skip_frontend_tests:
        description: "Skip frontend tests. Only do this for testing purposes."
        required: false
        type: boolean
        default: false
      skip_backend_tests:
        description: "Skip backend tests. Only do this for testing purposes."
        required: false
        type: boolean
        default: false
      push_to_registry:
        description: "Whether to push images to registries. Set to false for testing builds without publishing."
        required: false
        type: boolean
        default: true
  schedule:
    # Run job at 00:00 UTC (4:00 PM PST / 5:00 PM PDT)
    - cron: "0 0 * * *"

env:
  POETRY_VERSION: "1.8.3"
  PYTHON_VERSION: "3.13"

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        if: inputs.push_to_registry && (inputs.skip_frontend_tests || inputs.skip_backend_tests)
        run: |
          echo "Cannot skip tests while push_to_registry is true."
          exit 1

  create-nightly-tag:
    if: github.repository == 'langflow-ai/langflow'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -ex -o pipefail {0}
    permissions:
      # Required to create tag
      contents: write
    outputs:
      main_tag: ${{ steps.generate_main_tag.outputs.main_tag }}
      base_tag: ${{ steps.set_base_tag.outputs.base_tag }}
      lfx_tag: ${{ steps.generate_lfx_tag.outputs.lfx_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: true
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ env.PYTHON_VERSION }}
          prune-cache: false
      - name: Install the project
        run: uv sync

      - name: Generate main nightly tag
        id: generate_main_tag
        run: |
          # NOTE: This outputs the tag with the `v` prefix.
          MAIN_TAG="$(uv run ./scripts/ci/pypi_nightly_tag.py main)"
          echo "main_tag=$MAIN_TAG" >> $GITHUB_OUTPUT
          echo "main_tag=$MAIN_TAG"

      - name: Delete existing tag if it exists
        id: check_main_tag
        run: |
          git fetch --tags
          git tag -d ${{ steps.generate_main_tag.outputs.main_tag }} || true
          git push --delete origin ${{ steps.generate_main_tag.outputs.main_tag }} || true
          echo "main_tag_exists=false" >> $GITHUB_OUTPUT

      - name: Generate base nightly tag
        id: generate_base_tag
        run: |
          # NOTE: This outputs the tag with the `v` prefix.
          BASE_TAG="$(uv run ./scripts/ci/pypi_nightly_tag.py base)"
          echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
          echo "base_tag=$BASE_TAG"

      - name: Generate LFX nightly tag
        id: generate_lfx_tag
        run: |
          # NOTE: This outputs the tag with the `v` prefix.
          LFX_TAG="$(uv run ./scripts/ci/lfx_nightly_tag.py)"
          echo "lfx_tag=$LFX_TAG" >> $GITHUB_OUTPUT
          echo "lfx_tag=$LFX_TAG"

      - name: Commit tag
        id: commit_tag
        run: |
          # If the main tag does not exist in GH, we create the base tag from the existing codebase.

          git config --global user.email "bot-nightly-builds@langflow.org"
          git config --global user.name "Langflow Bot"

          MAIN_TAG="${{ steps.generate_main_tag.outputs.main_tag }}"
          BASE_TAG="${{ steps.generate_base_tag.outputs.base_tag }}"
          LFX_TAG="${{ steps.generate_lfx_tag.outputs.lfx_tag }}"
          echo "Updating LFX project version to $LFX_TAG"
          uv run ./scripts/ci/update_lfx_version.py $LFX_TAG
          echo "Updating base project version to $BASE_TAG and updating main project version to $MAIN_TAG"
          uv run ./scripts/ci/update_pyproject_combined.py main $MAIN_TAG $BASE_TAG $LFX_TAG

          uv lock
          cd src/backend/base && uv lock && cd ../../..
          cd src/lfx && uv lock && cd ../..

          git add pyproject.toml src/backend/base/pyproject.toml src/lfx/pyproject.toml uv.lock src/backend/base/uv.lock
          git commit -m "Update version and project name"

          echo "Tagging main with $MAIN_TAG"
          if ! git tag -a $MAIN_TAG -m "Langflow nightly $MAIN_TAG"; then
            echo "Tag creation failed. Exiting the workflow."
            exit 1
          fi

          echo "Pushing main tag $MAIN_TAG"
          if ! git push origin $MAIN_TAG; then
            echo "Tag push failed. Check if the tag already exists. Exiting the workflow."
            exit 1
          fi
          # TODO: notify on failure

      - name: Checkout main nightly tag
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.generate_main_tag.outputs.main_tag }}

      - name: Retrieve Base Tag
        id: retrieve_base_tag
        working-directory: src/backend/base
        run: |
          # If the main tag already exists, we need to retrieve the base version from the main tag codebase.
          version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | head -n 1)
          echo "base_tag=$version" >> $GITHUB_OUTPUT
          echo "base_tag=$version"

      - name: Set Base Tag
        id: set_base_tag
        run: |
          if [ "${{ steps.retrieve_base_tag.conclusion }}" != "skipped" ] && [ "${{ steps.retrieve_base_tag.outputs.base_tag }}" ]; then
            BASE_TAG="${{ steps.retrieve_base_tag.outputs.base_tag }}"
            echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
            echo "base_tag=$BASE_TAG"
          elif [ "${{ steps.commit_tag.conclusion }}" != "skipped" ] && [ "${{ steps.generate_base_tag.outputs.base_tag }}" ]; then
            BASE_TAG="${{ steps.generate_base_tag.outputs.base_tag }}"
            echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
            echo "base_tag=$BASE_TAG"
          else
            echo "No base tag found. Exiting the workflow."
            exit 1
          fi

  frontend-tests:
    if: github.repository == 'langflow-ai/langflow' && !inputs.skip_frontend_tests
    name: Run Frontend Tests
    needs: create-nightly-tag
    uses: ./.github/workflows/typescript_test.yml
    with:
      tests_folder: "tests"
      release: true
      runs-on: ${{ (inputs['runs_on'] && startsWith(format('{0}', inputs['runs_on']), '[') && fromJSON(inputs['runs_on'])) || inputs['runs_on'] || github.event.inputs['runs_on'] || 'ubuntu-latest' }}
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      STORE_API_KEY: ${{ secrets.STORE_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

  backend-unit-tests:
    if: github.repository == 'langflow-ai/langflow' && !inputs.skip_backend_tests
    name: Run Backend Unit Tests
    needs: create-nightly-tag
    uses: ./.github/workflows/python_test.yml
    with:
      python-versions: '["3.10", "3.11", "3.12", "3.13"]'
      runs-on: ${{ (inputs['runs_on'] && startsWith(format('{0}', inputs['runs_on']), '[') && fromJSON(inputs['runs_on'])) || inputs['runs_on'] || github.event.inputs['runs_on'] || 'ubuntu-latest' }}
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  # Not making nightly builds dependent on integration test success
  # due to inherent flakiness of 3rd party integrations
  # Revisit when https://github.com/langflow-ai/langflow/pull/3607 is merged.
  # backend-integration-tests:
  #   name: Run Backend Integration Tests
  #   needs: create-nightly-tag
  #   uses: ./.github/workflows/integration_tests.yml
  #   with:
  #     python-versions: '["3.10", "3.11", "3.12", "3.13"]'
  #     ref: ${{ needs.create-nightly-tag.outputs.tag }}

  release-nightly-build:
    if: github.repository == 'langflow-ai/langflow' && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped') && (needs.backend-unit-tests.result == 'success' || needs.backend-unit-tests.result == 'skipped')
    name: Run Nightly Langflow Build
    needs: [create-nightly-tag, frontend-tests, backend-unit-tests]
    uses: ./.github/workflows/release_nightly.yml
    with:
      build_docker_base: true
      build_docker_main: true
      build_lfx: true
      nightly_tag_main: ${{ needs.create-nightly-tag.outputs.main_tag }}
      nightly_tag_base: ${{ needs.create-nightly-tag.outputs.base_tag }}
      nightly_tag_lfx: ${{ needs.create-nightly-tag.outputs.lfx_tag }}
      push_to_registry: ${{ inputs.push_to_registry != false }}
    secrets: inherit

  slack-notification:
    name: Send Slack Notification
    needs: release-nightly-build
    if: ${{ github.repository == 'langflow-ai/langflow' && always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Send failure notification to Slack
        if: ${{ needs.release-nightly-build.result == 'failure' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ùå *Nightly Build Failed*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Job:*\nrelease-nightly-build"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\n`${{ needs.release-nightly-build.result }}`"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View full logs on GitHub>"
                  }
                ]
              }
            ]
          }' ${{ secrets.LANGFLOW_ENG_SLACK_WEBHOOK_URL }}

      - name: Send success notification to Slack
        if: ${{ needs.release-nightly-build.result == 'success' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚úÖ *Nightly Build Successful*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Job:*\nrelease-nightly-build"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\n`${{ needs.release-nightly-build.result }}`"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View full logs on GitHub>"
                  }
                ]
              }
            ]
          }' ${{ secrets.LANGFLOW_ENG_SLACK_WEBHOOK_URL }}
