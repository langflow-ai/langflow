name: Coverage Check

on:
  push:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or commit to check coverage for"
        required: false
        type: string

env:
  POETRY_VERSION: "1.8.2"
  PYTEST_RUN_PATH: "src/backend/tests"
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  coverage:
    name: Code Coverage Check
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
          fetch-depth: 0  # Fetch full history for better coverage diff

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          cd src/backend
          uv sync --dev

      - name: Generate dynamic coverage configuration
        run: |
          echo "Generating dynamic coverage configuration..."
          python3 scripts/generate_coverage_config.py
          echo "Generated .coveragerc with the following exclusions:"
          cat src/backend/.coveragerc

      - name: Run tests with coverage
        run: |
          cd src/backend
          # Run a subset of fast tests for quick coverage feedback
          uv run python -m pytest tests/unit \
            --cov=base/langflow \
            --cov-config=.coveragerc \
            --cov-report=xml:../../coverage.xml \
            --cov-report=html:../../htmlcov \
            --cov-report=term-missing \
            --tb=short \
            -v

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: backend-coverage-check
          name: ${{ github.event_name == 'pull_request' && 'pr-coverage-check' || format('push-coverage-{0}', github.ref_name) }}
          fail_ci_if_error: false  # Don't fail on CodeCov issues
          verbose: true

      - name: Coverage Report Summary
        run: |
          echo "## üìä Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage.xml ]; then
            # Extract coverage percentage from XML
            COVERAGE=$(python3 -c "
            import xml.etree.ElementTree as ET
            try:
                tree = ET.parse('coverage.xml')
                root = tree.getroot()
                coverage = root.get('line-rate')
                if coverage:
                    print(f'{float(coverage) * 100:.1f}%')
                else:
                    print('Unable to determine')
            except Exception as e:
                print('Unable to determine')
            ")

            echo "**Current Coverage**: $COVERAGE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Add coverage threshold check
            if python3 -c "
            import xml.etree.ElementTree as ET
            import sys
            try:
                tree = ET.parse('coverage.xml')
                root = tree.getroot()
                coverage = float(root.get('line-rate', 0)) * 100
                # Target from codecov.yml: 40% for new code
                threshold = 35.0
                if coverage < threshold:
                    print(f'‚ùå Coverage {coverage:.1f}% is below recommended threshold of {threshold}%')
                    sys.exit(1)
                else:
                    print(f'‚úÖ Coverage {coverage:.1f}% meets threshold of {threshold}%')
            except Exception:
                print('‚ö†Ô∏è Could not verify coverage threshold')
            "; then
              echo "‚úÖ **Coverage Check**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Coverage Check**: Below threshold" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üí° **Tip**: Add tests for new code to improve coverage" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå No coverage report generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ github.event_name == 'pull_request' && 'pr-coverage-report' || format('coverage-report-{0}-{1}', github.ref_name, github.sha) }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 14

      - name: Find existing coverage comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        if: github.event_name == 'pull_request'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'üìä Coverage Report'

      - name: Create or update coverage comment
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## üìä Coverage Report

            Coverage check completed for commit ${{ github.sha }}

            **Status**: ${{ job.status == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
            **Event**: ${{ github.event_name == 'pull_request' && 'Pull Request' || format('Push to {0}', github.ref_name) }}

            üìà **Coverage Details**:
            - Full coverage report available in [CodeCov](${{ github.event_name == 'pull_request' && format('https://codecov.io/gh/{0}/pull/{1}', github.repository, github.event.pull_request.number) || format('https://codecov.io/gh/{0}/branch/{1}', github.repository, github.ref_name) }})
            - Coverage artifacts uploaded to workflow run

            üí° **Tips for better coverage**:
            - Add unit tests for new functions and classes
            - Test edge cases and error conditions
            - Use the integration test framework for complex components

            ---
            *This comment will be updated automatically when you push new commits.*

  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: coverage
    if: always()

    steps:
      - name: Coverage Check Result
        run: |
          if [[ "${{ needs.coverage.result }}" == "success" ]]; then
            echo "‚úÖ Coverage check passed"
            exit 0
          else
            echo "‚ùå Coverage check failed or was skipped"
            echo "Check the coverage job logs for details"
            exit 1
          fi