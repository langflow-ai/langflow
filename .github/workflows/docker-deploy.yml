name: Docker Deploy - Entire Application

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Select a Branch to deploy"
        required: true
        default: "main"
      domain:
        description: "Domain name for deployment"
        required: true
        default: "staging.visualaiagentsbuilder.com"
      email:
        description: "Admin email for deployment"
        required: true
        default: "saravana.k.r@gmail.com"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          DOCKER_BUILDKIT=1 \
          VITE_AUTO_LOGIN=false \
          VITE_CLERK_AUTH_ENABLED=true \
          VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }} \
          make docker_build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: forwardemailforaifirstdesk
          password: ${{ secrets.DOCKERHUB_TOKEN }}    

      - name: Tag and Push Docker Image
        run: |
          docker tag langflow:1.4.2 forwardemailforaifirstdesk/langflow:1.4.2
          docker push forwardemailforaifirstdesk/langflow:1.4.2

      - name: Upload script to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: staging.visualaiagentsbuilder.com
          username: root
          password: ${{ secrets.VM_PASSWORD }}
          source: "./deploy/deploy.sh,./.env-file"
          target: /root/

      - name: Run script on VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: staging.visualaiagentsbuilder.com
          username: root
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            chmod +x /root/deploy/deploy.sh
            /root/deploy/deploy.sh \
              --image forwardemailforaifirstdesk/langflow:1.4.2 \
              --domain ${{ github.event.inputs.domain }} \
              --email ${{ github.event.inputs.email }} \
              --env-file /root/.env-file

      - name: Clean up Docker Hub images (tagged + untagged)
        env:
          DOCKERHUB_USERNAME: forwardemailforaifirstdesk
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          REPOSITORY: "forwardemailforaifirstdesk/langflow"
          KEEP_RECENT: 2
        run: |
          set -e
          
          echo "=== Getting Docker Hub token ==="
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d '{"username": "'$DOCKERHUB_USERNAME'", "password": "'$DOCKERHUB_PASSWORD'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          echo "=== CLEANING UP TAGGED IMAGES ==="
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/?page_size=100" | jq -r '.results[].name')
          
          COUNT=0
          for tag in $TAGS; do
            COUNT=$((COUNT+1))
            if [ "$COUNT" -gt "$KEEP_RECENT" ]; then
              echo "Deleting old tagged image: $tag"
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" \
                "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/$tag/" \
                && echo "  ✅ Deleted $tag" || echo "  ❌ Failed to delete $tag"
            fi
          done

          echo "=== CLEANING UP UNTAGGED IMAGES ==="
          IMAGE_DATA=$(curl -s -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$REPOSITORY/images/")

          UNTAGGED_COUNT=$(echo "$IMAGE_DATA" | jq '[.results[] | select(.tags | length == 0)] | length')

          if [ "$UNTAGGED_COUNT" -gt 0 ]; then
            echo "Found $UNTAGGED_COUNT untagged images to delete"
            echo "$IMAGE_DATA" | jq -r '.results[] | select(.tags | length == 0) | .digest' | while read digest; do
              if [ -n "$digest" ]; then
                echo "Deleting untagged image: $digest"
                DELETE_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null \
                  -H "Authorization: JWT $TOKEN" \
                  -X DELETE \
                  "https://hub.docker.com/v2/repositories/$REPOSITORY/images/$digest/")
                if [ "$DELETE_RESPONSE" = "204" ]; then
                  echo "  ✅ Successfully deleted"
                else
                  echo "  ❌ Failed (HTTP: $DELETE_RESPONSE)"
                fi
              fi
            done
          else
            echo "No untagged images found"
          fi
