name: Docker Deploy - Entire Application

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Select a Branch to deploy"
        required: true
        default: "main"
      domain:
        description: "Domain name for deployment"
        required: true
        default: "staging.visualaiagentsbuilder.com"
      email:
        description: "Admin email for deployment"
        required: true
        default: "saravana.k.r@gmail.com"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          DOCKER_BUILDKIT=1 \
          VITE_AUTO_LOGIN=false \
          VITE_CLERK_AUTH_ENABLED=true \
          VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }} \
          make docker_build

      - name: Cleanup all Docker Hub tags
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          DOCKERHUB_USERNAME="forwardemailforaifirstdesk"
          DOCKERHUB_PASSWORD="${{ secrets.DOCKERHUB_TOKEN }}"
          REPOSITORY="forwardemailforaifirstdesk/langflow"

          echo "=== Getting Docker Hub token ==="
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "'$DOCKERHUB_USERNAME'", "password": "'$DOCKERHUB_PASSWORD'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "❌ Failed to authenticate"
            exit 1
          fi
          echo "✅ Authentication successful"

          echo "=== Fetching tags ==="
          RESPONSE=$(curl -s -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$REPOSITORY/tags?page_size=100")

          TAGS=$(echo "$RESPONSE" | jq -r '.results[] | .name')

          if [ -z "$TAGS" ]; then
            echo "ℹ️ No tags found in repository $REPOSITORY. Nothing to delete."
            exit 0
          fi

          echo "Found tags: $TAGS"

          for TAG in $TAGS; do
            echo "Deleting tag: $TAG"
            DELETE_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X DELETE -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/$TAG/")

            HTTP_CODE=$(echo $DELETE_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$HTTP_CODE" = "204" ]; then
              echo "  ✅ Successfully deleted tag $TAG"
            else
              echo "  ❌ Failed to delete tag $TAG (HTTP: $HTTP_CODE)"
            fi

            sleep 1
          done

          echo "Note: Docker Hub will automatically clean up unreferenced images within 24-48 hours"    

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: forwardemailforaifirstdesk
          password: ${{ secrets.DOCKERHUB_TOKEN }}    

      - name: Tag and Push Docker Image
        run: |
          docker tag langflow:1.4.2 forwardemailforaifirstdesk/langflow:1.4.2
          docker push forwardemailforaifirstdesk/langflow:1.4.2

      - name: Upload script to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: staging.visualaiagentsbuilder.com
          username: root
          password: ${{ secrets.VM_PASSWORD }}
          source: "./deploy/deploy.sh,./.env-file"
          target: /root/

      - name: Run script on VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: staging.visualaiagentsbuilder.com
          username: root
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            chmod +x /root/deploy/deploy.sh
            /root/deploy/deploy.sh \
              --image forwardemailforaifirstdesk/langflow:1.4.2 \
              --domain ${{ github.event.inputs.domain }} \
              --email ${{ github.event.inputs.email }} \
              --env-file /root/.env-file

