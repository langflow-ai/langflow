name: Manual Cross-Platform Test

on:
  workflow_dispatch:
    inputs:
      test-from-pypi:
        description: "Test from PyPI instead of building from source"
        type: boolean
        default: false
      langflow-version:
        description: "Langflow version to test from PyPI (leave empty for latest)"
        required: false
        type: string
        default: ""
      test-timeout:
        description: "Timeout for langflow server startup test (seconds)"
        required: false
        type: number
        default: 120

jobs:
  test-pypi-installation:
    if: inputs.test-from-pypi == true
    name: Test PyPI Install - ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux AMD64
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            python-version: "3.10"
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            python-version: "3.13"
          # macOS AMD64
          - os: macos
            arch: amd64
            runner: macos-13
            python-version: "3.10"
          - os: macos
            arch: amd64
            runner: macos-13
            python-version: "3.13"
          # macOS ARM64 (Apple Silicon)
          - os: macos
            arch: arm64
            runner: macos-latest
            python-version: "3.10"
          - os: macos
            arch: arm64
            runner: macos-latest
            python-version: "3.13"
          # Windows AMD64
          - os: windows
            arch: amd64
            runner: windows-latest
            python-version: "3.10"
          - os: windows
            arch: amd64
            runner: windows-latest
            python-version: "3.13"

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch == 'amd64' && 'x64' || matrix.arch }}

      - name: Setup UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: Create fresh virtual environment
        run: |
          uv venv test-env
        shell: bash

      - name: Install langflow from PyPI (Windows)
        if: matrix.os == 'windows'
        run: |
          if [ -n "${{ inputs.langflow-version }}" ]; then
            ./test-env/Scripts/python -m pip install langflow==${{ inputs.langflow-version }}
          else  
            ./test-env/Scripts/python -m pip install langflow
          fi
        shell: bash

      - name: Install langflow from PyPI (Unix)
        if: matrix.os != 'windows'
        run: |
          if [ -n "${{ inputs.langflow-version }}" ]; then
            ./test-env/bin/python -m pip install langflow==${{ inputs.langflow-version }}
          else
            ./test-env/bin/python -m pip install langflow
          fi
        shell: bash

      - name: Test CLI help command (Windows)
        if: matrix.os == 'windows'
        run: |
          ./test-env/Scripts/python -m langflow --help
        shell: cmd

      - name: Test CLI help command (Unix)
        if: matrix.os != 'windows'
        run: |
          ./test-env/bin/python -m langflow --help
        shell: bash

      - name: Test server startup (Windows)
        if: matrix.os == 'windows'
        timeout-minutes: ${{ inputs.test-timeout / 60 }}
        run: |
          # Start server in background
          start /B ./test-env/Scripts/python -m langflow run --host localhost --port 7860 --backend-only
          
          # Wait for server to be ready
          $timeout = ${{ inputs.test-timeout }}
          $elapsed = 0
          do {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:7860/api/v1/auto_login" -UseBasicParsing -TimeoutSec 5
              if ($response.StatusCode -eq 200) {
                Write-Host "✅ Server is ready on ${{ matrix.os }}-${{ matrix.arch }}"
                break
              }
            } catch {
              Start-Sleep -Seconds 5
              $elapsed += 5
            }
          } while ($elapsed -lt $timeout)
          
          if ($elapsed -ge $timeout) {
            Write-Host "❌ Server failed to start within timeout on ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          }
          
          # Stop any running langflow processes
          Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object {$_.CommandLine -like "*langflow*"} | Stop-Process -Force
        shell: powershell

      - name: Test server startup (Unix)  
        if: matrix.os != 'windows'
        timeout-minutes: ${{ inputs.test-timeout / 60 }}
        run: |
          # Start server in background
          ./test-env/bin/python -m langflow run --host localhost --port 7860 --backend-only &
          SERVER_PID=$!
          
          # Wait for server to be ready
          timeout ${{ inputs.test-timeout }} bash -c '
            until curl -f http://localhost:7860/api/v1/auto_login >/dev/null 2>&1; do 
              sleep 5
            done
          ' || {
            echo "❌ Server failed to start within timeout on ${{ matrix.os }}-${{ matrix.arch }}"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          }
          
          echo "✅ Server is ready on ${{ matrix.os }}-${{ matrix.arch }}"
          
          # Clean shutdown
          kill $SERVER_PID 2>/dev/null || true
          sleep 5
        shell: bash

      - name: Test import in Python (Windows)
        if: matrix.os == 'windows'
        run: |
          ./test-env/Scripts/python -c "
          try:
              import langflow
              print('✅ langflow import successful on ${{ matrix.os }}-${{ matrix.arch }}')
          except Exception as e:
              print(f'❌ langflow import failed on ${{ matrix.os }}-${{ matrix.arch }}: {e}')
              exit(1)
          "
        shell: cmd

      - name: Test import in Python (Unix)
        if: matrix.os != 'windows'
        run: |
          ./test-env/bin/python -c "
          try:
              import langflow
              print('✅ langflow import successful on ${{ matrix.os }}-${{ matrix.arch }}')
          except Exception as e:
              print(f'❌ langflow import failed on ${{ matrix.os }}-${{ matrix.arch }}: {e}')
              exit(1)
          "
        shell: bash

  test-source-build:
    if: inputs.test-from-pypi == false
    name: Test Source Build and Install
    uses: ./.github/workflows/cross-platform-test.yml
    with:
      base-artifact-name: ""
      main-artifact-name: ""
      test-timeout: ${{ inputs.test-timeout }}

  test-summary:
    name: Test Summary
    needs: [test-pypi-installation, test-source-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-pypi-installation.result }}" = "failure" ] || [ "${{ needs.test-source-build.result }}" = "failure" ]; then
            echo "❌ Cross-platform tests failed"
            exit 1
          elif [ "${{ needs.test-pypi-installation.result }}" = "success" ] || [ "${{ needs.test-source-build.result }}" = "success" ]; then
            echo "✅ Cross-platform tests passed"
          else
            echo "ℹ️ No tests were run"
          fi