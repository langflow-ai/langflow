steps:
  # Step 1: Build the Frontend Docker image
  - name: "gcr.io/cloud-builders/docker"
    id: BuildFrontendImage
    env:
      - 'DOCKER_BUILDKIT=1'
    args:
      [
        "build",
        "--build-arg", "NODE_IMAGE=node@sha256:bac8ff0b5302b06924a5e288fb4ceecef9c8bb0bb92515985d2efdc3a2447052",
        "--build-arg", "NGINX_IMAGE=nginxinc/nginx-unprivileged@sha256:119e9d5975ee8a7e20fa30a9a95f63b9fc21c7fca1e866c7966151f6f4df7526",
        "--build-arg", "DEFAULT_FRONTEND_PORT=8080",
        "--build-arg", "UID=${_FRONTEND_UID}",
        "--build-arg", "GID=${_FRONTEND_GID}",
        "--platform", "linux/amd64",
        "--tag", "${_IMAGE_FRONTEND}:${SHORT_SHA}",
        "--tag", "${_IMAGE_FRONTEND}:latest",
        "-f", "docker/frontend/build_and_push_frontend.Dockerfile",
        "."
      ]
  # Step 2: Push the frontend image with specific SHA tag
  - name: "gcr.io/cloud-builders/docker"
    id: PushFrontendImage
    args: ["push", "${_IMAGE_FRONTEND}:${SHORT_SHA}"]
  # Step 3: Build the backend Docker image
  - name: "gcr.io/cloud-builders/docker"
    id: BuildBackendImage
    env:
      - 'DOCKER_BUILDKIT=1'
    args:
      [
        "build",
        "--build-arg", "BUILDER_BASE_IMAGE=ghcr.io/astral-sh/uv@sha256:8b2699bdfcbf3de3199688c16e4295dd5412f4edd3b995e8a45eebf84f42c044",
        "--build-arg", "PYTHON_IMAGE=python@sha256:aaa3f8cb64dd64e5f8cb6e58346bdcfa410a108324b0f28f1a7cc5964355b211",
        "--build-arg", "DEFAULT_BACKEND_PORT=7860",
        "--build-arg", "DEFAULT_BACKEND_HOST=0.0.0.0",
        "--build-arg", "UID=${_BACKEND_UID}",
        "--build-arg", "GID=${_BACKEND_GID}",
        "--platform", "linux/amd64",
        "--tag", "${_IMAGE_BACKEND}:${SHORT_SHA}",
        "--tag", "${_IMAGE_BACKEND}:latest",
        "-f", "docker/build_and_push_backend_only.Dockerfile",
        "."
      ]
  # Step 4: Push the backend image with specific SHA tag
  - name: "gcr.io/cloud-builders/docker"
    id: PushBackendImage
    args: ["push", "${_IMAGE_BACKEND}:${SHORT_SHA}"]
  # Step 5: Build the backend image with network tools`
  - name: "gcr.io/cloud-builders/docker"
    id: BuildBackendImageWithTools
    env:
      - 'DOCKER_BUILDKIT=1'
    args:
      [
        "build",
        "--build-arg", "PYTHON_IMAGE=python@sha256:aaa3f8cb64dd64e5f8cb6e58346bdcfa410a108324b0f28f1a7cc5964355b211",
        "--platform", "linux/amd64",
        "--tag", "${_IMAGE_BACKEND}-network-tools:${SHORT_SHA}",
        "--tag", "${_IMAGE_BACKEND}-network-tools:latest",
        "-f", "docker/build_and_push_backend_only.Dockerfile",
        "."
      ]
  # Step 6: Push the backend image with network tools with specific SHA tag
  - name: "gcr.io/cloud-builders/docker"
    id: PushBackendImageNetworkTools
    args: ["push", "${_IMAGE_BACKEND-network-tools}:${SHORT_SHA}"]
images:
    - "${_IMAGE_FRONTEND}:${SHORT_SHA}"
    - "${_IMAGE_FRONTEND}:latest"
    - "${_IMAGE_BACKEND}:${SHORT_SHA}"
    - "${_IMAGE_BACKEND}:latest"
options:
    logging: CLOUD_LOGGING_ONLY
    env:
      - DOCKER_CLI_EXPERIMENTAL=enabled
    pool:
        name: projects/tcinc-dev/locations/northamerica-northeast2/workerPools/kubert-pool
