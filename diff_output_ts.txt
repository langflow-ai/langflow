diff --git a/src/frontend/src/CustomNodes/GenericNode/components/NodeStatus/components/build-status-display.tsx b/src/frontend/src/CustomNodes/GenericNode/components/NodeStatus/components/build-status-display.tsx
index e56b6d79a0..78cd03d7e1 100644
--- a/src/frontend/src/CustomNodes/GenericNode/components/NodeStatus/components/build-status-display.tsx
+++ b/src/frontend/src/CustomNodes/GenericNode/components/NodeStatus/components/build-status-display.tsx
@@ -3,6 +3,7 @@ import {
   STATUS_BUILD,
   STATUS_BUILDING,
   STATUS_INACTIVE,
+  STATUS_MISSING_FIELDS_ERROR,
 } from "@/constants/constants";
 import { BuildStatus } from "@/constants/enums";
 
@@ -58,6 +59,11 @@ const BuildStatusDisplay = ({
     return <StatusMessage>{STATUS_INACTIVE}</StatusMessage>;
   }
 
+  if (buildStatus === BuildStatus.ERROR && !validationStatus) {
+    // If the build status is error and there is no validation status, it means that it failed before building, so show the Missing Required Fields error message
+    return <StatusMessage>{STATUS_MISSING_FIELDS_ERROR}</StatusMessage>;
+  }
+
   if (!validationStatus) {
     return <StatusMessage>{STATUS_BUILD}</StatusMessage>;
   }
diff --git a/src/frontend/src/CustomNodes/GenericNode/components/OutputComponent/index.tsx b/src/frontend/src/CustomNodes/GenericNode/components/OutputComponent/index.tsx
index 3b9fbdbd7a..3bc98ab02c 100644
--- a/src/frontend/src/CustomNodes/GenericNode/components/OutputComponent/index.tsx
+++ b/src/frontend/src/CustomNodes/GenericNode/components/OutputComponent/index.tsx
@@ -1,12 +1,19 @@
 import { ForwardedIconComponent } from "@/components/common/genericIconComponent";
 import { Button } from "@/components/ui/button";
 import {
-  DropdownMenu,
-  DropdownMenuContent,
-  DropdownMenuItem,
-  DropdownMenuTrigger,
-} from "@/components/ui/dropdown-menu";
+  Command,
+  CommandGroup,
+  CommandItem,
+  CommandList,
+} from "@/components/ui/command";
+
+import {
+  Popover,
+  PopoverContentWithoutPortal,
+  PopoverTrigger,
+} from "@/components/ui/popover";
 import useFlowStore from "@/stores/flowStore";
+import { useRef } from "react";
 import ShadTooltip from "../../../../components/common/shadTooltipComponent";
 import { outputComponentType } from "../../../../types/components";
 import { cn } from "../../../../utils/utils";
@@ -56,6 +63,7 @@ export default function OutputComponent({
   const hasGroupOutputs = outputs?.some?.((output) => output.group_outputs);
   const isConditionalRouter = nodeType === "ConditionalRouter";
   const hasOutputs = outputs.length > 1;
+  const refButton = useRef<HTMLButtonElement>(null);
 
   const shouldShowDropdown =
     hasOutputs && !hasLoopOutput && !hasGroupOutputs && !isConditionalRouter;
@@ -63,11 +71,13 @@ export default function OutputComponent({
   return (
     <div>
       {shouldShowDropdown ? (
-        <DropdownMenu>
-          <DropdownMenuTrigger asChild>
+        <Popover>
+          <PopoverTrigger asChild>
             <Button
               unstyled
-              className="group flex items-center gap-2"
+              role="combobox"
+              ref={refButton}
+              className="no-focus-visible group flex items-center gap-2"
               data-testid={`dropdown-output-${outputName?.toLowerCase()}`}
             >
               <div className="flex items-center gap-1 truncate rounded-md px-2 py-1 text-[13px] font-medium group-hover:bg-primary/10">
@@ -78,27 +88,38 @@ export default function OutputComponent({
                 />
               </div>
             </Button>
-          </DropdownMenuTrigger>
-          <DropdownMenuContent className="min-w-[200px] max-w-[250px]">
-            {outputs.map((output) => (
-              <DropdownMenuItem
-                key={output.name}
-                data-testid={`dropdown-item-output-${outputName?.toLowerCase()}-${output.display_name?.toLowerCase()}`}
-                className="cursor-pointer justify-between px-3 py-2"
-                onClick={() => {
-                  handleSelectOutput && handleSelectOutput(output);
-                }}
-              >
-                <span className="truncate text-[13px]">
-                  {output.display_name ?? output.name}
-                </span>
-                <span className="ml-4 text-[13px] text-muted-foreground">
-                  {output.types.join(", ")}
-                </span>
-              </DropdownMenuItem>
-            ))}
-          </DropdownMenuContent>
-        </DropdownMenu>
+          </PopoverTrigger>
+          <PopoverContentWithoutPortal
+            side="bottom"
+            align="end"
+            className="noflow nowheel nopan nodelete nodrag w-full min-w-[200px] max-w-[250px] p-0"
+          >
+            <Command>
+              <CommandList>
+                <CommandGroup defaultChecked={false} className="p-0">
+                  {outputs.map((output) => (
+                    <CommandItem
+                      key={output.name}
+                      data-testid={`dropdown-item-output-${outputName?.toLowerCase()}-${output.display_name?.toLowerCase()}`}
+                      className="cursor-pointer justify-between rounded-none px-3 py-2"
+                      onSelect={() => {
+                        handleSelectOutput && handleSelectOutput(output);
+                      }}
+                      value={output.name}
+                    >
+                      <span className="truncate text-[13px]">
+                        {output.display_name ?? output.name}
+                      </span>
+                      <span className="ml-4 text-[13px] text-muted-foreground">
+                        {output.types.join(", ")}
+                      </span>
+                    </CommandItem>
+                  ))}
+                </CommandGroup>
+              </CommandList>
+            </Command>
+          </PopoverContentWithoutPortal>
+        </Popover>
       ) : (
         singleOutput
       )}
diff --git a/src/frontend/src/CustomNodes/GenericNode/index.tsx b/src/frontend/src/CustomNodes/GenericNode/index.tsx
index dae1f3fdee..b48f6a3b2b 100644
--- a/src/frontend/src/CustomNodes/GenericNode/index.tsx
+++ b/src/frontend/src/CustomNodes/GenericNode/index.tsx
@@ -325,6 +325,18 @@ function GenericNode({
     [data.id, setNode, setEdges, updateNodeInternals],
   );
 
+  useEffect(() => {
+    if (
+      data?.selected_output ||
+      (data?.node?.outputs?.filter((output) => !output.group_outputs)?.length ??
+        0) <= 1
+    )
+      return;
+    handleSelectOutput(
+      data.node?.outputs?.find((output) => output.selected) || null,
+    );
+  }, [data.node?.outputs, data?.selected_output, handleSelectOutput]);
+
   const [hasChangedNodeDescription, setHasChangedNodeDescription] =
     useState(false);
 
diff --git a/src/frontend/src/CustomNodes/NoteNode/index.tsx b/src/frontend/src/CustomNodes/NoteNode/index.tsx
index a05055390a..49abbc42c6 100644
--- a/src/frontend/src/CustomNodes/NoteNode/index.tsx
+++ b/src/frontend/src/CustomNodes/NoteNode/index.tsx
@@ -84,8 +84,7 @@ function NoteNode({
       ),
     [data, bgColor, selected],
   );
-  console.log(nodeData);
-  console.log();
+
   return (
     <>
       <NodeResizer
diff --git a/src/frontend/src/components/core/codeTabsComponent/components/tweaksComponent/index.tsx b/src/frontend/src/components/core/codeTabsComponent/components/tweaksComponent/index.tsx
index 4005e63ced..1f3ac3fd5e 100644
--- a/src/frontend/src/components/core/codeTabsComponent/components/tweaksComponent/index.tsx
+++ b/src/frontend/src/components/core/codeTabsComponent/components/tweaksComponent/index.tsx
@@ -4,13 +4,9 @@ import { TweakComponent } from "../tweakComponent";
 
 export function TweaksComponent({ open }: { open: boolean }) {
   const nodes = useTweaksStore((state) => state.nodes);
-  return (
-    <div className="h-full w-full overflow-y-auto overflow-x-hidden rounded-lg bg-muted custom-scroll">
-      {nodes?.map((node: AllNodeType, i) => (
-        <div className="px-3" key={i}>
-          <TweakComponent open={open} node={node} />
-        </div>
-      ))}
+  return nodes?.map((node: AllNodeType, i) => (
+    <div className="px-3" key={i}>
+      <TweakComponent open={open} node={node} />
     </div>
-  );
+  ));
 }
diff --git a/src/frontend/src/components/core/dropdownComponent/index.tsx b/src/frontend/src/components/core/dropdownComponent/index.tsx
index 46f8450f0e..9f16b73a79 100644
--- a/src/frontend/src/components/core/dropdownComponent/index.tsx
+++ b/src/frontend/src/components/core/dropdownComponent/index.tsx
@@ -82,6 +82,7 @@ export default function Dropdown({
     // We should only reset the value if it's not in options and not in filteredOptions
     // and not a recently added custom value
     if (!options.includes(value) && !filteredOptions.includes(value)) {
+      if (value) onSelect("", undefined, true);
       return null;
     }
     return value;
@@ -95,7 +96,7 @@ export default function Dropdown({
   const fuse = new Fuse(validOptions, { keys: ["name", "value"] });
   const PopoverContentDropdown =
     children || editNode ? PopoverContent : PopoverContentWithoutPortal;
-  const { helperText } = baseInputProps;
+  const { helperText, hasRefreshButton } = baseInputProps;
 
   // API and store hooks
   const postTemplateValue = usePostTemplateValue({
@@ -356,7 +357,7 @@ export default function Dropdown({
   );
 
   const renderSearchInput = () => (
-    <div className="flex items-center border-b px-3">
+    <div className="flex items-center border-b px-2.5">
       <ForwardedIconComponent
         name="search"
         className="mr-2 h-4 w-4 shrink-0 opacity-50"
@@ -365,66 +366,16 @@ export default function Dropdown({
         onChange={searchRoleByTerm}
         onKeyDown={handleInputKeyDown}
         placeholder="Search options..."
-        className="flex h-9 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50"
+        className="flex h-9 w-full rounded-md bg-transparent py-3 text-[13px] outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50"
         autoComplete="off"
         data-testid="dropdown_search_input"
       />
     </div>
   );
 
-  const renderCustomOptionDialog = () => (
-    <CommandGroup className="flex flex-col">
-      <CommandItem className="flex cursor-pointer items-center justify-start gap-2 truncate py-3 text-xs font-semibold text-muted-foreground">
-        <Button
-          className="w-full"
-          unstyled
-          onClick={() => {
-            setOpenDialog(true);
-          }}
-        >
-          <div className="flex items-center gap-2 pl-1">
-            <ForwardedIconComponent
-              name="Plus"
-              className="h-3 w-3 text-primary"
-            />
-            {`New ${firstWord}`}
-          </div>
-        </Button>
-      </CommandItem>
-      <CommandItem className="flex cursor-pointer items-center justify-start gap-2 truncate py-3 text-xs font-semibold text-muted-foreground">
-        <Button
-          className="w-full"
-          unstyled
-          onClick={() => {
-            handleRefreshButtonPress();
-          }}
-        >
-          <div className="flex items-center gap-2 pl-1">
-            <ForwardedIconComponent
-              name="RefreshCcw"
-              className={cn("refresh-icon h-3 w-3 text-primary")}
-            />
-            Refresh list
-          </div>
-        </Button>
-      </CommandItem>
-      <NodeDialog
-        open={openDialog}
-        dialogInputs={dialogInputs}
-        onClose={() => {
-          setOpenDialog(false);
-          setOpen(false);
-        }}
-        nodeId={nodeId!}
-        name={name!}
-        nodeClass={nodeClass!}
-      />
-    </CommandGroup>
-  );
-
   const renderOptionsList = () => (
-    <CommandList>
-      <CommandGroup defaultChecked={false}>
+    <CommandList className="max-h-[300px] overflow-y-auto">
+      <CommandGroup defaultChecked={false} className="p-0">
         {filteredOptions?.length > 0 ? (
           filteredOptions?.map((option, index) => (
             <ShadTooltip
@@ -440,7 +391,7 @@ export default function Dropdown({
                     onSelect(currentValue);
                     setOpen(false);
                   }}
-                  className="items-center"
+                  className="w-full items-center rounded-none"
                   data-testid={`${option}-${index}-option`}
                 >
                   <div className="flex w-full items-center gap-2">
@@ -451,14 +402,18 @@ export default function Dropdown({
                       />
                     )}
                     <div
-                      className={cn("flex truncate", {
-                        "flex-col":
-                          filteredMetadata && filteredMetadata?.length > 0,
-                        "w-full pl-2": !filteredMetadata?.[index]?.icon,
+                      className={cn("flex w-full", {
+                        "pl-2": !filteredMetadata?.[index]?.icon,
                       })}
                     >
-                      <div className="flex truncate">
-                        {option}{" "}
+                      <div
+                        className={cn("truncate text-[13px]", {
+                          "w-1/2": filteredMetadata?.length !== 0,
+                        })}
+                      >
+                        {option}
+                      </div>
+                      {filteredMetadata?.[index]?.status && (
                         <span
                           className={`flex items-center pl-2 text-xs ${getStatusColor(
                             filteredMetadata?.[index]?.status,
@@ -470,9 +425,10 @@ export default function Dropdown({
                             ]?.status?.toLowerCase()}
                           />
                         </span>
-                      </div>
-                      {filteredMetadata && filteredMetadata?.length > 0 ? (
-                        <div className="flex w-full items-center overflow-hidden text-muted-foreground">
+                      )}
+
+                      {filteredMetadata && filteredMetadata?.length > 0 && (
+                        <div className="ml-auto flex items-center overflow-hidden pl-2 text-muted-foreground">
                           {Object.entries(
                             filterMetadataKeys(filteredMetadata?.[index] || {}),
                           )
@@ -494,25 +450,27 @@ export default function Dropdown({
                                     className="mx-1 h-1 w-1 flex-shrink-0 overflow-visible fill-muted-foreground"
                                   />
                                 )}
-                                <div
-                                  className={cn("text-xs", {
-                                    "w-full truncate": i === arr.length - 1,
-                                  })}
-                                >{`${String(value)} ${key}`}</div>
+                                <div className="truncate text-xs">
+                                  {`${String(value)} ${key}`}
+                                </div>
                               </div>
                             ))}
                         </div>
-                      ) : (
-                        <div className="ml-auto flex">
-                          <ForwardedIconComponent
-                            name="Check"
-                            className={cn(
-                              "h-4 w-4 shrink-0 text-primary",
-                              value === option ? "opacity-100" : "opacity-0",
-                            )}
-                          />
-                        </div>
                       )}
+                      <div
+                        className={cn("pl-2", {
+                          "ml-auto":
+                            !filteredMetadata || filteredMetadata.length === 0,
+                        })}
+                      >
+                        <ForwardedIconComponent
+                          name="Check"
+                          className={cn(
+                            "h-4 w-4 shrink-0 text-primary",
+                            value === option ? "opacity-100" : "opacity-0",
+                          )}
+                        />
+                      </div>
                     </div>
                   </div>
                 </CommandItem>
@@ -526,7 +484,56 @@ export default function Dropdown({
         )}
       </CommandGroup>
       <CommandSeparator />
-      {dialogInputs && dialogInputs?.fields && renderCustomOptionDialog()}
+      {dialogInputs && dialogInputs?.fields && (
+        <CommandGroup className="p-0">
+          <CommandItem className="flex cursor-pointer items-center justify-start gap-2 truncate rounded-none py-2.5 text-xs font-semibold text-muted-foreground">
+            <Button
+              className="w-full"
+              unstyled
+              onClick={() => {
+                setOpenDialog(true);
+              }}
+            >
+              <div className="flex items-center gap-2 pl-1">
+                <ForwardedIconComponent
+                  name="Plus"
+                  className="h-3 w-3 text-primary"
+                />
+                {`New ${firstWord}`}
+              </div>
+            </Button>
+          </CommandItem>
+          <CommandItem className="flex cursor-pointer items-center justify-start gap-2 truncate rounded-none py-2.5 text-xs font-semibold text-muted-foreground">
+            <Button
+              className="w-full"
+              unstyled
+              data-testid={`refresh-dropdown-list-${name}`}
+              onClick={() => {
+                handleRefreshButtonPress();
+              }}
+            >
+              <div className="flex items-center gap-2 pl-1">
+                <ForwardedIconComponent
+                  name="RefreshCcw"
+                  className={cn("refresh-icon h-3 w-3 text-primary")}
+                />
+                Refresh list
+              </div>
+            </Button>
+          </CommandItem>
+          <NodeDialog
+            open={openDialog}
+            dialogInputs={dialogInputs}
+            onClose={() => {
+              setOpenDialog(false);
+              setOpen(false);
+            }}
+            nodeId={nodeId!}
+            name={name!}
+            nodeClass={nodeClass!}
+          />
+        </CommandGroup>
+      )}
     </CommandList>
   );
 
@@ -539,9 +546,31 @@ export default function Dropdown({
         children ? {} : { minWidth: refButton?.current?.clientWidth ?? "200px" }
       }
     >
-      <Command>
+      <Command className="flex flex-col">
         {options?.length > 0 && renderSearchInput()}
         {renderOptionsList()}
+        {!dialogInputs?.fields && hasRefreshButton && (
+          <div className="sticky bottom-0 border-t bg-background">
+            <CommandItem className="flex cursor-pointer items-center justify-start gap-2 truncate rounded-b-md py-3 text-xs font-semibold text-muted-foreground">
+              <Button
+                className="w-full"
+                unstyled
+                data-testid={`refresh-dropdown-list-${name}`}
+                onClick={() => {
+                  handleRefreshButtonPress();
+                }}
+              >
+                <div className="flex items-center gap-2 pl-1">
+                  <ForwardedIconComponent
+                    name="RefreshCcw"
+                    className={cn("refresh-icon h-3 w-3 text-primary")}
+                  />
+                  Refresh list
+                </div>
+              </Button>
+            </CommandItem>
+          </div>
+        )}
       </Command>
     </PopoverContentDropdown>
   );
diff --git a/src/frontend/src/components/core/parameterRenderComponent/components/mcpComponent/index.tsx b/src/frontend/src/components/core/parameterRenderComponent/components/mcpComponent/index.tsx
index 44645ecc7a..87a73dfa07 100644
--- a/src/frontend/src/components/core/parameterRenderComponent/components/mcpComponent/index.tsx
+++ b/src/frontend/src/components/core/parameterRenderComponent/components/mcpComponent/index.tsx
@@ -25,7 +25,9 @@ export default function McpComponent({
         name: server.name,
         description:
           server.toolsCount === null
-            ? "Loading..."
+            ? server.error
+              ? "Error"
+              : "Loading..."
             : !server.toolsCount
               ? "No actions found"
               : `${server.toolsCount} action${server.toolsCount === 1 ? "" : "s"}`,
diff --git a/src/frontend/src/components/core/parameterRenderComponent/components/refreshParameterComponent/index.tsx b/src/frontend/src/components/core/parameterRenderComponent/components/refreshParameterComponent/index.tsx
deleted file mode 100644
index b7b35c4d23..0000000000
--- a/src/frontend/src/components/core/parameterRenderComponent/components/refreshParameterComponent/index.tsx
+++ /dev/null
@@ -1,74 +0,0 @@
-import { RefreshButton } from "@/components/ui/refreshButton";
-import { FLEX_VIEW_TYPES } from "@/constants/constants";
-import { usePostTemplateValue } from "@/controllers/API/queries/nodes/use-post-template-value";
-import { mutateTemplate } from "@/CustomNodes/helpers/mutate-template";
-import useAlertStore from "@/stores/alertStore";
-import { APIClassType, InputFieldType } from "@/types/api";
-import { cn } from "@/utils/utils";
-import { InputProps } from "../../types";
-
-export function RefreshParameterComponent({
-  children,
-  templateData,
-  disabled,
-  nodeClass,
-  editNode,
-  handleNodeClass,
-  nodeId,
-  name,
-}: {
-  children: React.ReactElement<InputProps>;
-  templateData: Partial<InputFieldType>;
-  disabled: boolean;
-  nodeClass: APIClassType;
-  editNode: boolean;
-  handleNodeClass: (value: any, code?: string, type?: string) => void;
-  nodeId: string;
-  name: string;
-}) {
-  const postTemplateValue = usePostTemplateValue({
-    parameterId: name,
-    nodeId: nodeId,
-    node: nodeClass,
-  });
-
-  const setErrorData = useAlertStore((state) => state.setErrorData);
-  const handleRefreshButtonPress = () =>
-    mutateTemplate(
-      templateData.value,
-      nodeId,
-      nodeClass,
-      handleNodeClass,
-      postTemplateValue,
-      setErrorData,
-    );
-
-  const isFlexView = FLEX_VIEW_TYPES.includes(templateData.type ?? "");
-
-  return (
-    (children ||
-      (templateData.refresh_button && !templateData.dialog_inputs)) && (
-      <div
-        className={cn(
-          "flex w-full items-center justify-center gap-3",
-          isFlexView ? "justify-end" : "justify-center",
-        )}
-      >
-        {children}
-        {templateData.refresh_button &&
-          !templateData.dialog_inputs?.fields?.data?.node?.template && (
-            <div className="shrink-0 flex-col">
-              <RefreshButton
-                isLoading={postTemplateValue.isPending}
-                disabled={disabled}
-                editNode={editNode}
-                button_text={templateData.refresh_button_text}
-                handleUpdateValues={handleRefreshButtonPress}
-                id={"refresh-button-" + name}
-              />
-            </div>
-          )}
-      </div>
-    )
-  );
-}
diff --git a/src/frontend/src/components/core/parameterRenderComponent/components/sortableListComponent/index.tsx b/src/frontend/src/components/core/parameterRenderComponent/components/sortableListComponent/index.tsx
index c763c7db05..34c3e1f44d 100644
--- a/src/frontend/src/components/core/parameterRenderComponent/components/sortableListComponent/index.tsx
+++ b/src/frontend/src/components/core/parameterRenderComponent/components/sortableListComponent/index.tsx
@@ -79,6 +79,7 @@ const SortableListItem = memo(
 const SortableListComponent = ({
   tooltip = "",
   name,
+  editNode = false,
   helperText = "",
   helperMetadata = { icon: undefined, variant: "muted-foreground" },
   options = [],
@@ -139,10 +140,18 @@ const SortableListComponent = ({
             size="xs"
             role="combobox"
             onClick={handleOpenListSelectionDialog}
-            className="dropdown-component-outline input-edit-node w-full py-2"
+            className={cn(
+              "dropdown-component-outline input-edit-node w-full",
+              editNode ? "py-1" : "py-2",
+            )}
             data-testid="button_open_list_selection"
           >
-            <div className={cn("flex items-center text-sm font-semibold")}>
+            <div
+              className={cn(
+                "flex items-center",
+                editNode ? "text-xs" : "text-sm",
+              )}
+            >
               {placeholder}
             </div>
           </Button>
@@ -182,6 +191,7 @@ const SortableListComponent = ({
         open={open}
         onClose={handleCloseListSelectionDialog}
         searchCategories={searchCategory}
+        editNode={editNode}
         setSelectedList={setListDataHandler}
         selectedList={listData}
         options={options}
diff --git a/src/frontend/src/components/core/parameterRenderComponent/components/tableComponent/components/tableNodeCellRender/index.tsx b/src/frontend/src/components/core/parameterRenderComponent/components/tableComponent/components/tableNodeCellRender/index.tsx
index fd637ab406..35dcde3fb3 100644
--- a/src/frontend/src/components/core/parameterRenderComponent/components/tableComponent/components/tableNodeCellRender/index.tsx
+++ b/src/frontend/src/components/core/parameterRenderComponent/components/tableComponent/components/tableNodeCellRender/index.tsx
@@ -57,12 +57,13 @@ export default function TableNodeCellRender({
       <div
         className={cn(
           "group mx-auto flex h-full max-h-48 w-[300px] items-center justify-center overflow-auto px-1 py-2.5 custom-scroll",
-          isTweaks && "pointer-events-none opacity-70",
+          isTweaks && "pointer-events-none opacity-30",
         )}
       >
         <ParameterRenderComponent
           nodeId={nodeId}
           handleOnNewValue={handleOnNewValue}
+          placeholder={parameter.placeholder}
           templateData={parameter}
           name={parameterId}
           templateValue={parameter.value}
diff --git a/src/frontend/src/components/core/parameterRenderComponent/index.tsx b/src/frontend/src/components/core/parameterRenderComponent/index.tsx
index cbd1db2caa..ac58be58c9 100644
--- a/src/frontend/src/components/core/parameterRenderComponent/index.tsx
+++ b/src/frontend/src/components/core/parameterRenderComponent/index.tsx
@@ -20,7 +20,6 @@ import McpComponent from "./components/mcpComponent";
 import MultiselectComponent from "./components/multiselectComponent";
 import PromptAreaComponent from "./components/promptComponent";
 import QueryComponent from "./components/queryComponent";
-import { RefreshParameterComponent } from "./components/refreshParameterComponent";
 import SortableListComponent from "./components/sortableListComponent";
 import { StrRenderComponent } from "./components/strRenderComponent";
 import ToggleShadComponent from "./components/toggleShadComponent";
@@ -295,20 +294,5 @@ export function ParameterRenderComponent({
     }
   };
 
-  return useMemo(
-    () => (
-      <RefreshParameterComponent
-        templateData={templateData}
-        disabled={disabled}
-        nodeId={nodeId}
-        editNode={editNode}
-        nodeClass={nodeClass}
-        handleNodeClass={handleNodeClass}
-        name={name}
-      >
-        {renderComponent()}
-      </RefreshParameterComponent>
-    ),
-    [templateData, disabled, nodeId, editNode, nodeClass, name, templateValue],
-  );
+  return renderComponent();
 }
diff --git a/src/frontend/src/constants/constants.ts b/src/frontend/src/constants/constants.ts
index fa4d8e2634..c8ecac2d92 100644
--- a/src/frontend/src/constants/constants.ts
+++ b/src/frontend/src/constants/constants.ts
@@ -189,7 +189,7 @@ export const CSVViewErrorTitle = "CSV output";
 
 export const CSVNoDataError = "No data available";
 
-export const PDFViewConstant = "Expand the ouptut to see the PDF";
+export const PDFViewConstant = "Expand the output to see the PDF";
 
 export const CSVError = "Error loading CSV";
 
@@ -709,7 +709,7 @@ export const TOOLTIP_HIDDEN_OUTPUTS = "Collapse hidden outputs";
 
 export const ZERO_NOTIFICATIONS = "No new notifications";
 
-export const SUCCESS_BUILD = "Built sucessfully ✨";
+export const SUCCESS_BUILD = "Built successfully ✨";
 
 export const ALERT_SAVE_WITH_API =
   "Caution: Unchecking this box only removes API keys from fields specifically designated for API keys.";
@@ -735,6 +735,8 @@ export const INSERT_API_KEY = "Insert your Langflow API key.";
 export const INVALID_API_KEY = "Your API key is not valid. ";
 export const CREATE_API_KEY = `Don't have an API key? Sign up at`;
 export const STATUS_BUILD = "Build to validate status.";
+export const STATUS_MISSING_FIELDS_ERROR =
+  "Please fill all the required fields.";
 export const STATUS_INACTIVE = "Execution blocked";
 export const STATUS_BUILDING = "Building...";
 export const SAVED_HOVER = "Last saved: ";
diff --git a/src/frontend/src/controllers/API/queries/mcp/use-get-mcp-servers.ts b/src/frontend/src/controllers/API/queries/mcp/use-get-mcp-servers.ts
index 4647838cb3..1aa9e850b3 100644
--- a/src/frontend/src/controllers/API/queries/mcp/use-get-mcp-servers.ts
+++ b/src/frontend/src/controllers/API/queries/mcp/use-get-mcp-servers.ts
@@ -29,8 +29,16 @@ export const useGetMCPServers: useQueryFunctionType<
       if (cachedData && Array.isArray(cachedData)) {
         const merged = data.map((server) => {
           const cached = cachedData.find((s) => s.name === server.name);
-          return cached && (cached.toolsCount !== null || cached.mode !== null)
-            ? { ...server, toolsCount: cached.toolsCount, mode: cached.mode }
+          return cached &&
+            (cached.toolsCount !== null ||
+              cached.mode !== null ||
+              cached.error !== null)
+            ? {
+                ...server,
+                toolsCount: cached.toolsCount,
+                mode: cached.mode,
+                error: cached.error,
+              }
             : server;
         });
         return merged;
diff --git a/src/frontend/src/customization/components/custom-terms-links.tsx b/src/frontend/src/customization/components/custom-terms-links.tsx
new file mode 100644
index 0000000000..279a1b04a9
--- /dev/null
+++ b/src/frontend/src/customization/components/custom-terms-links.tsx
@@ -0,0 +1,3 @@
+export const CustomTermsLinks = () => {
+  return <></>;
+};
diff --git a/src/frontend/src/customization/feature-flags.ts b/src/frontend/src/customization/feature-flags.ts
index 22f9931240..725c8baee4 100644
--- a/src/frontend/src/customization/feature-flags.ts
+++ b/src/frontend/src/customization/feature-flags.ts
@@ -14,4 +14,4 @@ export const ENABLE_WIDGET = true;
 export const ENABLE_VOICE_ASSISTANT = true;
 export const ENABLE_IMAGE_ON_PLAYGROUND = false;
 export const ENABLE_MCP = true;
-export const ENABLE_MCP_NOTICE = true;
+export const ENABLE_MCP_NOTICE = false;
diff --git a/src/frontend/src/icons/Windsurf/index.tsx b/src/frontend/src/icons/Windsurf/index.tsx
new file mode 100644
index 0000000000..9ac43757fb
--- /dev/null
+++ b/src/frontend/src/icons/Windsurf/index.tsx
@@ -0,0 +1,11 @@
+import { useDarkStore } from "@/stores/darkStore";
+import React, { forwardRef } from "react";
+import SvgWindsurf from "./Windsurf";
+
+export const WindsurfIcon = forwardRef<
+  SVGSVGElement,
+  React.PropsWithChildren<{}>
+>((props, ref) => {
+  const isdark = useDarkStore((state) => state.dark).toString();
+  return <SvgWindsurf ref={ref} isdark={isdark} {...props} />;
+});
diff --git a/src/frontend/src/icons/eagerIconImports.ts b/src/frontend/src/icons/eagerIconImports.ts
index 10736e6635..3b8e617582 100644
--- a/src/frontend/src/icons/eagerIconImports.ts
+++ b/src/frontend/src/icons/eagerIconImports.ts
@@ -112,6 +112,7 @@ import { WolframIcon } from "@/icons/Wolfram";
 import { XAIIcon } from "@/icons/xAI";
 import { YouTubeSvgIcon as YouTubeIcon } from "@/icons/Youtube";
 import { ZepMemoryIcon } from "@/icons/ZepMemory";
+import { WindsurfIcon } from "./Windsurf";
 
 // Export the eagerly loaded icons map
 export const eagerIconsMapping = {
@@ -225,6 +226,7 @@ export const eagerIconsMapping = {
   WatsonxAI: WatsonxAiIcon,
   Weaviate: WeaviateIcon,
   Wikipedia: WikipediaIcon,
+  Windsurf: WindsurfIcon,
   Wolfram: WolframIcon,
   xAI: XAIIcon,
   YouTube: YouTubeIcon,
diff --git a/src/frontend/src/icons/lazyIconImports.ts b/src/frontend/src/icons/lazyIconImports.ts
index b76fcdbd0f..e096079f94 100644
--- a/src/frontend/src/icons/lazyIconImports.ts
+++ b/src/frontend/src/icons/lazyIconImports.ts
@@ -296,6 +296,8 @@ export const lazyIconsMapping = {
     import("@/icons/Wikipedia/Wikipedia").then((mod) => ({
       default: mod.default,
     })),
+  Windsurf: () =>
+    import("@/icons/Windsurf").then((mod) => ({ default: mod.WindsurfIcon })),
   Wolfram: () =>
     import("@/icons/Wolfram/Wolfram").then((mod) => ({ default: mod.default })),
   xAI: () => import("@/icons/xAI").then((mod) => ({ default: mod.XAIIcon })),
diff --git a/src/frontend/src/modals/IOModal/components/IOFieldView/components/csv-selected.tsx b/src/frontend/src/modals/IOModal/components/IOFieldView/components/csv-selected.tsx
index e1c0e804ce..0e5be7a4bc 100644
--- a/src/frontend/src/modals/IOModal/components/IOFieldView/components/csv-selected.tsx
+++ b/src/frontend/src/modals/IOModal/components/IOFieldView/components/csv-selected.tsx
@@ -11,7 +11,7 @@ export default function CsvSelect({ node, handleChangeSelect }): JSX.Element {
   return (
     <>
       <div className="flex justify-between">
-        Expand the ouptut to see the CSV
+        Expand the output to see the CSV
       </div>
       <div className="flex items-center justify-between pt-5">
         <span>CSV separator </span>
diff --git a/src/frontend/src/modals/IOModal/components/chatView/chatInput/chat-input.tsx b/src/frontend/src/modals/IOModal/components/chatView/chatInput/chat-input.tsx
index e2796cc932..435f231b1a 100644
--- a/src/frontend/src/modals/IOModal/components/chatView/chatInput/chat-input.tsx
+++ b/src/frontend/src/modals/IOModal/components/chatView/chatInput/chat-input.tsx
@@ -162,11 +162,21 @@ export default function ChatInput({
     };
   }, [handleFileChange, currentFlowId, isBuilding]);
 
-  const send = () => {
-    sendMessage({
-      repeat: 1,
-      files: files.map((file) => file.path ?? "").filter((file) => file !== ""),
-    });
+  const setChatValueStore = useUtilityStore((state) => state.setChatValueStore);
+
+  const send = async () => {
+    const storedChatValue = chatValue;
+    try {
+      await sendMessage({
+        repeat: 1,
+        files: files
+          .map((file) => file.path ?? "")
+          .filter((file) => file !== ""),
+      });
+    } catch (error) {
+      setChatValueStore(storedChatValue);
+    }
+
     setFiles([]);
   };
 
diff --git a/src/frontend/src/modals/IOModal/components/chatView/chatInput/components/text-area-wrapper.tsx b/src/frontend/src/modals/IOModal/components/chatView/chatInput/components/text-area-wrapper.tsx
index 9060aa0f4e..4d9132c5c6 100644
--- a/src/frontend/src/modals/IOModal/components/chatView/chatInput/components/text-area-wrapper.tsx
+++ b/src/frontend/src/modals/IOModal/components/chatView/chatInput/components/text-area-wrapper.tsx
@@ -46,6 +46,7 @@ const TextAreaWrapper = ({
       data-testid="input-chat-playground"
       onKeyDown={(event) => {
         if (checkSendingOk(event)) {
+          event.preventDefault();
           send();
         }
       }}
diff --git a/src/frontend/src/modals/IOModal/components/chatView/chatMessage/chat-message.tsx b/src/frontend/src/modals/IOModal/components/chatView/chatMessage/chat-message.tsx
index 5b927b3217..09fb760c27 100644
--- a/src/frontend/src/modals/IOModal/components/chatView/chatMessage/chat-message.tsx
+++ b/src/frontend/src/modals/IOModal/components/chatView/chatMessage/chat-message.tsx
@@ -1,4 +1,3 @@
-import { ProfileIcon } from "@/components/core/appHeaderComponent/components/ProfileIcon";
 import { ContentBlockDisplay } from "@/components/core/chatComponents/ContentBlockDisplay";
 import { useUpdateMessage } from "@/controllers/API/queries/messages";
 import { CustomProfileIcon } from "@/customization/components/custom-profile-icon";
diff --git a/src/frontend/src/modals/IOModal/components/chatView/chatMessage/components/edit-message.tsx b/src/frontend/src/modals/IOModal/components/chatView/chatMessage/components/edit-message.tsx
index 3f0ee65524..979cc5e465 100644
--- a/src/frontend/src/modals/IOModal/components/chatView/chatMessage/components/edit-message.tsx
+++ b/src/frontend/src/modals/IOModal/components/chatView/chatMessage/components/edit-message.tsx
@@ -1,4 +1,5 @@
 import { EMPTY_OUTPUT_SEND_MESSAGE } from "@/constants/constants";
+import { preprocessChatMessage } from "@/utils/markdownUtils";
 import { cn } from "@/utils/utils";
 import Markdown from "react-markdown";
 import rehypeMathjax from "rehype-mathjax";
@@ -14,14 +15,6 @@ type MarkdownFieldProps = {
   isAudioMessage?: boolean;
 };
 
-// Function to replace <think> tags with a placeholder before markdown processing
-const preprocessChatMessage = (text: string): string => {
-  // Replace <think> tags with `<span class="think-tag">think:</span>`
-  return text
-    .replace(/<think>/g, "`<think>`")
-    .replace(/<\/think>/g, "`</think>`");
-};
-
 export const MarkdownField = ({
   chat,
   isEmpty,
@@ -29,7 +22,7 @@ export const MarkdownField = ({
   editedFlag,
   isAudioMessage,
 }: MarkdownFieldProps) => {
-  // Process the chat message to handle <think> tags
+  // Process the chat message to handle <think> tags and clean up tables
   const processedChatMessage = preprocessChatMessage(chatMessage);
 
   return (
diff --git a/src/frontend/src/modals/IOModal/components/chatView/components/chat-view.tsx b/src/frontend/src/modals/IOModal/components/chatView/components/chat-view.tsx
index 236e14dd0a..997c60db49 100644
--- a/src/frontend/src/modals/IOModal/components/chatView/components/chat-view.tsx
+++ b/src/frontend/src/modals/IOModal/components/chatView/components/chat-view.tsx
@@ -24,6 +24,8 @@ import { useFileHandler } from "../chatInput/hooks/use-file-handler";
 import ChatMessage from "../chatMessage/chat-message";
 import { ChatScrollAnchor } from "./chat-scroll-anchor";
 
+const TIME_TO_DISABLE_SCROLL = 2000;
+
 const MemoizedChatMessage = memo(ChatMessage, (prevProps, nextProps) => {
   return (
     prevProps.chat.message === nextProps.chat.message &&
@@ -129,11 +131,7 @@ export default function ChatView({
     // trigger focus on chat when new session is set
   }, [focusChat]);
 
-  function updateChat(
-    chat: ChatMessageType,
-    message: string,
-    stream_url?: string,
-  ) {
+  function updateChat(chat: ChatMessageType, message: string) {
     chat.message = message;
     if (chat.componentId)
       updateFlowPool(chat.componentId, {
@@ -151,7 +149,7 @@ export default function ChatView({
     !!playgroundPage,
   );
 
-  const onDrop = (e) => {
+  const onDrop = (e: React.DragEvent<HTMLDivElement>) => {
     if (!ENABLE_IMAGE_ON_PLAYGROUND && playgroundPage) {
       e.stopPropagation();
       return;
@@ -186,6 +184,8 @@ export default function ChatView({
 
   const [canScroll, setCanScroll] = useState<boolean>(false);
   const [scrolledUp, setScrolledUp] = useState<boolean>(false);
+  const [isLlmResponding, setIsLlmResponding] = useState<boolean>(false);
+  const [lastMessageContent, setLastMessageContent] = useState<string>("");
 
   const handleScroll = () => {
     if (!messagesRef.current) return;
@@ -209,8 +209,43 @@ export default function ChatView({
 
   useEffect(() => {
     setPlaygroundScrollBehaves("smooth");
-    setCanScroll(true);
-  }, [chatHistory?.length]);
+
+    if (!chatHistory || chatHistory.length === 0) {
+      setCanScroll(true);
+      return;
+    }
+
+    const lastMessage = chatHistory[chatHistory.length - 1];
+    const currentMessageContent =
+      typeof lastMessage.message === "string"
+        ? lastMessage.message
+        : JSON.stringify(lastMessage.message);
+
+    const isNewMessage = lastMessage.isSend;
+
+    const isStreamingUpdate =
+      !lastMessage.isSend &&
+      currentMessageContent !== lastMessageContent &&
+      currentMessageContent.length > lastMessageContent.length;
+
+    if (isStreamingUpdate) {
+      if (!isLlmResponding) {
+        setIsLlmResponding(true);
+        setCanScroll(true);
+
+        setTimeout(() => {
+          setCanScroll(false);
+        }, TIME_TO_DISABLE_SCROLL);
+      }
+    } else if (isNewMessage || lastMessage.isSend) {
+      setCanScroll(true);
+      if (isLlmResponding) {
+        setIsLlmResponding(false);
+      }
+    }
+
+    setLastMessageContent(currentMessageContent);
+  }, [chatHistory, isLlmResponding, lastMessageContent]);
 
   return (
     <div
@@ -294,8 +329,8 @@ export default function ChatView({
         <CustomChatInput
           playgroundPage={!!playgroundPage}
           noInput={!inputTypes.includes("ChatInput")}
-          sendMessage={({ repeat, files }) => {
-            sendMessage({ repeat, files });
+          sendMessage={async ({ repeat, files }) => {
+            await sendMessage({ repeat, files });
             track("Playground Message Sent");
           }}
           inputRef={ref}
diff --git a/src/frontend/src/modals/IOModal/playground-modal.tsx b/src/frontend/src/modals/IOModal/playground-modal.tsx
index 6d2b941f58..728b7bc38d 100644
--- a/src/frontend/src/modals/IOModal/playground-modal.tsx
+++ b/src/frontend/src/modals/IOModal/playground-modal.tsx
@@ -227,6 +227,7 @@ export default function IOModal({
           eventDelivery: eventDeliveryConfig,
         }).catch((err) => {
           console.error(err);
+          throw err;
         });
       }
     },
diff --git a/src/frontend/src/modals/apiModal/codeTabs/code-tabs.tsx b/src/frontend/src/modals/apiModal/codeTabs/code-tabs.tsx
index a0a4918834..d8fdbb1f1b 100644
--- a/src/frontend/src/modals/apiModal/codeTabs/code-tabs.tsx
+++ b/src/frontend/src/modals/apiModal/codeTabs/code-tabs.tsx
@@ -149,7 +149,7 @@ export default function APITabsComponent() {
               size="icon"
               onClick={copyToClipboard}
               data-testid="btn-copy-code"
-              className="!hover:bg-foreground group absolute right-2 top-2"
+              className="!hover:bg-foreground group absolute right-4 top-2"
             >
               {isCopied ? (
                 <IconComponent
diff --git a/src/frontend/src/modals/apiModal/index.tsx b/src/frontend/src/modals/apiModal/index.tsx
index f2b840c629..4526ed23d9 100644
--- a/src/frontend/src/modals/apiModal/index.tsx
+++ b/src/frontend/src/modals/apiModal/index.tsx
@@ -216,8 +216,17 @@ export default function ApiModal({
               />
             </Label>
           )}
-          <div className="h-full w-full overflow-y-auto overflow-x-hidden rounded-lg bg-muted custom-scroll">
-            <TweaksComponent open={openTweaks} />
+          <div className="flex flex-1 flex-col gap-2 overflow-hidden">
+            <div className="flex flex-col gap-1">
+              <span className="shrink-0 text-sm font-medium">Expose API</span>
+              <span className="text-mmd text-muted-foreground">
+                Select which component fields to expose as inputs in this flow's
+                API schema.
+              </span>
+            </div>
+            <div className="min-h-0 w-full flex-1 flex-col overflow-y-auto overflow-x-hidden rounded-lg bg-muted custom-scroll">
+              <TweaksComponent open={openTweaks} />
+            </div>
           </div>
         </BaseModal.Content>
       </BaseModal>
diff --git a/src/frontend/src/modals/codeAreaModal/index.tsx b/src/frontend/src/modals/codeAreaModal/index.tsx
index 95534f38ac..efce7df2e8 100644
--- a/src/frontend/src/modals/codeAreaModal/index.tsx
+++ b/src/frontend/src/modals/codeAreaModal/index.tsx
@@ -1,6 +1,6 @@
 import { usePostValidateCode } from "@/controllers/API/queries/nodes/use-post-validate-code";
 import { usePostValidateComponentCode } from "@/controllers/API/queries/nodes/use-post-validate-component-code";
-import useFlowStore from "@/stores/flowStore";
+import { clearHandlesFromAdvancedFields } from "@/utils/reactflowUtils";
 import "ace-builds/src-noconflict/ace";
 import "ace-builds/src-noconflict/ext-language_tools";
 import "ace-builds/src-noconflict/ext-searchbox";
@@ -83,7 +83,6 @@ export default function CodeAreaModal({
               });
               setOpen(false);
               setValue(code);
-              // setValue(code);
             } else {
               if (funcErrors.length !== 0) {
                 setErrorData({
@@ -121,6 +120,8 @@ export default function CodeAreaModal({
         onSuccess: ({ data, type }) => {
           if (data && type) {
             setValue(code);
+            clearHandlesFromAdvancedFields(componentId!, data);
+
             setNodeClass(data, type);
             setError({ detail: { error: undefined, traceback: undefined } });
             setOpen(false);
@@ -255,6 +256,7 @@ export default function CodeAreaModal({
               type="submit"
               id="checkAndSaveBtn"
               disabled={readonly}
+              data-testid="checkAndSaveBtn"
             >
               Check & Save
             </Button>
diff --git a/src/frontend/src/modals/editNodeModal/hooks/use-column-defs.ts b/src/frontend/src/modals/editNodeModal/hooks/use-column-defs.ts
index f2920d0bd1..0bcadc3495 100644
--- a/src/frontend/src/modals/editNodeModal/hooks/use-column-defs.ts
+++ b/src/frontend/src/modals/editNodeModal/hooks/use-column-defs.ts
@@ -26,7 +26,7 @@ const useColumnDefs = (
         autoHeight: true,
         flex: 1,
         resizable: false,
-        cellClass: "no-border cursor-default",
+        cellClass: "no-border cursor-default text-muted-foreground !py-1",
       },
       {
         headerName: "Description",
@@ -36,10 +36,10 @@ const useColumnDefs = (
         autoHeight: true,
         flex: 2,
         resizable: false,
-        cellClass: "no-border cursor-default",
+        cellClass: "no-border cursor-default text-muted-foreground !py-1",
       },
       {
-        headerName: "Value",
+        headerName: isTweaks ? "Current Value" : "Value",
         field: "value",
         cellRenderer: TableNodeCellRender,
         cellStyle: {
@@ -61,12 +61,12 @@ const useColumnDefs = (
         autoHeight: true,
         flex: 1,
         resizable: false,
-        cellClass: "no-border cursor-default",
+        cellClass: "no-border cursor-default !py-1",
       },
     ];
     if (!hideVisibility) {
-      colDefs.push({
-        headerName: isTweaks ? "Enable Input" : "Show",
+      colDefs.unshift({
+        headerName: isTweaks ? "Expose Input" : "Show",
         field: "advanced",
         cellRenderer: TableAdvancedToggleCellRender,
         valueGetter: (params: ValueGetterParams) => {
@@ -80,7 +80,7 @@ const useColumnDefs = (
         maxWidth: !isTweaks ? 80 : 120,
         minWidth: !isTweaks ? 80 : 120,
         resizable: false,
-        cellClass: "no-border cursor-default",
+        cellClass: "no-border cursor-default !py-1",
       });
     }
     return colDefs;
diff --git a/src/frontend/src/pages/MainPage/pages/homePage/components/McpServerTab.tsx b/src/frontend/src/pages/MainPage/pages/homePage/components/McpServerTab.tsx
index 43eacfbaa9..50e9cf237b 100644
--- a/src/frontend/src/pages/MainPage/pages/homePage/components/McpServerTab.tsx
+++ b/src/frontend/src/pages/MainPage/pages/homePage/components/McpServerTab.tsx
@@ -102,6 +102,11 @@ const autoInstallers = [
     title: "Claude",
     icon: "Claude",
   },
+  {
+    name: "windsurf",
+    title: "Windsurf",
+    icon: "Windsurf",
+  },
 ];
 
 const operatingSystemTabs = [
@@ -409,7 +414,7 @@ const McpServerTab = ({ folderName }: { folderName: string }) => {
                       {
                         onSuccess: () => {
                           setSuccessData({
-                            title: `MCP Server installed successfully on ${installer.title}`,
+                            title: `MCP Server installed successfully on ${installer.title}. You may need to restart your client to see the changes.`,
                           });
                           setLoadingMCP(
                             loadingMCP.filter(
diff --git a/src/frontend/src/pages/MainPage/pages/homePage/index.tsx b/src/frontend/src/pages/MainPage/pages/homePage/index.tsx
index 565e861185..41b0f887ef 100644
--- a/src/frontend/src/pages/MainPage/pages/homePage/index.tsx
+++ b/src/frontend/src/pages/MainPage/pages/homePage/index.tsx
@@ -8,6 +8,7 @@ import {
   ENABLE_DATASTAX_LANGFLOW,
   ENABLE_MCP,
 } from "@/customization/feature-flags";
+import { useCustomNavigate } from "@/customization/hooks/use-custom-navigate";
 import useFlowsManagerStore from "@/stores/flowsManagerStore";
 import { useFolderStore } from "@/stores/foldersStore";
 import { FlowType } from "@/types/flow";
@@ -30,6 +31,7 @@ const HomePage = ({ type }: { type: "flows" | "components" | "mcp" }) => {
   const [pageIndex, setPageIndex] = useState(1);
   const [pageSize, setPageSize] = useState(12);
   const [search, setSearch] = useState("");
+  const navigate = useCustomNavigate();
 
   const [flowType, setFlowType] = useState<"flows" | "components" | "mcp">(
     type,
@@ -42,6 +44,18 @@ const HomePage = ({ type }: { type: "flows" | "components" | "mcp" }) => {
     "";
   const flows = useFlowsManagerStore((state) => state.flows);
 
+  useEffect(() => {
+    // Only check if we have a folderId and folders have loaded
+    if (folderId && folders && folders.length > 0) {
+      const folderExists = folders.find((folder) => folder.id === folderId);
+      if (!folderExists) {
+        // Folder doesn't exist for this user, redirect to /all
+        console.error("Invalid folderId, redirecting to /all");
+        navigate("/all");
+      }
+    }
+  }, [folderId, folders, navigate]);
+
   const { data: folderData, isLoading } = useGetFolderQuery({
     id: folderId ?? myCollectionId!,
     page: pageIndex,
@@ -220,7 +234,7 @@ const HomePage = ({ type }: { type: "flows" | "components" | "mcp" }) => {
 
   return (
     <CardsWrapComponent
-      onFileDrop={handleFileDrop}
+      onFileDrop={flowType === "mcp" ? undefined : handleFileDrop}
       dragMessage={`Drop your ${isEmptyFolder ? "flows or components" : flowType} here`}
     >
       <div
diff --git a/src/frontend/src/pages/SettingsPage/pages/GeneralPage/index.tsx b/src/frontend/src/pages/SettingsPage/pages/GeneralPage/index.tsx
index 719c551746..a5e9a0ef5e 100644
--- a/src/frontend/src/pages/SettingsPage/pages/GeneralPage/index.tsx
+++ b/src/frontend/src/pages/SettingsPage/pages/GeneralPage/index.tsx
@@ -10,6 +10,7 @@ import {
   useUpdateUser,
 } from "@/controllers/API/queries/auth";
 import { useGetProfilePicturesQuery } from "@/controllers/API/queries/files";
+import { CustomTermsLinks } from "@/customization/components/custom-terms-links";
 import { ENABLE_PROFILE_ICONS } from "@/customization/feature-flags";
 import useAuthStore from "@/stores/authStore";
 import { cloneDeep } from "lodash";
@@ -160,6 +161,8 @@ export const GeneralPage = () => {
           />
         )}
       </div>
+
+      <CustomTermsLinks />
     </div>
   );
 };
diff --git a/src/frontend/src/pages/SettingsPage/pages/MCPServersPage/index.tsx b/src/frontend/src/pages/SettingsPage/pages/MCPServersPage/index.tsx
index beb9d249c4..502ea55a81 100644
--- a/src/frontend/src/pages/SettingsPage/pages/MCPServersPage/index.tsx
+++ b/src/frontend/src/pages/SettingsPage/pages/MCPServersPage/index.tsx
@@ -1,4 +1,5 @@
 import ForwardedIconComponent from "@/components/common/genericIconComponent";
+import ShadTooltip from "@/components/common/shadTooltipComponent";
 import { Button } from "@/components/ui/button";
 import {
   DropdownMenu,
@@ -14,6 +15,7 @@ import AddMcpServerModal from "@/modals/addMcpServerModal";
 import DeleteConfirmationModal from "@/modals/deleteConfirmationModal";
 import useAlertStore from "@/stores/alertStore";
 import { MCPServerInfoType } from "@/types/mcp";
+import { cn } from "@/utils/utils";
 import { useState } from "react";
 
 export default function MCPServersPage() {
@@ -101,11 +103,20 @@ export default function MCPServersPage() {
                 >
                   <div className="flex items-center gap-2">
                     <span className="text-sm font-medium">{server.name}</span>
-                    <span className="text-mmd text-muted-foreground">
-                      {server.toolsCount === null
-                        ? "Loading..."
-                        : `${server.toolsCount} action${server.toolsCount === 1 ? "" : "s"}`}
-                    </span>
+                    <ShadTooltip content={server.error}>
+                      <span
+                        className={cn(
+                          "cursor-default select-none !text-mmd text-muted-foreground",
+                          server.error && "text-accent-red-foreground",
+                        )}
+                      >
+                        {server.toolsCount === null
+                          ? server.error
+                            ? "Error"
+                            : "Loading..."
+                          : `${server.toolsCount} action${server.toolsCount === 1 ? "" : "s"}`}
+                      </span>
+                    </ShadTooltip>
                   </div>
                   <DropdownMenu>
                     <DropdownMenuTrigger asChild>
diff --git a/src/frontend/src/setupTests.ts b/src/frontend/src/setupTests.ts
new file mode 100644
index 0000000000..8d31da0726
--- /dev/null
+++ b/src/frontend/src/setupTests.ts
@@ -0,0 +1,62 @@
+// Jest setup file for testing environment
+import "@testing-library/jest-dom";
+
+// Mock ResizeObserver if not available in test environment
+global.ResizeObserver = jest.fn().mockImplementation(() => ({
+  observe: jest.fn(),
+  unobserve: jest.fn(),
+  disconnect: jest.fn(),
+}));
+
+// Mock IntersectionObserver if not available in test environment
+global.IntersectionObserver = jest.fn().mockImplementation(() => ({
+  observe: jest.fn(),
+  unobserve: jest.fn(),
+  disconnect: jest.fn(),
+}));
+
+// Mock window.matchMedia for components that use it
+Object.defineProperty(window, "matchMedia", {
+  writable: true,
+  value: jest.fn().mockImplementation((query) => ({
+    matches: false,
+    media: query,
+    onchange: null,
+    addListener: jest.fn(), // deprecated
+    removeListener: jest.fn(), // deprecated
+    addEventListener: jest.fn(),
+    removeEventListener: jest.fn(),
+    dispatchEvent: jest.fn(),
+  })),
+});
+
+// Suppress console.error and console.warn in tests unless explicitly needed
+const originalError = console.error;
+const originalWarn = console.warn;
+
+beforeAll(() => {
+  console.error = (...args) => {
+    if (
+      typeof args[0] === "string" &&
+      args[0].includes("Warning: ReactDOM.render is deprecated")
+    ) {
+      return;
+    }
+    originalError.call(console, ...args);
+  };
+
+  console.warn = (...args) => {
+    if (
+      typeof args[0] === "string" &&
+      args[0].includes("componentWillReceiveProps has been renamed")
+    ) {
+      return;
+    }
+    originalWarn.call(console, ...args);
+  };
+});
+
+afterAll(() => {
+  console.error = originalError;
+  console.warn = originalWarn;
+});
diff --git a/src/frontend/src/stores/flowStore.ts b/src/frontend/src/stores/flowStore.ts
index f52a437a6a..2b4588db4a 100644
--- a/src/frontend/src/stores/flowStore.ts
+++ b/src/frontend/src/stores/flowStore.ts
@@ -39,6 +39,7 @@ import {
   checkChatInput,
   cleanEdges,
   detectBrokenEdgesEdges,
+  getConnectedSubgraph,
   getHandleId,
   getNodeId,
   scapeJSONParse,
@@ -226,7 +227,7 @@ const useFlowStore = create<FlowStoreType>((set, get) => ({
         localStorage.getItem(`dismiss_${flow?.id}`) ?? "[]",
       ) as string[],
     });
-    unselectAllNodesEdges(nodes, edges);
+    unselectAllNodesEdges(nodes, newEdges);
     if (flow?.id) {
       useTweaksStore.getState().initialSetup(nodes, flow?.id);
     }
@@ -658,52 +659,56 @@ const useFlowStore = create<FlowStoreType>((set, get) => ({
     get().setIsBuilding(true);
     set({ flowBuildStatus: {} });
     const currentFlow = useFlowsManagerStore.getState().currentFlow;
-    const setSuccessData = useAlertStore.getState().setSuccessData;
     const setErrorData = useAlertStore.getState().setErrorData;
 
     const edges = get().edges;
-    let error = false;
     let errors: string[] = [];
-    for (const edge of edges) {
-      const errorsEdge = validateEdge(edge, get().nodes, edges);
+
+    // Only validate upstream nodes/edges if startNodeId is provided
+    let nodesToValidate = get().nodes;
+    let edgesToValidate = edges;
+    if (startNodeId) {
+      const downstream = getConnectedSubgraph(
+        startNodeId,
+        get().nodes,
+        edges,
+        "downstream",
+      );
+      nodesToValidate = downstream.nodes;
+      edgesToValidate = downstream.edges;
+    } else if (stopNodeId) {
+      const upstream = getConnectedSubgraph(
+        stopNodeId,
+        get().nodes,
+        edges,
+        "upstream",
+      );
+      nodesToValidate = upstream.nodes;
+      edgesToValidate = upstream.edges;
+    }
+
+    for (const edge of edgesToValidate) {
+      const errorsEdge = validateEdge(edge, nodesToValidate, edgesToValidate);
       if (errorsEdge.length > 0) {
-        error = true;
         errors.push(errorsEdge.join("\n"));
-        useAlertStore.getState().addNotificationToHistory({
-          title: MISSED_ERROR_ALERT,
-          type: "error",
-          list: errorsEdge,
-        });
       }
     }
-    if (error) {
+    const errorsObjs = validateNodes(nodesToValidate, edges);
+
+    errors = errors.concat(errorsObjs.map((obj) => obj.errors).flat());
+    if (errors.length > 0) {
+      setErrorData({
+        title: MISSED_ERROR_ALERT,
+        list: errors,
+      });
+      const ids = errorsObjs.map((obj) => obj.id).flat();
+      get().updateBuildStatus(ids, BuildStatus.ERROR); // Set only the build status as error without adding info to the flow pool
+
       get().setIsBuilding(false);
-      get().setBuildInfo({ error: errors, success: false });
       throw new Error("Invalid components");
     }
 
-    function validateSubgraph(nodes: string[]) {
-      const errorsObjs = validateNodes(
-        get().nodes.filter((node) => nodes.includes(node.id)),
-        get().edges,
-      );
-
-      const errors = errorsObjs.map((obj) => obj.errors).flat();
-      if (errors.length > 0) {
-        get().setBuildInfo({ error: errors, success: false });
-        useAlertStore.getState().addNotificationToHistory({
-          title: MISSED_ERROR_ALERT,
-          type: "error",
-          list: errors,
-        });
-        get().setIsBuilding(false);
-        const ids = errorsObjs.map((obj) => obj.id).flat();
-
-        get().updateBuildStatus(ids, BuildStatus.ERROR);
-        throw new Error("Invalid components");
-      }
-      // get().updateEdgesRunningByNodes(nodes, true);
-    }
+    function validateSubgraph() {}
     function handleBuildUpdate(
       vertexBuildData: VertexBuildTypeAPI,
       status: BuildStatus,
diff --git a/src/frontend/src/types/components/index.ts b/src/frontend/src/types/components/index.ts
index 87716e3d65..8c3860adaa 100644
--- a/src/frontend/src/types/components/index.ts
+++ b/src/frontend/src/types/components/index.ts
@@ -551,7 +551,7 @@ export type ChatInputType = {
   }: {
     repeat: number;
     files?: string[];
-  }) => void;
+  }) => Promise<void>;
   playgroundPage: boolean;
 };
 
@@ -840,7 +840,7 @@ export type chatViewProps = {
   }: {
     repeat: number;
     files?: string[];
-  }) => void;
+  }) => Promise<void>;
   visibleSession?: string;
   focusChat?: string;
   closeChat?: () => void;
diff --git a/src/frontend/src/types/mcp/index.ts b/src/frontend/src/types/mcp/index.ts
index 029bda550a..329a88148e 100644
--- a/src/frontend/src/types/mcp/index.ts
+++ b/src/frontend/src/types/mcp/index.ts
@@ -14,6 +14,7 @@ export type MCPServerInfoType = {
   description?: string;
   mode: string | null;
   toolsCount: number | null;
+  error?: string;
 };
 
 export type MCPServerType = {
diff --git a/src/frontend/src/utils/__tests__/markdownUtils.test.ts b/src/frontend/src/utils/__tests__/markdownUtils.test.ts
new file mode 100644
index 0000000000..cb3549c9f4
--- /dev/null
+++ b/src/frontend/src/utils/__tests__/markdownUtils.test.ts
@@ -0,0 +1,215 @@
+import {
+  cleanupTableEmptyCells,
+  isMarkdownTable,
+  preprocessChatMessage,
+} from "../markdownUtils";
+
+describe("markdownUtils", () => {
+  describe("isMarkdownTable", () => {
+    it("should return true for valid markdown table", () => {
+      const table = `| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |`;
+      expect(isMarkdownTable(table)).toBe(true);
+    });
+
+    it("should return true for table with alignment", () => {
+      const table = `| Left | Center | Right |
+|:-----|:------:|------:|
+| L1   | C1     | R1    |`;
+      expect(isMarkdownTable(table)).toBe(true);
+    });
+
+    it("should return false for non-table content", () => {
+      expect(isMarkdownTable("Just some text")).toBe(false);
+      expect(isMarkdownTable("# Header\nSome content")).toBe(false);
+    });
+
+    it("should return false for empty or null input", () => {
+      expect(isMarkdownTable("")).toBe(false);
+      expect(isMarkdownTable("   ")).toBe(false);
+    });
+
+    it("should return false for table without separator", () => {
+      const invalidTable = `| Header 1 | Header 2 |
+| Cell 1   | Cell 2   |`;
+      expect(isMarkdownTable(invalidTable)).toBe(false);
+    });
+
+    it("should return true for table with extra whitespace", () => {
+      const table = `  | Header 1 | Header 2 |  
+  |----------|----------|  
+  | Cell 1   | Cell 2   |  `;
+      expect(isMarkdownTable(table)).toBe(true);
+    });
+  });
+
+  describe("cleanupTableEmptyCells", () => {
+    it("should remove completely empty rows", () => {
+      const table = `| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |
+|          |          |
+| Cell 3   | Cell 4   |`;
+
+      const expected = `| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |
+| Cell 3   | Cell 4   |`;
+
+      expect(cleanupTableEmptyCells(table)).toBe(expected);
+    });
+
+    it("should keep rows with at least one non-empty cell", () => {
+      const table = `| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   |          |
+|          | Cell 2   |`;
+
+      const expected = `| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   |          |
+|          | Cell 2   |`;
+
+      expect(cleanupTableEmptyCells(table)).toBe(expected);
+    });
+
+    it("should preserve separator rows", () => {
+      const table = `| Header 1 | Header 2 |
+|----------|----------|
+|          |          |`;
+
+      const expected = `| Header 1 | Header 2 |
+|----------|----------|`;
+
+      expect(cleanupTableEmptyCells(table)).toBe(expected);
+    });
+
+    it("should handle mixed content with tables", () => {
+      const content = `Some text before
+
+| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |
+|          |          |
+
+Some text after`;
+
+      const expected = `Some text before
+
+| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |
+
+Some text after`;
+
+      expect(cleanupTableEmptyCells(content)).toBe(expected);
+    });
+
+    it("should handle non-table content unchanged", () => {
+      const content = `# Header
+This is just regular text.
+No tables here.`;
+
+      expect(cleanupTableEmptyCells(content)).toBe(content);
+    });
+
+    it("should handle empty input", () => {
+      expect(cleanupTableEmptyCells("")).toBe("");
+      expect(cleanupTableEmptyCells("   \n   \n   ")).toBe("   \n   \n   ");
+    });
+
+    it("should handle table with alignment separators", () => {
+      const table = `| Left | Center | Right |
+|:-----|:------:|------:|
+| L1   | C1     | R1    |
+|      |        |       |`;
+
+      const expected = `| Left | Center | Right |
+|:-----|:------:|------:|
+| L1   | C1     | R1    |`;
+
+      expect(cleanupTableEmptyCells(table)).toBe(expected);
+    });
+  });
+
+  describe("preprocessChatMessage", () => {
+    it("should replace <think> tags with backticks", () => {
+      const message = "Before <think>thinking</think> after";
+      const expected = "Before `<think>`thinking`</think>` after";
+      expect(preprocessChatMessage(message)).toBe(expected);
+    });
+
+    it("should handle multiple <think> tags", () => {
+      const message = "<think>first</think> and <think>second</think>";
+      const expected = "`<think>`first`</think>` and `<think>`second`</think>`";
+      expect(preprocessChatMessage(message)).toBe(expected);
+    });
+
+    it("should clean up tables when present", () => {
+      const message = `<think>analyzing</think>
+
+| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |
+|          |          |`;
+
+      const result = preprocessChatMessage(message);
+
+      // Should replace think tags
+      expect(result).toContain("`<think>`analyzing`</think>`");
+
+      // Should remove empty table row
+      expect(result).not.toContain("|          |          |");
+
+      // Should keep good content
+      expect(result).toContain("| Cell 1   | Cell 2   |");
+    });
+
+    it("should handle messages without tables", () => {
+      const message = "<think>pondering</think> Just some regular text";
+      const expected = "`<think>`pondering`</think>` Just some regular text";
+      expect(preprocessChatMessage(message)).toBe(expected);
+    });
+
+    it("should handle messages without think tags", () => {
+      const message = `| Header 1 | Header 2 |
+|----------|----------|
+| Cell 1   | Cell 2   |
+|          |          |`;
+
+      const result = preprocessChatMessage(message);
+      expect(result).not.toContain("|          |          |");
+      expect(result).toContain("| Cell 1   | Cell 2   |");
+    });
+
+    it("should handle empty messages", () => {
+      expect(preprocessChatMessage("")).toBe("");
+      expect(preprocessChatMessage("   ")).toBe("   ");
+    });
+
+    it("should handle complex nested scenarios", () => {
+      const message = `<think>Let me create a table</think>
+
+| Name | Status | Notes |
+|------|--------|-------|
+| John | Active | Good  |
+|      |        |       |
+| Jane | Active |       |
+
+<think>Done</think>`;
+
+      const result = preprocessChatMessage(message);
+
+      // Think tags should be replaced
+      expect(result).toContain("`<think>`Let me create a table`</think>`");
+      expect(result).toContain("`<think>`Done`</think>`");
+
+      // Empty row should be removed
+      expect(result).not.toContain("|      |        |       |");
+
+      // Partial row should be kept
+      expect(result).toContain("| Jane | Active |       |");
+    });
+  });
+});
diff --git a/src/frontend/src/utils/buildUtils.ts b/src/frontend/src/utils/buildUtils.ts
index 51304b1bde..2eb1a18803 100644
--- a/src/frontend/src/utils/buildUtils.ts
+++ b/src/frontend/src/utils/buildUtils.ts
@@ -1,6 +1,5 @@
 import { MISSED_ERROR_ALERT } from "@/constants/alerts_constants";
 import {
-  BASE_URL_API,
   BUILD_POLLING_INTERVAL,
   POLLING_MESSAGES,
 } from "@/constants/constants";
diff --git a/src/frontend/src/utils/markdownUtils.ts b/src/frontend/src/utils/markdownUtils.ts
new file mode 100644
index 0000000000..09221c9c7d
--- /dev/null
+++ b/src/frontend/src/utils/markdownUtils.ts
@@ -0,0 +1,52 @@
+/**
+ * Utility functions for processing markdown content, particularly tables
+ */
+
+/**
+ * Detects if the given text contains a markdown table
+ */
+export const isMarkdownTable = (text: string): boolean => {
+  if (!text?.trim()) return false;
+
+  // Single regex to detect markdown table with header separator
+  return /\|.*\|.*\n\s*\|[\s\-:]+\|/m.test(text);
+};
+
+/**
+ * Removes completely empty rows from markdown tables
+ */
+export const cleanupTableEmptyCells = (text: string): string => {
+  return text
+    .split("\n")
+    .filter((line) => {
+      const trimmed = line.trim();
+
+      // Keep non-table lines
+      if (!trimmed.includes("|")) return true;
+
+      // Keep separator rows (contain only |, -, :, spaces)
+      if (/^\|[\s\-:]+\|$/.test(trimmed)) return true;
+
+      // For data rows, check if any cell has content
+      const cells = trimmed.split("|").slice(1, -1); // Remove delimiter cells
+      return cells.some((cell) => cell.trim() !== "");
+    })
+    .join("\n");
+};
+
+/**
+ * Preprocesses chat messages by handling <think> tags and cleaning up tables
+ */
+export const preprocessChatMessage = (text: string): string => {
+  // Handle <think> tags
+  let processed = text
+    .replace(/<think>/g, "`<think>`")
+    .replace(/<\/think>/g, "`</think>`");
+
+  // Clean up tables if present
+  if (isMarkdownTable(processed)) {
+    processed = cleanupTableEmptyCells(processed);
+  }
+
+  return processed;
+};
diff --git a/src/frontend/src/utils/reactflowUtils.ts b/src/frontend/src/utils/reactflowUtils.ts
index 63a1e6922c..ee38c80126 100644
--- a/src/frontend/src/utils/reactflowUtils.ts
+++ b/src/frontend/src/utils/reactflowUtils.ts
@@ -138,9 +138,18 @@ export function cleanEdges(nodes: AllNodeType[], edges: EdgeType[]) {
       const name = parsedSourceHandle.name;
 
       if (sourceNode.type == "genericNode") {
-        const output = sourceNode.data
-          .node!.outputs?.filter((output) => output.selected)
-          .find((output) => output.name === name);
+        const output =
+          sourceNode.data.node!.outputs?.find(
+            (output) => output.name === sourceNode.data.selected_output,
+          ) ??
+          sourceNode.data.node!.outputs?.find(
+            (output) =>
+              (output.selected ||
+                (sourceNode.data.node!.outputs?.filter(
+                  (output) => !output.group_outputs,
+                )?.length ?? 0) <= 1) &&
+              output.name === name,
+          );
 
         if (output) {
           const outputTypes =
@@ -167,6 +176,45 @@ export function cleanEdges(nodes: AllNodeType[], edges: EdgeType[]) {
   return newEdges;
 }
 
+export function clearHandlesFromAdvancedFields(
+  componentId: string,
+  data: APIClassType,
+): void {
+  if (!componentId || !data?.template) {
+    return;
+  }
+
+  try {
+    const flowStore = useFlowStore.getState();
+    const { edges, deleteEdge } = flowStore;
+
+    const connectedEdges = edges.filter((edge) => edge.target === componentId);
+
+    if (connectedEdges.length === 0) {
+      return;
+    }
+
+    const edgeIdsToDelete: string[] = [];
+
+    for (const edge of connectedEdges) {
+      const fieldName = edge.data?.targetHandle?.fieldName;
+
+      if (fieldName && isAdvancedField(data, fieldName)) {
+        edgeIdsToDelete.push(edge.id);
+      }
+    }
+
+    edgeIdsToDelete.forEach(deleteEdge);
+  } catch (error) {
+    console.error("Error clearing handles from advanced fields:", error);
+  }
+}
+
+const isAdvancedField = (data: APIClassType, fieldName: string): boolean => {
+  const field = data.template[fieldName];
+  return field && "advanced" in field && field.advanced === true;
+};
+
 export function filterHiddenFieldsEdges(
   edge: EdgeType,
   newEdges: EdgeType[],
@@ -320,10 +368,11 @@ export function unselectAllNodesEdges(nodes: Node[], edges: Edge[]) {
 }
 
 export function isValidConnection(
-  { source, target, sourceHandle, targetHandle }: Connection,
+  connection: Connection,
   nodes?: AllNodeType[],
   edges?: EdgeType[],
 ): boolean {
+  const { source, target, sourceHandle, targetHandle } = connection;
   if (source === target) {
     return false;
   }
@@ -333,6 +382,33 @@ export function isValidConnection(
 
   const targetHandleObject: targetHandleType = scapeJSONParse(targetHandle!);
   const sourceHandleObject: sourceHandleType = scapeJSONParse(sourceHandle!);
+
+  // Helper to find the edge between two nodes
+  function findEdgeBetween(srcId: string, tgtId: string) {
+    return edgesArray.find((e) => e.source === srcId && e.target === tgtId);
+  }
+
+  // Modified hasCycle to return the path of edges forming the loop
+  const findCyclePath = (
+    node: AllNodeType,
+    visited = new Set(),
+    path: EdgeType[] = [],
+  ): EdgeType[] | null => {
+    if (visited.has(node.id)) return null;
+    visited.add(node.id);
+    for (const outgoer of getOutgoers(node, nodesArray, edgesArray)) {
+      const edge = findEdgeBetween(node.id, outgoer.id);
+      if (!edge) continue;
+      if (outgoer.id === source) {
+        // This edge would close the loop
+        return [...path, edge];
+      }
+      const result = findCyclePath(outgoer, visited, [...path, edge]);
+      if (result) return result;
+    }
+    return null;
+  };
+
   if (
     targetHandleObject.inputTypes?.some(
       (n) => n === sourceHandleObject.dataType,
@@ -350,22 +426,43 @@ export function isValidConnection(
         t === targetHandleObject.type,
     )
   ) {
-    let targetNode = nodesArray.find((node) => node.id === target!)?.data?.node;
-    if (!targetNode) {
-      if (!edgesArray.find((e) => e.targetHandle === targetHandle)) {
-        return true;
-      }
-    } else if (
-      targetHandleObject.output_types &&
-      !edgesArray.find((e) => e.targetHandle === targetHandle)
-    ) {
-      return true;
-    } else if (
-      !targetHandleObject.output_types &&
-      ((!targetNode.template[targetHandleObject.fieldName].list &&
+    let targetNode = nodesArray.find((node) => node.id === target!);
+    let targetNodeDataNode = targetNode?.data?.node;
+    if (
+      (!targetNodeDataNode &&
         !edgesArray.find((e) => e.targetHandle === targetHandle)) ||
-        targetNode.template[targetHandleObject.fieldName].list)
+      (targetNodeDataNode &&
+        targetHandleObject.output_types &&
+        !edgesArray.find((e) => e.targetHandle === targetHandle)) ||
+      (targetNodeDataNode &&
+        !targetHandleObject.output_types &&
+        ((!targetNodeDataNode.template[targetHandleObject.fieldName].list &&
+          !edgesArray.find((e) => e.targetHandle === targetHandle)) ||
+          targetNodeDataNode.template[targetHandleObject.fieldName].list))
     ) {
+      // If the current target handle is a loop component, allow connection immediately
+      if (targetHandleObject.output_types) {
+        return true;
+      }
+      // Check for loop and if any edge in the loop is a loop component
+      let cyclePath: EdgeType[] | null = null;
+      if (targetNode) {
+        cyclePath = findCyclePath(targetNode);
+      }
+      if (cyclePath) {
+        // Check if any edge in the cycle path is a loop component
+        const hasLoopComponent = cyclePath.some((edge) => {
+          try {
+            const th = scapeJSONParse(edge.targetHandle!);
+            return !!th.output_types;
+          } catch {
+            return false;
+          }
+        });
+        if (!hasLoopComponent) {
+          return false;
+        }
+      }
       return true;
     }
   }
@@ -2036,3 +2133,44 @@ export function buildPositionDictionary(nodes: AllNodeType[]) {
 export function hasStreaming(nodes: AllNodeType[]) {
   return nodes.some((node) => node.data.node?.template?.stream?.value);
 }
+
+// Utility to get all connected nodes and edges from a given nodeId, in a given direction
+export function getConnectedSubgraph(
+  nodeId: string,
+  nodes: AllNodeType[],
+  edges: EdgeType[],
+  direction: "upstream" | "downstream",
+): { nodes: AllNodeType[]; edges: EdgeType[] } {
+  const visited = new Set<string>();
+  const resultNodes: AllNodeType[] = [];
+  const resultEdges: EdgeType[] = [];
+
+  function dfs(currentId: string) {
+    if (visited.has(currentId)) return;
+    visited.add(currentId);
+    const node = nodes.find((n) => n.id === currentId);
+    if (node) {
+      resultNodes.push(node);
+      if (direction === "upstream") {
+        // Find all incoming edges
+        const incomingEdges = edges.filter((e) => e.target === currentId);
+        for (const edge of incomingEdges) {
+          resultEdges.push(edge);
+          dfs(edge.source);
+        }
+      } else {
+        // downstream: Find all outgoing edges
+        const outgoingEdges = edges.filter((e) => e.source === currentId);
+        for (const edge of outgoingEdges) {
+          resultEdges.push(edge);
+          dfs(edge.target);
+        }
+      }
+    }
+  }
+  dfs(nodeId);
+  return {
+    nodes: resultNodes,
+    edges: resultEdges,
+  };
+}
diff --git a/src/frontend/src/utils/styleUtils.ts b/src/frontend/src/utils/styleUtils.ts
index c1c38a0689..739ff693d9 100644
--- a/src/frontend/src/utils/styleUtils.ts
+++ b/src/frontend/src/utils/styleUtils.ts
@@ -205,16 +205,17 @@ export const FILE_ICONS = {
 
 export const SIDEBAR_CATEGORIES = [
   { display_name: "Saved", name: "saved_components", icon: "GradientSave" },
-  { display_name: "I/O", name: "input_output", icon: "Cable" },
-  { display_name: "Inputs", name: "inputs", icon: "Download" },
-  { display_name: "Outputs", name: "outputs", icon: "Upload" },
-  { display_name: "Prompts", name: "prompts", icon: "braces" },
+  { display_name: "Input / Output", name: "input_output", icon: "Cable" },
+  { display_name: "Agents", name: "agents", icon: "Bot" },
   { display_name: "Models", name: "models", icon: "BrainCog" },
   { display_name: "Data", name: "data", icon: "Database" },
-  { display_name: "Processing", name: "processing", icon: "ListFilter" },
-
   { display_name: "Vector Stores", name: "vectorstores", icon: "Layers" },
-  { display_name: "Agents", name: "agents", icon: "Bot" },
+  { display_name: "Processing", name: "processing", icon: "ListFilter" },
+  { display_name: "Logic", name: "logic", icon: "ArrowRightLeft" },
+  { display_name: "Helpers", name: "helpers", icon: "Wand2" },
+  { display_name: "Inputs", name: "inputs", icon: "Download" },
+  { display_name: "Outputs", name: "outputs", icon: "Upload" },
+  { display_name: "Prompts", name: "prompts", icon: "braces" },
   { display_name: "Chains", name: "chains", icon: "Link" },
   { display_name: "Loaders", name: "documentloaders", icon: "Paperclip" },
   { display_name: "Link Extractors", name: "link_extractors", icon: "Link2" },
@@ -224,12 +225,9 @@ export const SIDEBAR_CATEGORIES = [
   { display_name: "Text Splitters", name: "textsplitters", icon: "Scissors" },
   { display_name: "Toolkits", name: "toolkits", icon: "Package2" },
   { display_name: "Tools", name: "tools", icon: "Hammer" },
-  { display_name: "Logic", name: "logic", icon: "ArrowRightLeft" },
-  { display_name: "Helpers", name: "helpers", icon: "Wand2" },
 ];
 
 export const SIDEBAR_BUNDLES = [
-  { display_name: "Outlook", name: "outlook", icon: "Outlook" },
   {
     display_name: "Language Models",
     name: "languagemodels",
@@ -237,28 +235,34 @@ export const SIDEBAR_BUNDLES = [
   },
   { display_name: "Embeddings", name: "embeddings", icon: "Binary" },
   { display_name: "Memories", name: "memories", icon: "Cpu" },
+  { display_name: "AI/ML", name: "aiml", icon: "AI/ML" },
+  { display_name: "Anthropic", name: "anthropic", icon: "Anthropic" },
   { display_name: "Amazon", name: "amazon", icon: "Amazon" },
-  { display_name: "Gmail", name: "gmail", icon: "Gmail" },
-  { display_name: "Outlook", name: "outlook", icon: "Outlook" },
-  { display_name: "GitHub", name: "github", icon: "Github" },
-  {
-    display_name: "Googlecalendar",
-    name: "googlecalendar",
-    icon: "Googlecalendar",
-  },
   // Add apify
   { display_name: "Apify", name: "apify", icon: "Apify" },
   { display_name: "LangChain", name: "langchain_utilities", icon: "LangChain" },
   { display_name: "AgentQL", name: "agentql", icon: "AgentQL" },
   { display_name: "AssemblyAI", name: "assemblyai", icon: "AssemblyAI" },
+  { display_name: "Azure", name: "azure", icon: "Azure" },
   {
     display_name: "DataStax",
     name: "datastax",
     icon: "AstraDB",
   },
   { display_name: "Docling", name: "docling", icon: "Docling" },
-  { display_name: "Olivya", name: "olivya", icon: "Olivya" },
+  { display_name: "Gmail", name: "gmail", icon: "Gmail" },
+  { display_name: "GitHub", name: "github", icon: "Github" },
+  {
+    display_name: "Googlecalendar",
+    name: "googlecalendar",
+    icon: "Googlecalendar",
+  },
+  { display_name: "HuggingFace", name: "huggingface", icon: "HuggingFace" },
+  { display_name: "IBM", name: "ibm", icon: "WatsonxAI" },
   { display_name: "LangWatch", name: "langwatch", icon: "Langwatch" },
+  { display_name: "Olivya", name: "olivya", icon: "Olivya" },
+  { display_name: "Outlook", name: "outlook", icon: "Outlook" },
+  { display_name: "OpenAI", name: "openai", icon: "OpenAI" },
   { display_name: "Notion", name: "Notion", icon: "Notion" },
   { display_name: "Needle", name: "needle", icon: "Needle" },
   { display_name: "NVIDIA", name: "nvidia", icon: "NVIDIA" },
@@ -285,6 +289,8 @@ export const SIDEBAR_BUNDLES = [
   { display_name: "Cleanlab", name: "cleanlab", icon: "Cleanlab" },
   { display_name: "Search", name: "search", icon: "Search" },
   { display_name: "Tavily", name: "tavily", icon: "TavilyIcon" },
+  { display_name: "Ollama", name: "ollama", icon: "Ollama" },
+  { display_name: "VertexAI", name: "vertexai", icon: "VertexAI" },
 ];
 
 export const categoryIcons: Record<string, string> = {
diff --git a/src/frontend/tests/core/features/filterSidebar.spec.ts b/src/frontend/tests/core/features/filterSidebar.spec.ts
index 2b59c76323..3d0e794da8 100644
--- a/src/frontend/tests/core/features/filterSidebar.spec.ts
+++ b/src/frontend/tests/core/features/filterSidebar.spec.ts
@@ -56,8 +56,7 @@ test(
           .isVisible();
       });
 
-    await expect(page.getByTestId("disclosure-i/o")).toBeVisible();
-    await expect(page.getByTestId("disclosure-prompts")).toBeVisible();
+    await expect(page.getByTestId("disclosure-input / output")).toBeVisible();
     await expect(page.getByTestId("disclosure-models")).toBeVisible();
     await expect(page.getByTestId("disclosure-helpers")).toBeVisible();
     await expect(page.getByTestId("disclosure-agents")).toBeVisible();
@@ -73,7 +72,7 @@ test(
 
     await expect(page.getByTestId("input_outputChat Input")).toBeVisible();
     await expect(page.getByTestId("input_outputChat Output")).toBeVisible();
-    await expect(page.getByTestId("promptsPrompt")).toBeVisible();
+    await expect(page.getByTestId("processingPrompt Template")).toBeVisible();
     await expect(page.getByTestId("langchain_utilitiesCSVAgent")).toBeVisible();
     await expect(
       page.getByTestId("langchain_utilitiesConversationChain"),
@@ -97,7 +96,9 @@ test(
 
     await expect(page.getByTestId("input_outputChat Input")).not.toBeVisible();
     await expect(page.getByTestId("input_outputChat Output")).not.toBeVisible();
-    await expect(page.getByTestId("promptsPrompt")).not.toBeVisible();
+    await expect(
+      page.getByTestId("processingPrompt Template"),
+    ).not.toBeVisible();
     await expect(
       page.getByTestId("agentsTool Calling Agent"),
     ).not.toBeVisible();
diff --git a/src/frontend/tests/core/features/globalVariables.spec.ts b/src/frontend/tests/core/features/globalVariables.spec.ts
index b64d00a7cb..66f685378b 100644
--- a/src/frontend/tests/core/features/globalVariables.spec.ts
+++ b/src/frontend/tests/core/features/globalVariables.spec.ts
@@ -16,12 +16,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("openai");
 
-    await page.waitForSelector('[data-testid="languagemodelsOpenAI"]', {
+    await page.waitForSelector('[data-testid="openaiOpenAI"]', {
       timeout: 1000,
     });
 
     await page
-      .getByTestId("languagemodelsOpenAI")
+      .getByTestId("openaiOpenAI")
       .hover()
       .then(async () => {
         await page.getByTestId("add-component-button-openai").last().click();
diff --git a/src/frontend/tests/core/features/keyboardComponentSearch.spec.ts b/src/frontend/tests/core/features/keyboardComponentSearch.spec.ts
index 7a929df379..a624834b3a 100644
--- a/src/frontend/tests/core/features/keyboardComponentSearch.spec.ts
+++ b/src/frontend/tests/core/features/keyboardComponentSearch.spec.ts
@@ -58,7 +58,7 @@ test(
     await page.keyboard.type("prompt");
 
     // Verify disclosures open with new search
-    await expect(page.getByTestId("promptsPrompt")).toBeVisible();
+    await expect(page.getByTestId("processingPrompt Template")).toBeVisible();
 
     await page.keyboard.press("Tab");
     await page.keyboard.press("Tab");
diff --git a/src/frontend/tests/core/features/stop-building.spec.ts b/src/frontend/tests/core/features/stop-building.spec.ts
index ddbfba9106..e8bdf68182 100644
--- a/src/frontend/tests/core/features/stop-building.spec.ts
+++ b/src/frontend/tests/core/features/stop-building.spec.ts
@@ -82,9 +82,7 @@ test(
     await page
       .getByTestId("handle-urlcomponent-shownode-extracted pages-right")
       .click();
-    await page
-      .getByTestId("handle-splittext-shownode-data or dataframe-left")
-      .click();
+    await page.getByTestId("handle-splittext-shownode-input-left").click();
 
     //connection 2
     await page
diff --git a/src/frontend/tests/core/integrations/Blog Writer.spec.ts b/src/frontend/tests/core/integrations/Blog Writer.spec.ts
index 84cd97a29b..d0c0e62af8 100644
--- a/src/frontend/tests/core/integrations/Blog Writer.spec.ts	
+++ b/src/frontend/tests/core/integrations/Blog Writer.spec.ts	
@@ -47,7 +47,9 @@ withEventDeliveryModes(
 
     await page.getByTestId("button_run_chat output").click();
 
-    await page.waitForSelector("text=built successfully", { timeout: 30000 });
+    await page.waitForSelector("text=built successfully", {
+      timeout: 30000 * 3,
+    });
 
     await page.getByRole("button", { name: "Playground", exact: true }).click();
     await page
diff --git a/src/frontend/tests/core/integrations/Custom Component Generator.spec.ts b/src/frontend/tests/core/integrations/Custom Component Generator.spec.ts
index d4967e2c7e..b0795718e1 100644
--- a/src/frontend/tests/core/integrations/Custom Component Generator.spec.ts	
+++ b/src/frontend/tests/core/integrations/Custom Component Generator.spec.ts	
@@ -40,6 +40,9 @@ withEventDeliveryModes(
     await page.waitForTimeout(1000);
 
     try {
+      await page.waitForSelector("anchor-popover-anchor-input-api_key", {
+        timeout: 5000,
+      });
       await page
         .getByTestId("anchor-popover-anchor-input-api_key")
         .locator("input")
diff --git a/src/frontend/tests/core/integrations/Diet Analysis.spec.ts b/src/frontend/tests/core/integrations/Diet Analysis.spec.ts
deleted file mode 100644
index b4a140090b..0000000000
--- a/src/frontend/tests/core/integrations/Diet Analysis.spec.ts	
+++ /dev/null
@@ -1,57 +0,0 @@
-import { expect, test } from "@playwright/test";
-import * as dotenv from "dotenv";
-import path from "path";
-import { awaitBootstrapTest } from "../../utils/await-bootstrap-test";
-import { initialGPTsetup } from "../../utils/initialGPTsetup";
-import { withEventDeliveryModes } from "../../utils/withEventDeliveryModes";
-
-withEventDeliveryModes(
-  "Diet Analysis",
-  { tag: ["@release", "@starter-projects"] },
-  async ({ page }) => {
-    test.skip(
-      !process?.env?.NOVITA_API_KEY,
-      "NOVITA_API_KEY required to run this test",
-    );
-
-    if (!process.env.CI) {
-      dotenv.config({ path: path.resolve(__dirname, "../../.env") });
-    }
-
-    await awaitBootstrapTest(page);
-
-    await page.getByTestId("side_nav_options_all-templates").click();
-    await page.getByRole("heading", { name: "Diet Analysis" }).click();
-
-    await page
-      .getByTestId("popover-anchor-input-api_key")
-      .last()
-      .fill(process.env.NOVITA_API_KEY ?? "");
-
-    await page.getByTestId("playground-btn-flow-io").click();
-
-    await page
-      .getByTestId("input-chat-playground")
-      .last()
-      .fill(
-        "I ate a lot of junk food yesterday. What should I do today to improve my diet?",
-      );
-
-    await page.getByTestId("button-send").last().click();
-
-    const stopButton = page.getByRole("button", { name: "Stop" });
-    await stopButton.waitFor({ state: "visible", timeout: 30000 });
-
-    if (await stopButton.isVisible()) {
-      await expect(stopButton).toBeHidden({ timeout: 120000 });
-    }
-
-    const output = await page
-      .getByTestId("div-chat-message")
-      .last()
-      .innerText();
-    expect(output.toLowerCase()).toContain("healthy");
-    expect(output.toLowerCase()).toContain("hydrate");
-    expect(output.length).toBeGreaterThan(500);
-  },
-);
diff --git a/src/frontend/tests/core/integrations/Pokedex Agent.spec.ts b/src/frontend/tests/core/integrations/Pokedex Agent.spec.ts
index c36415a1a2..4df94a5361 100644
--- a/src/frontend/tests/core/integrations/Pokedex Agent.spec.ts	
+++ b/src/frontend/tests/core/integrations/Pokedex Agent.spec.ts	
@@ -41,10 +41,7 @@ withEventDeliveryModes(
       await expect(stopButton).toBeHidden({ timeout: 120000 });
     }
 
-    const output = await page
-      .getByTestId("div-chat-message")
-      .last()
-      .innerText();
+    const output = await page.getByTestId("div-chat-message").innerText();
     expect(output).toContain("Charmander");
     expect(output.length).toBeGreaterThan(100);
   },
diff --git a/src/frontend/tests/core/integrations/decisionFlow.spec.ts b/src/frontend/tests/core/integrations/decisionFlow.spec.ts
index 48fd3bbf7d..f049b8cc31 100644
--- a/src/frontend/tests/core/integrations/decisionFlow.spec.ts
+++ b/src/frontend/tests/core/integrations/decisionFlow.spec.ts
@@ -152,11 +152,11 @@ test(
     //---------------------------------- PROMPT
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("prompt");
-    await page.waitForSelector('[data-testid="promptsPrompt"]', {
+    await page.waitForSelector('[data-testid="processingPrompt Template"]', {
       timeout: 2000,
     });
     await page
-      .getByTestId("promptsPrompt")
+      .getByTestId("processingPrompt Template")
       .dragTo(page.locator('//*[@id="react-flow-id"]'), {
         targetPosition: { x: 350, y: 300 },
       });
@@ -164,14 +164,11 @@ test(
     //---------------------------------- OPENAI
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("openai");
-    await page.waitForSelector(
-      '[data-testid="languagemodels_openai_draggable"]',
-      {
-        timeout: 2000,
-      },
-    );
+    await page.waitForSelector('[data-testid="openai_openai_draggable"]', {
+      timeout: 2000,
+    });
     await page
-      .getByTestId("languagemodelsOpenAI")
+      .getByTestId("openaiOpenAI")
       .dragTo(page.locator('//*[@id="react-flow-id"]'), {
         targetPosition: { x: 500, y: 300 },
       });
@@ -261,7 +258,7 @@ test(
       .click();
     //quebrando aqui
     await page
-      .getByTestId("handle-prompt-shownode-true_examples-left")
+      .getByTestId("handle-prompt template-shownode-true_examples-left")
       .nth(0)
       .click();
     await page
@@ -269,7 +266,7 @@ test(
       .nth(1)
       .click();
     await page
-      .getByTestId("handle-prompt-shownode-false_examples-left")
+      .getByTestId("handle-prompt template-shownode-false_examples-left")
       .nth(0)
       .click();
     await page
@@ -277,11 +274,11 @@ test(
       .nth(2)
       .click();
     await page
-      .getByTestId("handle-prompt-shownode-user_message-left")
+      .getByTestId("handle-prompt template-shownode-user_message-left")
       .nth(0)
       .click();
     await page
-      .getByTestId("handle-prompt-shownode-prompt-right")
+      .getByTestId("handle-prompt template-shownode-prompt-right")
       .first()
       .click();
     await page
diff --git a/src/frontend/tests/core/integrations/textInputOutput.spec.ts b/src/frontend/tests/core/integrations/textInputOutput.spec.ts
index b3fe9a1781..0cadf6924d 100644
--- a/src/frontend/tests/core/integrations/textInputOutput.spec.ts
+++ b/src/frontend/tests/core/integrations/textInputOutput.spec.ts
@@ -34,7 +34,7 @@ test.skip(
     await page.getByTestId("sidebar-search-input").fill("openai");
     await page.waitForTimeout(1000);
     await page
-      .getByTestId("languagemodelsOpenAI")
+      .getByTestId("openaiOpenAI")
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/core/unit/fileUploadComponent.spec.ts b/src/frontend/tests/core/unit/fileUploadComponent.spec.ts
index cc26002cec..354e6c6d75 100644
--- a/src/frontend/tests/core/unit/fileUploadComponent.spec.ts
+++ b/src/frontend/tests/core/unit/fileUploadComponent.spec.ts
@@ -250,33 +250,8 @@ test(
 
     await adjustScreenView(page);
 
-    await page
-      .getByTestId("handle-file-shownode-loaded files-right")
-      .first()
-      .click();
+    await page.getByTestId("handle-file-shownode-files-right").first().click();
 
-    await page
-      .getByTestId("processingParser")
-      .hover()
-      .then(async () => {
-        await page.getByTestId("add-component-button-parser").click();
-      });
-
-    await adjustScreenView(page);
-    await page
-      .getByTestId("handle-file-shownode-loaded files-right")
-      .first()
-      .click();
-
-    await page
-      .getByTestId("handle-parsercomponent-shownode-data or dataframe-left")
-      .first()
-      .click();
-
-    await page
-      .getByTestId("handle-parsercomponent-shownode-parsed text-right")
-      .first()
-      .click();
     await page
       .getByTestId("handle-chatoutput-noshownode-inputs-target")
       .first()
@@ -348,6 +323,17 @@ test(
         timeout: 1000,
       });
       await page.getByTestId(`remove-file-button-${renamedTxtFile}`).click();
+
+      await page
+        .getByTestId("handle-file-shownode-raw content-right")
+        .first()
+        .click();
+
+      await page
+        .getByTestId("handle-chatoutput-noshownode-inputs-target")
+        .first()
+        .click();
+
       await page
         .getByRole("button", { name: "Playground", exact: true })
         .click();
diff --git a/src/frontend/tests/core/unit/floatComponent.spec.ts b/src/frontend/tests/core/unit/floatComponent.spec.ts
index fb0dc89bc9..641a6d8efd 100644
--- a/src/frontend/tests/core/unit/floatComponent.spec.ts
+++ b/src/frontend/tests/core/unit/floatComponent.spec.ts
@@ -14,12 +14,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("nvidia");
 
-    await page.waitForSelector('[data-testid="languagemodelsNVIDIA"]', {
+    await page.waitForSelector('[data-testid="nvidiaNVIDIA"]', {
       timeout: 30000,
     });
 
     await page
-      .getByTestId("languagemodelsNVIDIA")
+      .getByTestId("nvidiaNVIDIA")
       .hover()
       .then(async () => {
         // Wait for the API request to complete after clicking the add button
diff --git a/src/frontend/tests/core/unit/intComponent.spec.ts b/src/frontend/tests/core/unit/intComponent.spec.ts
index 3263697c49..7e0104cfd0 100644
--- a/src/frontend/tests/core/unit/intComponent.spec.ts
+++ b/src/frontend/tests/core/unit/intComponent.spec.ts
@@ -12,12 +12,12 @@ test("IntComponent", { tag: ["@release", "@workspace"] }, async ({ page }) => {
   await page.getByTestId("sidebar-search-input").click();
   await page.getByTestId("sidebar-search-input").fill("openai");
 
-  await page.waitForSelector('[data-testid="languagemodelsOpenAI"]', {
+  await page.waitForSelector('[data-testid="openaiOpenAI"]', {
     timeout: 3000,
   });
 
   await page
-    .getByTestId("languagemodelsOpenAI")
+    .getByTestId("openaiOpenAI")
     .first()
     .dragTo(page.locator('//*[@id="react-flow-id"]'));
 
diff --git a/src/frontend/tests/core/unit/promptModalComponent.spec.ts b/src/frontend/tests/core/unit/promptModalComponent.spec.ts
index 4383ca8302..72e3b6ddd6 100644
--- a/src/frontend/tests/core/unit/promptModalComponent.spec.ts
+++ b/src/frontend/tests/core/unit/promptModalComponent.spec.ts
@@ -60,12 +60,12 @@ test(
     await page.getByTestId("blank-flow").click();
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("prompt");
-    await page.waitForSelector('[data-testid="promptsPrompt"]', {
+    await page.waitForSelector('[data-testid="processingPrompt Template"]', {
       timeout: 3000,
     });
 
     await page
-      .locator('//*[@id="promptsPrompt"]')
+      .locator('//*[@id="processingPrompt Template"]')
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
@@ -145,12 +145,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("prompt");
 
-    await page.waitForSelector('[data-testid="promptsPrompt"]', {
+    await page.waitForSelector('[data-testid="processingPrompt Template"]', {
       timeout: 3000,
     });
 
     await page
-      .locator('//*[@id="promptsPrompt"]')
+      .locator('//*[@id="processingPrompt Template"]')
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/core/unit/queryInputComponent.spec.ts b/src/frontend/tests/core/unit/queryInputComponent.spec.ts
index ace0454968..ac7191f44f 100644
--- a/src/frontend/tests/core/unit/queryInputComponent.spec.ts
+++ b/src/frontend/tests/core/unit/queryInputComponent.spec.ts
@@ -17,12 +17,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("openai");
 
-    await page.waitForSelector('[data-testid="languagemodelsOpenAI"]', {
+    await page.waitForSelector('[data-testid="openaiOpenAI"]', {
       timeout: 3000,
     });
 
     await page
-      .getByTestId("languagemodelsOpenAI")
+      .getByTestId("openaiOpenAI")
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/core/unit/sliderComponent.spec.ts b/src/frontend/tests/core/unit/sliderComponent.spec.ts
index 99af24ae61..c2fd9bac5c 100644
--- a/src/frontend/tests/core/unit/sliderComponent.spec.ts
+++ b/src/frontend/tests/core/unit/sliderComponent.spec.ts
@@ -17,12 +17,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("ollama");
 
-    await page.waitForSelector('[data-testid="languagemodelsOllama"]', {
+    await page.waitForSelector('[data-testid="ollamaOllama"]', {
       timeout: 3000,
     });
 
     await page
-      .getByTestId("languagemodelsOllama")
+      .getByTestId("ollamaOllama")
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/core/unit/textAreaModalComponent.spec.ts b/src/frontend/tests/core/unit/textAreaModalComponent.spec.ts
index 94e05661a3..f6cc295eaa 100644
--- a/src/frontend/tests/core/unit/textAreaModalComponent.spec.ts
+++ b/src/frontend/tests/core/unit/textAreaModalComponent.spec.ts
@@ -16,12 +16,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("prompt");
 
-    await page.waitForSelector('[data-testid="promptsPrompt"]', {
+    await page.waitForSelector('[data-testid="processingPrompt Template"]', {
       timeout: 30000,
     });
 
     await page
-      .locator('//*[@id="promptsPrompt"]')
+      .locator('//*[@id="processingPrompt Template"]')
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/extended/features/auto-save-off.spec.ts b/src/frontend/tests/extended/features/auto-save-off.spec.ts
index 5a59a40742..ac156f3463 100644
--- a/src/frontend/tests/extended/features/auto-save-off.spec.ts
+++ b/src/frontend/tests/extended/features/auto-save-off.spec.ts
@@ -31,12 +31,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("NVIDIA");
 
-    await page.waitForSelector('[data-testid="languagemodelsNVIDIA"]', {
+    await page.waitForSelector('[data-testid="nvidiaNVIDIA"]', {
       timeout: 3000,
     });
 
     await page
-      .getByTestId("languagemodelsNVIDIA")
+      .getByTestId("nvidiaNVIDIA")
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
@@ -85,7 +85,7 @@ test(
     await page.keyboard.press("Escape");
     await page.locator('//*[@id="react-flow-id"]').click();
 
-    const lastNvidiaModel = page.getByTestId("languagemodelsNVIDIA").last();
+    const lastNvidiaModel = page.getByTestId("nvidiaNVIDIA").last();
     await lastNvidiaModel.scrollIntoViewIfNeeded();
 
     try {
@@ -128,12 +128,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("NVIDIA");
 
-    await page.waitForSelector('[data-testid="languagemodelsNVIDIA"]', {
+    await page.waitForSelector('[data-testid="nvidiaNVIDIA"]', {
       timeout: 3000,
     });
 
     await page
-      .getByTestId("languagemodelsNVIDIA")
+      .getByTestId("nvidiaNVIDIA")
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/extended/features/filterEdge-shard-1.spec.ts b/src/frontend/tests/extended/features/filterEdge-shard-1.spec.ts
index 90143d09a1..8c4101a9fd 100644
--- a/src/frontend/tests/extended/features/filterEdge-shard-1.spec.ts
+++ b/src/frontend/tests/extended/features/filterEdge-shard-1.spec.ts
@@ -56,7 +56,7 @@ test(
     });
 
     const disclosureTestIds = [
-      "disclosure-i/o",
+      "disclosure-input / output",
       "disclosure-data",
       "disclosure-models",
       "disclosure-helpers",
@@ -101,23 +101,15 @@ test(
     await page.getByTestId("sidebar-search-input").click();
 
     const visibleModelSpecsTestIds = [
-      "languagemodelsAIML",
-      "languagemodelsAnthropic",
-      "languagemodelsAzure OpenAI",
       "languagemodelsCohere",
-      "languagemodelsGoogle Generative AI",
       "languagemodelsGroq",
-      "languagemodelsHuggingFace",
       "languagemodelsLM Studio",
       "languagemodelsMaritalk",
       "languagemodelsMistralAI",
-      "languagemodelsNVIDIA",
-      "languagemodelsOllama",
-      "languagemodelsOpenAI",
       "languagemodelsPerplexity",
       "languagemodelsQianfan",
       "languagemodelsSambaNova",
-      "languagemodelsVertex AI",
+      "languagemodelsxAI",
     ];
 
     await Promise.all(
diff --git a/src/frontend/tests/extended/features/langflowShortcuts.spec.ts b/src/frontend/tests/extended/features/langflowShortcuts.spec.ts
index ae8fdd30de..c2e601eedc 100644
--- a/src/frontend/tests/extended/features/langflowShortcuts.spec.ts
+++ b/src/frontend/tests/extended/features/langflowShortcuts.spec.ts
@@ -16,12 +16,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("ollama");
 
-    await page.waitForSelector('[data-testid="languagemodelsOllama"]', {
+    await page.waitForSelector('[data-testid="ollamaOllama"]', {
       timeout: 3000,
     });
 
     await page
-      .getByTestId("languagemodelsOllama")
+      .getByTestId("ollamaOllama")
       .dragTo(page.locator('//*[@id="react-flow-id"]'));
     await page.mouse.up();
     await page.mouse.down();
diff --git a/src/frontend/tests/extended/features/mcp-server-tab.spec.ts b/src/frontend/tests/extended/features/mcp-server-tab.spec.ts
index 8f538acf6e..1416eeefb4 100644
--- a/src/frontend/tests/extended/features/mcp-server-tab.spec.ts
+++ b/src/frontend/tests/extended/features/mcp-server-tab.spec.ts
@@ -200,14 +200,14 @@ test(
         // Create a new flow with MCP component
         await page.getByTestId("blank-flow").click();
         await page.getByTestId("sidebar-search-input").click();
-        await page.getByTestId("sidebar-search-input").fill("mcp connection");
+        await page.getByTestId("sidebar-search-input").fill("mcp");
 
-        await page.waitForSelector('[data-testid="dataMCP Connection"]', {
+        await page.waitForSelector('[data-testid="agentsMCP Tools"]', {
           timeout: 30000,
         });
 
         await page
-          .getByTestId("dataMCP Connection")
+          .getByTestId("agentsMCP Tools")
           .dragTo(page.locator('//*[@id="react-flow-id"]'), {
             targetPosition: { x: 0, y: 0 },
           });
diff --git a/src/frontend/tests/extended/features/mcp-server.spec.ts b/src/frontend/tests/extended/features/mcp-server.spec.ts
index 6894748707..60e33982ba 100644
--- a/src/frontend/tests/extended/features/mcp-server.spec.ts
+++ b/src/frontend/tests/extended/features/mcp-server.spec.ts
@@ -3,7 +3,7 @@ import { awaitBootstrapTest } from "../../utils/await-bootstrap-test";
 import { zoomOut } from "../../utils/zoom-out";
 
 test(
-  "user must be able to change mode of MCP connection without any issues",
+  "user must be able to change mode of MCP tools without any issues",
   { tag: ["@release", "@workspace", "@components"] },
   async ({ page }) => {
     await awaitBootstrapTest(page);
@@ -13,14 +13,14 @@ test(
     });
     await page.getByTestId("blank-flow").click();
     await page.getByTestId("sidebar-search-input").click();
-    await page.getByTestId("sidebar-search-input").fill("mcp connection");
+    await page.getByTestId("sidebar-search-input").fill("mcp tools");
 
-    await page.waitForSelector('[data-testid="dataMCP Connection"]', {
+    await page.waitForSelector('[data-testid="agentsMCP Tools"]', {
       timeout: 30000,
     });
 
     await page
-      .getByTestId("dataMCP Connection")
+      .getByTestId("agentsMCP Tools")
       .dragTo(page.locator('//*[@id="react-flow-id"]'), {
         targetPosition: { x: 0, y: 0 },
       });
diff --git a/src/frontend/tests/extended/features/notifications.spec.ts b/src/frontend/tests/extended/features/notifications.spec.ts
index 72616d8ffc..acda42185a 100644
--- a/src/frontend/tests/extended/features/notifications.spec.ts
+++ b/src/frontend/tests/extended/features/notifications.spec.ts
@@ -7,12 +7,12 @@ test(
   async ({ page }) => {
     await awaitBootstrapTest(page);
     await page.getByTestId("blank-flow").click();
-    await page.waitForSelector('[data-testid="disclosure-i/o"]', {
+    await page.waitForSelector('[data-testid="disclosure-input / output"]', {
       timeout: 3000,
       state: "visible",
     });
 
-    await page.getByTestId("disclosure-i/o").click();
+    await page.getByTestId("disclosure-input / output").click();
     await page.waitForSelector('[data-testid="input_outputText Input"]', {
       timeout: 3000,
       state: "visible",
diff --git a/src/frontend/tests/extended/features/refresh-dropdown-list.spec.ts b/src/frontend/tests/extended/features/refresh-dropdown-list.spec.ts
new file mode 100644
index 0000000000..d09d7a77ed
--- /dev/null
+++ b/src/frontend/tests/extended/features/refresh-dropdown-list.spec.ts
@@ -0,0 +1,43 @@
+import { test } from "@playwright/test";
+import * as dotenv from "dotenv";
+import path from "path";
+import { awaitBootstrapTest } from "../../utils/await-bootstrap-test";
+import { initialGPTsetup } from "../../utils/initialGPTsetup";
+
+test(
+  "refresh dropdown list",
+  { tag: ["@release", "@components"] },
+  async ({ page }) => {
+    test.skip(
+      !process?.env?.ANTHROPIC_API_KEY,
+      "ANTHROPIC_API_KEY required to run this test",
+    );
+
+    if (!process.env.CI) {
+      dotenv.config({ path: path.resolve(__dirname, "../../.env") });
+    }
+
+    await page.goto("/");
+    await awaitBootstrapTest(page);
+
+    await page.getByTestId("side_nav_options_all-templates").click();
+    await page
+      .getByRole("heading", { name: "Portfolio Website Code Generator" })
+      .click();
+
+    await page.waitForSelector('[data-testid="fit_view"]', {
+      timeout: 100000,
+    });
+
+    await initialGPTsetup(page, {
+      skipAdjustScreenView: true,
+      skipSelectGptModel: true,
+    });
+
+    await page.waitForTimeout(3000);
+
+    await page.getByTestId("dropdown_str_model_name").first().click();
+    await page.getByTestId("refresh-dropdown-list-model_name").first().click();
+    await page.getByText("Loading Options").isVisible({ timeout: 5000 });
+  },
+);
diff --git a/src/frontend/tests/extended/regression/general-bugs-component-as-tool-shortcut.spec.ts b/src/frontend/tests/extended/regression/general-bugs-component-as-tool-shortcut.spec.ts
index dbe3183e46..5a8f098fd5 100644
--- a/src/frontend/tests/extended/regression/general-bugs-component-as-tool-shortcut.spec.ts
+++ b/src/frontend/tests/extended/regression/general-bugs-component-as-tool-shortcut.spec.ts
@@ -17,19 +17,19 @@ test(
     await page.getByTestId("sidebar-search-input").fill("prompt");
 
     await page
-      .getByTestId("promptsPrompt")
+      .getByTestId("processingPrompt Template")
       .hover()
       .then(async () => {
-        await page.getByTestId("add-component-button-prompt").click();
+        await page.getByTestId("add-component-button-prompt-template").click();
       });
 
-    await page.waitForSelector('[data-testid="title-Prompt"]', {
+    await page.waitForSelector('[data-testid="title-Prompt Template"]', {
       timeout: 3000,
     });
 
     expect(await page.getByText("Toolset", { exact: true }).count()).toBe(0);
 
-    await page.getByTestId("title-Prompt").click();
+    await page.getByTestId("title-Prompt Template").click();
     await page.keyboard.press("ControlOrMeta+Shift+m");
 
     await page.waitForSelector('text="Toolset"', {
@@ -39,7 +39,7 @@ test(
       await page.getByText("Toolset", { exact: true }).count(),
     ).toBeGreaterThan(0);
 
-    await page.getByTestId("title-Prompt").click();
+    await page.getByTestId("title-Prompt Template").click();
 
     await page.waitForSelector('[data-testid="code-button-modal"]', {
       timeout: 3000,
@@ -61,11 +61,11 @@ test(
     // check if the response is 200
     expect(customComponentResponse?.status()).toBe(200);
 
-    await page.waitForSelector('[data-testid="title-Prompt"]', {
+    await page.waitForSelector('[data-testid="title-Prompt Template"]', {
       timeout: 3000,
     });
 
-    await page.getByTestId("title-Prompt").click();
+    await page.getByTestId("title-Prompt Template").click();
     await page.keyboard.press("ControlOrMeta+Shift+m");
 
     expect(await page.getByText("Toolset", { exact: true }).count()).toBe(0);
diff --git a/src/frontend/tests/extended/regression/general-bugs-delete-handle-advanced-input.spec.ts b/src/frontend/tests/extended/regression/general-bugs-delete-handle-advanced-input.spec.ts
new file mode 100644
index 0000000000..10dcf3341b
--- /dev/null
+++ b/src/frontend/tests/extended/regression/general-bugs-delete-handle-advanced-input.spec.ts
@@ -0,0 +1,89 @@
+import { expect, test } from "@playwright/test";
+import { awaitBootstrapTest } from "../../utils/await-bootstrap-test";
+import { extractAndCleanCode } from "../../utils/extract-and-clean-code";
+import { zoomOut } from "../../utils/zoom-out";
+
+test(
+  "the system must delete the handles from advanced fields when the code is updated",
+  { tag: ["@release"] },
+  async ({ page }) => {
+    await awaitBootstrapTest(page);
+
+    await page.getByTestId("blank-flow").click();
+
+    await page.waitForSelector('[data-testid="fit_view"]', {
+      timeout: 100000,
+    });
+    await page.getByTestId("sidebar-search-input").click();
+    await page.getByTestId("sidebar-search-input").fill("if else");
+
+    await page
+      .getByTestId("logicIf-Else")
+      .hover()
+      .then(async () => {
+        await page.getByTestId("add-component-button-if-else").click();
+      });
+
+    await page.getByTestId("fit_view").click();
+    await zoomOut(page, 3);
+
+    await page.getByTestId("edit-button-modal").click();
+
+    await page.getByTestId("showmessage").click();
+
+    await page.getByText("Close").last().click();
+
+    await page.getByTestId("sidebar-search-input").click();
+    await page.getByTestId("sidebar-search-input").fill("text input");
+    await page.waitForSelector('[data-testid="input_outputText Input"]', {
+      timeout: 2000,
+    });
+    await page
+      .getByTestId("input_outputText Input")
+      .dragTo(page.locator('//*[@id="react-flow-id"]'), {
+        targetPosition: { x: 200, y: 100 },
+      });
+
+    await page
+      .getByTestId("handle-textinput-shownode-output text-right")
+      .click();
+
+    await page
+      .getByTestId("handle-conditionalrouter-shownode-alternative output-left")
+      .click();
+
+    await page.getByTestId("title-If-Else").click();
+
+    await page.getByTestId("edit-button-modal").click();
+
+    const numberOfDisabledInputs = await page
+      .getByPlaceholder("Receiving input")
+      .count();
+
+    expect(numberOfDisabledInputs).toBe(2);
+
+    const numberOfLockIcons = await page.getByTestId("icon-lock").count();
+
+    expect(numberOfLockIcons).toBe(2);
+
+    await page.getByText("Close").last().click();
+
+    await page.getByTestId("title-If-Else").click();
+
+    await page.getByTestId("code-button-modal").click();
+
+    await page.getByTestId("checkAndSaveBtn").last().click();
+
+    await page.getByTestId("edit-button-modal").click();
+
+    const numberOfDisabledInputsAfter = await page
+      .getByPlaceholder("Receiving input")
+      .count();
+
+    expect(numberOfDisabledInputsAfter).toBe(0);
+
+    const numberOfLockIconsAfter = await page.getByTestId("icon-lock").count();
+
+    expect(numberOfLockIconsAfter).toBe(0);
+  },
+);
diff --git a/src/frontend/tests/extended/regression/general-bugs-dropdown-select-not-in-list.spec.ts b/src/frontend/tests/extended/regression/general-bugs-dropdown-select-not-in-list.spec.ts
index 0ab243ba87..17e130beac 100644
--- a/src/frontend/tests/extended/regression/general-bugs-dropdown-select-not-in-list.spec.ts
+++ b/src/frontend/tests/extended/regression/general-bugs-dropdown-select-not-in-list.spec.ts
@@ -14,12 +14,12 @@ test(
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("openai");
 
-    await page.waitForSelector('[data-testid="languagemodelsOpenAI"]', {
+    await page.waitForSelector('[data-testid="openaiOpenAI"]', {
       timeout: 1000,
     });
 
     await page
-      .getByTestId("languagemodelsOpenAI")
+      .getByTestId("openaiOpenAI")
       .hover()
       .then(async () => {
         await page.getByTestId("add-component-button-openai").last().click();
diff --git a/src/frontend/tests/extended/regression/generalBugs-shard-3.spec.ts b/src/frontend/tests/extended/regression/generalBugs-shard-3.spec.ts
index 06960e8ecb..dad8735312 100644
--- a/src/frontend/tests/extended/regression/generalBugs-shard-3.spec.ts
+++ b/src/frontend/tests/extended/regression/generalBugs-shard-3.spec.ts
@@ -1,7 +1,6 @@
 import { expect, test } from "@playwright/test";
 import * as dotenv from "dotenv";
 import path from "path";
-import { adjustScreenView } from "../../utils/adjust-screen-view";
 import { awaitBootstrapTest } from "../../utils/await-bootstrap-test";
 import { initialGPTsetup } from "../../utils/initialGPTsetup";
 
@@ -55,7 +54,7 @@ test(
     await page.getByTestId("sidebar-search-input").fill("openai");
 
     await page
-      .getByTestId("languagemodelsOpenAI")
+      .getByTestId("openaiOpenAI")
       .dragTo(page.locator('//*[@id="react-flow-id"]'), {
         targetPosition: { x: 100, y: 200 },
       });
diff --git a/src/frontend/tests/extended/regression/generalBugs-shard-7.spec.ts b/src/frontend/tests/extended/regression/generalBugs-shard-7.spec.ts
index 54dd8b5123..82e73d9142 100644
--- a/src/frontend/tests/extended/regression/generalBugs-shard-7.spec.ts
+++ b/src/frontend/tests/extended/regression/generalBugs-shard-7.spec.ts
@@ -26,12 +26,12 @@ test(
 
     await page.getByTestId("sidebar-search-input").click();
     await page.getByTestId("sidebar-search-input").fill("ollama");
-    await page.waitForSelector('[data-testid="embeddingsOllama Embeddings"]', {
+    await page.waitForSelector('[data-testid="ollamaOllama Embeddings"]', {
       timeout: 3000,
     });
 
     await page
-      .getByTestId("embeddingsOllama Embeddings")
+      .getByTestId("ollamaOllama Embeddings")
       .hover()
       .then(async () => {
         await page
@@ -55,42 +55,39 @@ test(
       timeout: 3000,
     });
 
+    // Wait for the modal inputs to be visible
+    await page.waitForSelector(
+      '[data-testid="popover-anchor-input-base_url-edit"]',
+      {
+        timeout: 5000,
+        state: "visible",
+      },
+    );
+
+    // Fill the first input (base_url field)
     await page
-      .getByPlaceholder("Type something...")
-      .first()
+      .getByTestId("popover-anchor-input-base_url-edit")
       .fill("ollama_test_ctrl_a_first_input");
     let value = await page
-      .getByPlaceholder("Type something...")
-      .first()
+      .getByTestId("popover-anchor-input-base_url-edit")
       .inputValue();
     expect(value).toBe("ollama_test_ctrl_a_first_input");
 
-    await page
-      .getByPlaceholder("Type something...")
-      .last()
-      .fill("ollama_test_ctrl_a_second_input");
-    let secondValue = await page
-      .getByPlaceholder("Type something...")
-      .last()
-      .inputValue();
-    expect(secondValue).toBe("ollama_test_ctrl_a_second_input");
-
-    await page.getByPlaceholder("Type something...").last().click();
-
     await page.keyboard.press("ControlOrMeta+a");
 
     await page.keyboard.press("ControlOrMeta+c");
 
-    await page.getByPlaceholder("Type something...").first().click();
-
-    await page.keyboard.press("ControlOrMeta+a");
+    await page.keyboard.press("Backspace");
+    value = await page
+      .getByTestId("popover-anchor-input-base_url-edit")
+      .inputValue();
+    expect(value).toBe("");
 
     await page.keyboard.press("ControlOrMeta+v");
 
     value = await page
-      .getByPlaceholder("Type something...")
-      .first()
+      .getByTestId("popover-anchor-input-base_url-edit")
       .inputValue();
-    expect(value).toBe("ollama_test_ctrl_a_second_input");
+    expect(value).toBe("ollama_test_ctrl_a_first_input");
   },
 );
