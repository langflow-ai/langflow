[project]
name = "langflow-base"
version = "0.4.3"
description = "A Python package with a built-in web application"
requires-python = ">=3.10,<3.14"
license = "MIT"
keywords = ["nlp", "langchain", "openai", "gpt", "gui"]
readme = "README.md"
maintainers = [
    { name = "Carlos Coelho", email = "carlos@langflow.org" },
    { name = "Cristhian Zanforlin", email = "cristhian.lousa@gmail.com" },
    { name = "Gabriel Almeida", email = "gabriel@langflow.org" },
    { name = "Lucas Eduoli", email = "lucaseduoli@gmail.com" },
    { name = "OtÃ¡vio Anovazzi", email = "otavio2204@gmail.com" },
    { name = "Rodrigo Nader", email = "rodrigo@langflow.org" },
    { name = "Italo dos Anjos", email = "italojohnnydosanjos@gmail.com" },
]

dependencies = [
    "fastapi>=0.115.2,<1.0.0",
    "httpx[http2]>=0.27,<1.0.0",
    "aiofile>=3.9.0,<4.0.0",
    "uvicorn>=0.30.0,<1.0.0",
    "gunicorn>=22.0.0,<24.0.0",
    "langchain~=0.3.21",
    "langchain-community~=0.3.20",
    "langchain-core~=0.3.45",
    "langchainhub~=0.1.15",
    "loguru>=0.7.1,<1.0.0",
    "rich>=13.7.0,<14.0.0",
    "langchain-experimental>=0.3.4,<1.0.0",
    "sqlmodel==0.0.22",
    "pydantic~=2.10.1",
    "pydantic-settings>=2.2.0,<3.0.0",
    "typer>=0.13.0,<1.0.0",
    "cachetools>=5.5.0,<6.0.0",
    "platformdirs>=4.2.0,<5.0.0",
    "python-multipart>=0.0.12,<1.0.0",
    "orjson==3.10.15",
    "alembic>=1.13.0,<2.0.0",
    "passlib>=1.7.4,<2.0.0",
    "bcrypt==4.0.1",
    "pillow>=11.1.0,<12.0.0",
    "docstring-parser>=0.16,<1.0.0",
    "python-jose>=3.3.0,<4.0.0",
    "pandas==2.2.3",
    "multiprocess>=0.70.14,<1.0.0",
    "duckdb>=1.0.0,<2.0.0",
    "python-docx>=1.1.0,<2.0.0",
    "jq>=1.7.0,<2.0.0; sys_platform != 'win32'",
    "nest-asyncio>=1.6.0,<2.0.0",
    "emoji>=2.12.0,<3.0.0",
    "cryptography>=42.0.5,<44.0.0",
    "asyncer>=0.0.5,<1.0.0",
    "pyperclip>=1.8.2,<2.0.0",
    "uncurl>=0.0.11,<1.0.0",
    "sentry-sdk[fastapi,loguru]>=2.5.1,<3.0.0",
    "chardet>=5.2.0,<6.0.0",
    "firecrawl-py>=1.0.16,<2.0.0",
    "opentelemetry-api>=1.25.0,<2.0.0",
    "opentelemetry-sdk>=1.25.0,<2.0.0",
    "opentelemetry-exporter-prometheus>=0.46b0,<1.0.0",
    "opentelemetry-instrumentation-fastapi>=0.46b0,<1.0.0",
    "prometheus-client>=0.20.0,<1.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    "setuptools>=78.1.0,<79.0.0",
    "nanoid>=2.0.0,<3.0.0",
    "filelock>=3.15.4,<4.0.0",
    "grandalf>=0.8.0,<1.0.0",
    "diskcache>=5.6.3,<6.0.0",
    "clickhouse-connect==0.7.19",
    "assemblyai>=0.33.0,<1.0.0",
    "fastapi-pagination>=0.13.1,<1.0.0",
    "defusedxml>=0.7.1,<1.0.0",
    "pypdf~=5.1.0",
    "validators>=0.34.0",
    "networkx>=3.4.2",
    "json-repair>=0.30.3",
    "mcp>=1.6.0",
    "aiosqlite>=0.20.0",
    "greenlet>=3.1.1",
    "jsonquerylang>=1.1.1",
    "sqlalchemy[aiosqlite]>=2.0.38,<3.0.0",
    'elevenlabs==1.58.1; python_version == "3.12"',
    'elevenlabs>=1.52.0; python_version != "3.12"',
    "webrtcvad>=2.0.10",
    "scipy>=1.15.2",
    "ibm-watsonx-ai>=1.3.1",
    "langchain-ibm>=0.3.8",
    "trustcall>=0.0.38",
    "json_repair==0.30.3",
]


[tool.hatch.build.targets.wheel]
packages = ["langflow"]


[tool.pytest.ini_options]
minversion = "6.0"
#addopts = "-ra"
testpaths = ["tests", "integration"]
console_output_style = "progress"
filterwarnings = ["ignore::DeprecationWarning"]
log_cli = true
markers = ["async_test"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "skip"
disable_error_code = ["type-var"]
namespace_packages = true
mypy_path = "langflow"
ignore_missing_imports = true

[tool.ruff]
target-version = "py310"
exclude = ["langflow/alembic/versions"]
line-length = 120

[tool.ruff.lint]
flake8-annotations.mypy-init-return = true
flake8-bugbear.extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.File",
    "fastapi.Query",
    "typer.Option",
]
flake8-type-checking.runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "typing.TypedDict", # Needed by fastapi
    "typing_extensions.TypedDict", # Needed by fastapi
]
pydocstyle.convention = "google"
select = ["ALL"]
ignore = [
    "C90", # McCabe complexity
    "CPY", # Missing copyright
    "COM812", # Messes with the formatter
    "ERA", # Eradicate commented-out code
    "FIX002", # Line contains TODO
    "ISC001", # Messes with the formatter
    "PERF203", # Rarely useful
    "PLR09", # Too many something (arg, statements, etc)
    "RUF012", # Pydantic models are currently not well detected. See https://github.com/astral-sh/ruff/issues/13630
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link in TODO
    "TRY301", # A bit too harsh (Abstract `raise` to an inner function)

    # Rules that are TODOs
    "ANN", # Missing type annotations
    "D1", # Missing docstrings
    "SLF001", # Using private attributes outside of class
]

[tool.ruff.lint.per-file-ignores]
"langflow/api/v1/*" = [
    "TCH", # FastAPI needs to evaluate types at runtime
]
"langflow/api/v2/*" = [
    "TCH", # FastAPI needs to evaluate types at runtime
]
"langflow/{components/tools/python_code_structured_tool.py,custom/code_parser/code_parser.py,utils/validate.py}" = [
    "S102", # Use of exec
]
"langflow/services/cache/*" = [
    "S301", # Use of pickle
]

[tool.codeflash]
# All paths are relative to this pyproject.toml's directory.
module-root = "langflow"
tests-root = "../tests/unit"
test-framework = "pytest"
ignore-paths = ["langflow/components/"]
formatter-cmds = ["ruff check --exit-zero --fix $file", "ruff format $file"]
#disable plugins that might interfere with runtime measurement
pytest-cmd = "pytest -p no:profiling -p no:sugar -p no:xdist -p no:cov -p no:split"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"



[project.urls]
Repository = "https://github.com/langflow-ai/langflow"
Documentation = "https://docs.langflow.org"
# Optional dependencies
[project.optional-dependencies]

postgresql = [
  "sqlalchemy[postgresql_psycopg2binary]",
    "sqlalchemy[postgresql_psycopg]",

]

# Individual database providers
couchbase = ["couchbase>=4.2.1"]
cassandra = ["cassio>=0.1.7"]
clickhouse = ["clickhouse-connect==0.7.19"]
mongodb = ["pymongo==4.10.1"]
supabase = ["supabase==2.6.0"]
redis = ["redis==5.2.1"]
elasticsearch = ["elasticsearch==8.16.0", "langchain_elasticsearch==0.3.2"]

# Individual vector store providers
faiss = ["faiss-cpu==1.9.0.post1"]
qdrant = ["qdrant-client==1.9.2"]
weaviate = ["weaviate-client==4.10.2"]
chroma = [
    "chromadb==0.5.23",
    "langchain-chroma==0.1.4"
]
upstash = ["upstash-vector==0.6.0"]
pinecone = ["langchain-pinecone==0.2.2"]
milvus = ["langchain-milvus==0.1.7"]
mongodb-vectors = ["langchain-mongodb==0.2.0"]
astradb = ["langchain-astradb==0.5.2"]

# Individual LLM providers
openai = ["langchain-openai==0.2.12"]
anthropic = ["langchain-anthropic==0.3.0"]
cohere = ["langchain-cohere==0.3.3"]
google = [
    "langchain-google-genai==2.0.6",
    "langchain-google-vertexai==2.0.7",
    "langchain-google-community==2.0.3",
    "langchain-google-calendar-tools==0.0.1"
]
ollama = ["langchain-ollama==0.2.1"]
nvidia = ["langchain-nvidia-ai-endpoints==0.3.8"]
mistral = ["langchain-mistralai==0.2.3"]
sambanova = ["langchain-sambanova==0.1.0"]
groq = ["langchain-groq==0.2.1"]

# Individual local LLM providers
llama-cpp = ["llama-cpp-python~=0.2.0"]
sentence-transformers = ["sentence-transformers>=2.3.1"]
ctransformers = ["ctransformers>=0.2.10"]

# Individual monitoring providers
langfuse = ["langfuse==2.53.9"]
langwatch = ["langwatch==0.1.16"]
langsmith = ["langsmith==0.1.147"]
arize = ["arize-phoenix-otel>=0.6.1"]

# Individual document loaders
pypdf = ["pypdf~=5.1.0"]
docx = ["python-docx>=1.1.0"]
pytube = ["pytube==15.0.0"]

# Individual agent frameworks
crewai = ["crewai==0.102.0"]
dspy = ["dspy-ai==2.5.41"]
smolagents = ["smolagents>=1.8.0"]

# Individual tools
beautifulsoup = ["beautifulsoup4==4.12.3"]
serpapi = ["google-search-results>=2.4.1,<3.0.0"]
google-api = ["google-api-python-client==2.154.0"]
wikipedia = ["wikipedia==1.4.0"]
fake-useragent = ["fake-useragent==1.5.1"]
duckduckgo = ["duckduckgo_search==7.2.1"]
yfinance = ["yfinance==0.2.50"]
wolframalpha = ["wolframalpha==5.1.3"]

# Individual utilities
pyarrow = ["pyarrow==19.0.0"]
fastavro = ["fastavro==1.9.7"]
gitpython = ["GitPython==3.1.43"]
nltk = ["nltk==3.9.1"]
lark = ["lark==1.2.2"]

# Additional dependencies from requirements
huggingface = ["huggingface-hub[inference]>=0.23.2,<1.0.0"]
metaphor = ["metaphor-python==0.1.23"]
metal = ["metal_sdk==2.5.1"]
markup = ["MarkupSafe==3.0.2"]
aws = ["boto3==1.34.162"]
numexpr = ["numexpr==2.10.2"]
qianfan = ["qianfan==0.3.5"]
pgvector = ["pgvector==0.3.6"]
litellm = ["litellm==1.60.2"]
zep = ["zep-python==2.0.2"]
youtube = ["youtube-transcript-api==0.6.3"]
markdown = ["Markdown==3.7"]
kubernetes = ["kubernetes==31.0.0"]
json-repair = ["json_repair==0.30.3"]
astra = ["astra-assistants[tools]~=2.2.9"]
composio = [
    "composio-langchain==0.7.1",
    "composio-core==0.7.1"
]
ragstack = ["ragstack-ai-knowledge-store==0.2.1"]
opensearch = ["opensearch-py==2.8.0"]
atlassian = ["atlassian-python-api==3.41.16"]
mem0 = ["mem0ai==0.1.34"]
needle = ["needle-python>=0.4.0"]
sseclient = ["sseclient-py==1.8.0"]
openinference = ["openinference-instrumentation-langchain>=0.1.29"]
mcp = ["mcp>=0.9.1"]
ag2 = ["ag2>=0.1.0"]
scrapegraph = ["scrapegraph-py>=1.12.0"]
pydantic-ai = ["pydantic-ai>=0.0.19"]
apify = ["apify-client>=1.8.1"]
spider = ["spider-client>=0.0.27,<1.0.0"]

# Complete installation
complete = [
    "langflow-base[couchbase]",
    "langflow-base[cassandra]",
    "langflow-base[clickhouse]",
    "langflow-base[mongodb]",
    "langflow-base[supabase]",
    "langflow-base[redis]",
    "langflow-base[elasticsearch]",
    "langflow-base[faiss]",
    "langflow-base[qdrant]",
    "langflow-base[weaviate]",
    "langflow-base[chroma]",
    "langflow-base[upstash]",
    "langflow-base[pinecone]",
    "langflow-base[milvus]",
    "langflow-base[mongodb-vectors]",
    "langflow-base[astradb]",
    "langflow-base[openai]",
    "langflow-base[anthropic]",
    "langflow-base[cohere]",
    "langflow-base[google]",
    "langflow-base[ollama]",
    "langflow-base[nvidia]",
    "langflow-base[mistral]",
    "langflow-base[sambanova]",
    "langflow-base[groq]",
    "langflow-base[langfuse]",
    "langflow-base[langwatch]",
    "langflow-base[langsmith]",
    "langflow-base[arize]",
    "langflow-base[pypdf]",
    "langflow-base[docx]",
    "langflow-base[pytube]",
    "langflow-base[crewai]",
    "langflow-base[dspy]",
    "langflow-base[smolagents]",
    "langflow-base[beautifulsoup]",
    "langflow-base[serpapi]",
    "langflow-base[google-api]",
    "langflow-base[wikipedia]",
    "langflow-base[fake-useragent]",
    "langflow-base[duckduckgo]",
    "langflow-base[yfinance]",
    "langflow-base[wolframalpha]",
    "langflow-base[pyarrow]",
    "langflow-base[fastavro]",
    "langflow-base[gitpython]",
    "langflow-base[nltk]",
    "langflow-base[lark]",
    "langflow-base[huggingface]",
    "langflow-base[metaphor]",
    "langflow-base[metal]",
    "langflow-base[markup]",
    "langflow-base[aws]",
    "langflow-base[numexpr]",
    "langflow-base[qianfan]",
    "langflow-base[pgvector]",
    "langflow-base[litellm]",
    "langflow-base[zep]",
    "langflow-base[youtube]",
    "langflow-base[markdown]",
    "langflow-base[kubernetes]",
    "langflow-base[json-repair]",
    "langflow-base[astra]",
    "langflow-base[composio]",
    "langflow-base[ragstack]",
    "langflow-base[opensearch]",
    "langflow-base[atlassian]",
    "langflow-base[mem0]",
    "langflow-base[needle]",
    "langflow-base[sseclient]",
    "langflow-base[openinference]",
    "langflow-base[mcp]",
    "langflow-base[ag2]",
    "langflow-base[scrapegraph]",
    "langflow-base[pydantic-ai]",
    "langflow-base[apify]",
    "langflow-base[spider]",
]

all = [
    "langflow-base[complete]",
]

