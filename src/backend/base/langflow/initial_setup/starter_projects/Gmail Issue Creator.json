{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "GmailAPI",
            "id": "GmailAPI-UjJbc",
            "name": "dataFrame",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-Py0Vi",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__GmailAPI-UjJbc{œdataTypeœ:œGmailAPIœ,œidœ:œGmailAPI-UjJbcœ,œnameœ:œdataFrameœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-Py0Vi{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-Py0Viœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "GmailAPI-UjJbc",
        "sourceHandle": "{œdataTypeœ:œGmailAPIœ,œidœ:œGmailAPI-UjJbcœ,œnameœ:œdataFrameœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-Py0Vi",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-Py0Viœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-Py0Vi",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "thread_id",
            "id": "GmailAPI-Yiv6V",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-Py0Vi{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-Py0Viœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-GmailAPI-Yiv6V{œfieldNameœ:œthread_idœ,œidœ:œGmailAPI-Yiv6Vœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-Py0Vi",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-Py0Viœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "GmailAPI-Yiv6V",
        "targetHandle": "{œfieldNameœ:œthread_idœ,œidœ:œGmailAPI-Yiv6Vœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "GmailAPI",
            "id": "GmailAPI-Yiv6V",
            "name": "dataFrame",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-IkaF6",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__GmailAPI-Yiv6V{œdataTypeœ:œGmailAPIœ,œidœ:œGmailAPI-Yiv6Vœ,œnameœ:œdataFrameœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-IkaF6{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-IkaF6œ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "GmailAPI-Yiv6V",
        "sourceHandle": "{œdataTypeœ:œGmailAPIœ,œidœ:œGmailAPI-Yiv6Vœ,œnameœ:œdataFrameœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-IkaF6",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-IkaF6œ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-IkaF6",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "LanguageModelComponent-pfOpC",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-IkaF6{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-IkaF6œ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-LanguageModelComponent-pfOpC{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-pfOpCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-IkaF6",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-IkaF6œ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LanguageModelComponent-pfOpC",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-pfOpCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LanguageModelComponent",
            "id": "LanguageModelComponent-pfOpC",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-VgCCN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__LanguageModelComponent-pfOpC{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-pfOpCœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-VgCCN{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-VgCCNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "LanguageModelComponent-pfOpC",
        "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-pfOpCœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-VgCCN",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-VgCCNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LanguageModelComponent",
            "id": "LanguageModelComponent-pfOpC",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "true_case_message",
            "id": "ConditionalRouter-VgCCN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__LanguageModelComponent-pfOpC{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-pfOpCœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-VgCCN{œfieldNameœ:œtrue_case_messageœ,œidœ:œConditionalRouter-VgCCNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "LanguageModelComponent-pfOpC",
        "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-pfOpCœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-VgCCN",
        "targetHandle": "{œfieldNameœ:œtrue_case_messageœ,œidœ:œConditionalRouter-VgCCNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LanguageModelComponent",
            "id": "LanguageModelComponent-pfOpC",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "false_case_message",
            "id": "ConditionalRouter-VgCCN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__LanguageModelComponent-pfOpC{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-pfOpCœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-VgCCN{œfieldNameœ:œfalse_case_messageœ,œidœ:œConditionalRouter-VgCCNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "LanguageModelComponent-pfOpC",
        "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-pfOpCœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-VgCCN",
        "targetHandle": "{œfieldNameœ:œfalse_case_messageœ,œidœ:œConditionalRouter-VgCCNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-VgCCN",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "GITHUB_CREATE_AN_ISSUE_body",
            "id": "ComposioGitHubAPIComponent-73CDf",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ConditionalRouter-VgCCN{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-VgCCNœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-ComposioGitHubAPIComponent-73CDf{œfieldNameœ:œGITHUB_CREATE_AN_ISSUE_bodyœ,œidœ:œComposioGitHubAPIComponent-73CDfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConditionalRouter-VgCCN",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-VgCCNœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ComposioGitHubAPIComponent-73CDf",
        "targetHandle": "{œfieldNameœ:œGITHUB_CREATE_AN_ISSUE_bodyœ,œidœ:œComposioGitHubAPIComponent-73CDfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-VgCCN",
            "name": "false_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-VqXAQ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ConditionalRouter-VgCCN{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-VgCCNœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}-TextOutput-VqXAQ{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-VqXAQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConditionalRouter-VgCCN",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-VgCCNœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-VqXAQ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-VqXAQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "GmailAPI-UjJbc",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "display_name": "Gmail",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "recipient_email",
              "subject",
              "body",
              "cc",
              "bcc",
              "is_html",
              "gmail_user_id",
              "max_results",
              "message_id",
              "thread_id",
              "query",
              "message_body",
              "label_name",
              "label_id",
              "label_ids",
              "label_list_visibility",
              "message_list_visibility",
              "page_token",
              "include_spam_trash",
              "format",
              "resource_name",
              "person_fields",
              "attachment_id",
              "file_name",
              "attachment"
            ],
            "frozen": false,
            "icon": "Google",
            "last_updated": "2025-08-08T15:26:00.666Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "88a5557f7c16",
              "module": "langflow.components.composio.gmail_composio.ComposioGmailAPIComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "group_outputs": false,
                "method": "as_dataframe",
                "name": "dataFrame",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GMAIL_SEND_EMAIL",
                    "name": "Send Email"
                  },
                  {
                    "metadata": "GMAIL_FETCH_EMAILS",
                    "name": "Fetch Emails"
                  },
                  {
                    "metadata": "GMAIL_GET_PROFILE",
                    "name": "Get User Profile"
                  },
                  {
                    "metadata": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID",
                    "name": "Get Email By ID"
                  },
                  {
                    "metadata": "GMAIL_CREATE_EMAIL_DRAFT",
                    "name": "Create Draft Email"
                  },
                  {
                    "metadata": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID",
                    "name": "Get Message By Thread ID"
                  },
                  {
                    "metadata": "GMAIL_LIST_THREADS",
                    "name": "List Email Threads"
                  },
                  {
                    "metadata": "GMAIL_REPLY_TO_THREAD",
                    "name": "Reply To Thread"
                  },
                  {
                    "metadata": "GMAIL_LIST_LABELS",
                    "name": "List Email Labels"
                  },
                  {
                    "metadata": "GMAIL_CREATE_LABEL",
                    "name": "Create Email Label"
                  },
                  {
                    "metadata": "GMAIL_GET_PEOPLE",
                    "name": "Get Contacts"
                  },
                  {
                    "metadata": "GMAIL_REMOVE_LABEL",
                    "name": "Delete Email Label"
                  },
                  {
                    "metadata": "GMAIL_GET_ATTACHMENT",
                    "name": "Get Attachment"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": [
                  {
                    "chosen": false,
                    "name": "Fetch Emails",
                    "selected": false
                  }
                ]
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "attachment": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Add Attachment",
                "dynamic": false,
                "fileTypes": [
                  "csv",
                  "txt",
                  "doc",
                  "docx",
                  "xls",
                  "xlsx",
                  "pdf",
                  "png",
                  "jpg",
                  "jpeg",
                  "gif",
                  "zip",
                  "rar",
                  "ppt",
                  "pptx"
                ],
                "file_path": "",
                "info": "Add an attachment",
                "list": false,
                "list_add_label": "Add More",
                "name": "attachment",
                "placeholder": "",
                "required": false,
                "show": false,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "attachment_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attachment ID",
                "dynamic": false,
                "info": "Id of the attachment",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "attachment_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "bcc": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "BCC",
                "dynamic": false,
                "info": "Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "bcc",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "body": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Body",
                "dynamic": false,
                "info": "Content of the email",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "cc": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "CC",
                "dynamic": false,
                "info": "Email addresses to CC (Carbon Copy) in the email, separated by commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "cc",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs.inputs import (\n    BoolInput,\n    FileInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGmailAPIComponent(ComposioBaseComponent):\n    \"\"\"Gmail API component for interacting with Gmail services.\"\"\"\n\n    display_name: str = \"Gmail\"\n    name = \"GmailAPI\"\n    icon = \"Google\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"gmail\"\n\n    # Gmail-specific actions\n    _actions_data: dict = {\n        \"GMAIL_SEND_EMAIL\": {\n            \"display_name\": \"Send Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"gmail_user_id\",\n                \"attachment\",\n            ],\n        },\n        \"GMAIL_FETCH_EMAILS\": {\n            \"display_name\": \"Fetch Emails\",\n            \"action_fields\": [\n                \"gmail_user_id\",\n                \"max_results\",\n                \"query\",\n                \"page_token\",\n                \"label_ids\",\n                \"include_spam_trash\",\n            ],\n            \"get_result_field\": True,\n            \"result_field\": \"messages\",\n        },\n        \"GMAIL_GET_PROFILE\": {\n            \"display_name\": \"Get User Profile\",\n            \"action_fields\": [\"gmail_user_id\"],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID\": {\n            \"display_name\": \"Get Email By ID\",\n            \"action_fields\": [\"message_id\", \"gmail_user_id\", \"format\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_CREATE_EMAIL_DRAFT\": {\n            \"display_name\": \"Create Draft Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"attachment\",\n                \"gmail_user_id\",\n            ],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_THREAD_ID\": {\n            \"display_name\": \"Get Message By Thread ID\",\n            \"action_fields\": [\"thread_id\", \"page_token\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_LIST_THREADS\": {\n            \"display_name\": \"List Email Threads\",\n            \"action_fields\": [\"max_results\", \"query\", \"gmail_user_id\", \"page_token\"],\n            \"get_result_field\": True,\n            \"result_field\": \"threads\",\n        },\n        \"GMAIL_REPLY_TO_THREAD\": {\n            \"display_name\": \"Reply To Thread\",\n            \"action_fields\": [\"thread_id\", \"message_body\", \"recipient_email\", \"gmail_user_id\", \"cc\", \"bcc\", \"is_html\"],\n        },\n        \"GMAIL_LIST_LABELS\": {\n            \"display_name\": \"List Email Labels\",\n            \"action_fields\": [\"gmail_user_id\"],\n            \"get_result_field\": True,\n            \"result_field\": \"labels\",\n        },\n        \"GMAIL_CREATE_LABEL\": {\n            \"display_name\": \"Create Email Label\",\n            \"action_fields\": [\"label_name\", \"label_list_visibility\", \"message_list_visibility\", \"gmail_user_id\"],\n        },\n        \"GMAIL_GET_PEOPLE\": {\n            \"display_name\": \"Get Contacts\",\n            \"action_fields\": [\"resource_name\", \"person_fields\"],\n            \"get_result_field\": True,\n            \"result_field\": \"people_data\",\n        },\n        \"GMAIL_REMOVE_LABEL\": {\n            \"display_name\": \"Delete Email Label\",\n            \"action_fields\": [\"label_id\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_GET_ATTACHMENT\": {\n            \"display_name\": \"Get Attachment\",\n            \"action_fields\": [\"message_id\", \"attachment_id\", \"file_name\", \"gmail_user_id\"],\n        },\n    }\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\"is_html\", \"include_spam_trash\"}\n\n    # Combine base inputs with Gmail-specific inputs\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        # Email composition fields\n        MessageTextInput(\n            name=\"recipient_email\",\n            display_name=\"Recipient Email\",\n            info=\"Email address of the recipient\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"subject\",\n            display_name=\"Subject\",\n            info=\"Subject of the email\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"body\",\n            display_name=\"Body\",\n            required=True,\n            info=\"Content of the email\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"cc\",\n            display_name=\"CC\",\n            info=\"Email addresses to CC (Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"bcc\",\n            display_name=\"BCC\",\n            info=\"Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_html\",\n            display_name=\"Is HTML\",\n            info=\"Specify whether the email body contains HTML content (true/false)\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        # Email retrieval and management fields\n        MessageTextInput(\n            name=\"gmail_user_id\",\n            display_name=\"User ID\",\n            info=\"The user's email address or 'me' for the authenticated user\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            required=True,\n            info=\"Maximum number of emails to be returned\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_id\",\n            display_name=\"Message ID\",\n            info=\"The ID of the specific email message\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"thread_id\",\n            display_name=\"Thread ID\",\n            info=\"The ID of the email thread\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_body\",\n            display_name=\"Message Body\",\n            info=\"The body content of the message to be sent\",\n            show=False,\n            advanced=True,\n        ),\n        # Label management fields\n        MessageTextInput(\n            name=\"label_name\",\n            display_name=\"Label Name\",\n            info=\"Name of the Gmail label to create, modify, or filter by\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_id\",\n            display_name=\"Label ID\",\n            info=\"The ID of the Gmail label\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_ids\",\n            display_name=\"Label Ids\",\n            info=\"Comma-separated list of label IDs to filter messages\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"label_list_visibility\",\n            display_name=\"Label List Visibility\",\n            info=\"The visibility of the label in the label list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"message_list_visibility\",\n            display_name=\"Message List Visibility\",\n            info=\"The visibility of the label in the message list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        # Pagination and filtering\n        MessageTextInput(\n            name=\"page_token\",\n            display_name=\"Page Token\",\n            info=\"Token for retrieving the next page of results\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_spam_trash\",\n            display_name=\"Include messages from Spam/Trash\",\n            info=\"Include messages from SPAM and TRASH in the results\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"The format to return the message in. Possible values: minimal, full, raw, metadata\",\n            show=False,\n            advanced=True,\n        ),\n        # Contact management fields\n        MessageTextInput(\n            name=\"resource_name\",\n            display_name=\"Resource Name\",\n            info=\"The resource name of the person to provide information about\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"person_fields\",\n            display_name=\"Person fields\",\n            info=\"Fields to return for the person. Multiple fields can be specified by separating them with commas\",\n            show=False,\n            advanced=True,\n        ),\n        # Attachment handling\n        MessageTextInput(\n            name=\"attachment_id\",\n            display_name=\"Attachment ID\",\n            info=\"Id of the attachment\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"file_name\",\n            display_name=\"File name\",\n            info=\"File name of the attachment file\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        FileInput(\n            name=\"attachment\",\n            display_name=\"Add Attachment\",\n            file_types=[\n                \"csv\",\n                \"txt\",\n                \"doc\",\n                \"docx\",\n                \"xls\",\n                \"xlsx\",\n                \"pdf\",\n                \"png\",\n                \"jpg\",\n                \"jpeg\",\n                \"gif\",\n                \"zip\",\n                \"rar\",\n                \"ppt\",\n                \"pptx\",\n            ],\n            info=\"Add an attachment\",\n            show=False,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in [\"cc\", \"bcc\", \"label_ids\"] and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    params[field] = value\n\n            if params.get(\"gmail_user_id\"):\n                params[\"user_id\"] = params.pop(\"gmail_user_id\")\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"data\", {}).get(\"message\", \"{}\")\n                try:\n                    error_data = json.loads(message_str).get(\"error\", {})\n                except json.JSONDecodeError:\n                    error_data = {\"error\": \"Failed to get exact error details\"}\n                return {\n                    \"code\": error_data.get(\"code\"),\n                    \"message\": error_data.get(\"message\"),\n                    \"errors\": error_data.get(\"errors\", []),\n                    \"status\": error_data.get(\"status\"),\n                }\n\n            result_data = result.get(\"data\", {})\n            actions_data = self._actions_data.get(action_key, {})\n            # If 'get_result_field' is True and 'result_field' is specified, extract the data\n            # using 'result_field'. Otherwise, fall back to the entire 'data' field in the response.\n            if actions_data.get(\"get_result_field\") and actions_data.get(\"result_field\"):\n                result_data = result_data.get(actions_data.get(\"result_field\"), result.get(\"data\", []))\n            if len(result_data) != 1 and not actions_data.get(\"result_field\") and actions_data.get(\"get_result_field\"):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            return result_data  # noqa: TRY300\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            \"GMAIL_SEND_EMAIL\",\n            \"GMAIL_FETCH_EMAILS\",\n        }\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "file_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "File name",
                "dynamic": false,
                "info": "File name of the attachment file",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_name",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "format": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Format",
                "dynamic": false,
                "info": "The format to return the message in. Possible values: minimal, full, raw, metadata",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "format",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "gmail_user_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "User ID",
                "dynamic": false,
                "info": "The user's email address or 'me' for the authenticated user",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "gmail_user_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_spam_trash": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include messages from Spam/Trash",
                "dynamic": false,
                "info": "Include messages from SPAM and TRASH in the results",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_spam_trash",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "is_html": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Is HTML",
                "dynamic": false,
                "info": "Specify whether the email body contains HTML content (true/false)",
                "list": false,
                "list_add_label": "Add More",
                "name": "is_html",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "label_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Label ID",
                "dynamic": false,
                "info": "The ID of the Gmail label",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_ids": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Label Ids",
                "dynamic": false,
                "info": "Comma-separated list of label IDs to filter messages",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_ids",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_list_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Label List Visibility",
                "dynamic": false,
                "info": "The visibility of the label in the label list in the Gmail web interface",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_list_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Label Name",
                "dynamic": false,
                "info": "Name of the Gmail label to create, modify, or filter by",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_name",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of emails to be returned",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_results",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "message_body": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Message Body",
                "dynamic": false,
                "info": "The body content of the message to be sent",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_body",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Message ID",
                "dynamic": false,
                "info": "The ID of the specific email message",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message_list_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Message List Visibility",
                "dynamic": false,
                "info": "The visibility of the label in the message list in the Gmail web interface",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_list_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token for retrieving the next page of results",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "page_token",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "person_fields": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Person fields",
                "dynamic": false,
                "info": "Fields to return for the person. Multiple fields can be specified by separating them with commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "person_fields",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "recipient_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Recipient Email",
                "dynamic": false,
                "info": "Email address of the recipient",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "recipient_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "resource_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Resource Name",
                "dynamic": false,
                "info": "The resource name of the person to provide information about",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "resource_name",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "subject": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Subject",
                "dynamic": false,
                "info": "Subject of the email",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "subject",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "thread_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Thread ID",
                "dynamic": false,
                "info": "The ID of the email thread",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "thread_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "GmailAPI"
        },
        "dragging": false,
        "id": "GmailAPI-UjJbc",
        "measured": {
          "height": 407,
          "width": 320
        },
        "position": {
          "x": -1190.5032743335555,
          "y": -20.773072929495275
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "GmailAPI-Yiv6V",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "display_name": "Gmail",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "recipient_email",
              "subject",
              "body",
              "cc",
              "bcc",
              "is_html",
              "gmail_user_id",
              "max_results",
              "message_id",
              "thread_id",
              "query",
              "message_body",
              "label_name",
              "label_id",
              "label_ids",
              "label_list_visibility",
              "message_list_visibility",
              "page_token",
              "include_spam_trash",
              "format",
              "resource_name",
              "person_fields",
              "attachment_id",
              "file_name",
              "attachment"
            ],
            "frozen": false,
            "icon": "Google",
            "last_updated": "2025-08-08T15:26:00.667Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "88a5557f7c16",
              "module": "langflow.components.composio.gmail_composio.ComposioGmailAPIComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "group_outputs": false,
                "method": "as_dataframe",
                "name": "dataFrame",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GMAIL_SEND_EMAIL",
                    "name": "Send Email"
                  },
                  {
                    "metadata": "GMAIL_FETCH_EMAILS",
                    "name": "Fetch Emails"
                  },
                  {
                    "metadata": "GMAIL_GET_PROFILE",
                    "name": "Get User Profile"
                  },
                  {
                    "metadata": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID",
                    "name": "Get Email By ID"
                  },
                  {
                    "metadata": "GMAIL_CREATE_EMAIL_DRAFT",
                    "name": "Create Draft Email"
                  },
                  {
                    "metadata": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID",
                    "name": "Get Message By Thread ID"
                  },
                  {
                    "metadata": "GMAIL_LIST_THREADS",
                    "name": "List Email Threads"
                  },
                  {
                    "metadata": "GMAIL_REPLY_TO_THREAD",
                    "name": "Reply To Thread"
                  },
                  {
                    "metadata": "GMAIL_LIST_LABELS",
                    "name": "List Email Labels"
                  },
                  {
                    "metadata": "GMAIL_CREATE_LABEL",
                    "name": "Create Email Label"
                  },
                  {
                    "metadata": "GMAIL_GET_PEOPLE",
                    "name": "Get Contacts"
                  },
                  {
                    "metadata": "GMAIL_REMOVE_LABEL",
                    "name": "Delete Email Label"
                  },
                  {
                    "metadata": "GMAIL_GET_ATTACHMENT",
                    "name": "Get Attachment"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": [
                  {
                    "chosen": false,
                    "name": "Get Message By Thread ID",
                    "selected": false
                  }
                ]
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "attachment": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Add Attachment",
                "dynamic": false,
                "fileTypes": [
                  "csv",
                  "txt",
                  "doc",
                  "docx",
                  "xls",
                  "xlsx",
                  "pdf",
                  "png",
                  "jpg",
                  "jpeg",
                  "gif",
                  "zip",
                  "rar",
                  "ppt",
                  "pptx"
                ],
                "file_path": "",
                "info": "Add an attachment",
                "list": false,
                "list_add_label": "Add More",
                "name": "attachment",
                "placeholder": "",
                "required": false,
                "show": false,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "attachment_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attachment ID",
                "dynamic": false,
                "info": "Id of the attachment",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "attachment_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "bcc": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "BCC",
                "dynamic": false,
                "info": "Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "bcc",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "body": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Body",
                "dynamic": false,
                "info": "Content of the email",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "cc": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "CC",
                "dynamic": false,
                "info": "Email addresses to CC (Carbon Copy) in the email, separated by commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "cc",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs.inputs import (\n    BoolInput,\n    FileInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGmailAPIComponent(ComposioBaseComponent):\n    \"\"\"Gmail API component for interacting with Gmail services.\"\"\"\n\n    display_name: str = \"Gmail\"\n    name = \"GmailAPI\"\n    icon = \"Google\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"gmail\"\n\n    # Gmail-specific actions\n    _actions_data: dict = {\n        \"GMAIL_SEND_EMAIL\": {\n            \"display_name\": \"Send Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"gmail_user_id\",\n                \"attachment\",\n            ],\n        },\n        \"GMAIL_FETCH_EMAILS\": {\n            \"display_name\": \"Fetch Emails\",\n            \"action_fields\": [\n                \"gmail_user_id\",\n                \"max_results\",\n                \"query\",\n                \"page_token\",\n                \"label_ids\",\n                \"include_spam_trash\",\n            ],\n            \"get_result_field\": True,\n            \"result_field\": \"messages\",\n        },\n        \"GMAIL_GET_PROFILE\": {\n            \"display_name\": \"Get User Profile\",\n            \"action_fields\": [\"gmail_user_id\"],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID\": {\n            \"display_name\": \"Get Email By ID\",\n            \"action_fields\": [\"message_id\", \"gmail_user_id\", \"format\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_CREATE_EMAIL_DRAFT\": {\n            \"display_name\": \"Create Draft Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"attachment\",\n                \"gmail_user_id\",\n            ],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_THREAD_ID\": {\n            \"display_name\": \"Get Message By Thread ID\",\n            \"action_fields\": [\"thread_id\", \"page_token\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_LIST_THREADS\": {\n            \"display_name\": \"List Email Threads\",\n            \"action_fields\": [\"max_results\", \"query\", \"gmail_user_id\", \"page_token\"],\n            \"get_result_field\": True,\n            \"result_field\": \"threads\",\n        },\n        \"GMAIL_REPLY_TO_THREAD\": {\n            \"display_name\": \"Reply To Thread\",\n            \"action_fields\": [\"thread_id\", \"message_body\", \"recipient_email\", \"gmail_user_id\", \"cc\", \"bcc\", \"is_html\"],\n        },\n        \"GMAIL_LIST_LABELS\": {\n            \"display_name\": \"List Email Labels\",\n            \"action_fields\": [\"gmail_user_id\"],\n            \"get_result_field\": True,\n            \"result_field\": \"labels\",\n        },\n        \"GMAIL_CREATE_LABEL\": {\n            \"display_name\": \"Create Email Label\",\n            \"action_fields\": [\"label_name\", \"label_list_visibility\", \"message_list_visibility\", \"gmail_user_id\"],\n        },\n        \"GMAIL_GET_PEOPLE\": {\n            \"display_name\": \"Get Contacts\",\n            \"action_fields\": [\"resource_name\", \"person_fields\"],\n            \"get_result_field\": True,\n            \"result_field\": \"people_data\",\n        },\n        \"GMAIL_REMOVE_LABEL\": {\n            \"display_name\": \"Delete Email Label\",\n            \"action_fields\": [\"label_id\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_GET_ATTACHMENT\": {\n            \"display_name\": \"Get Attachment\",\n            \"action_fields\": [\"message_id\", \"attachment_id\", \"file_name\", \"gmail_user_id\"],\n        },\n    }\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\"is_html\", \"include_spam_trash\"}\n\n    # Combine base inputs with Gmail-specific inputs\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        # Email composition fields\n        MessageTextInput(\n            name=\"recipient_email\",\n            display_name=\"Recipient Email\",\n            info=\"Email address of the recipient\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"subject\",\n            display_name=\"Subject\",\n            info=\"Subject of the email\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"body\",\n            display_name=\"Body\",\n            required=True,\n            info=\"Content of the email\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"cc\",\n            display_name=\"CC\",\n            info=\"Email addresses to CC (Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"bcc\",\n            display_name=\"BCC\",\n            info=\"Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_html\",\n            display_name=\"Is HTML\",\n            info=\"Specify whether the email body contains HTML content (true/false)\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        # Email retrieval and management fields\n        MessageTextInput(\n            name=\"gmail_user_id\",\n            display_name=\"User ID\",\n            info=\"The user's email address or 'me' for the authenticated user\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            required=True,\n            info=\"Maximum number of emails to be returned\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_id\",\n            display_name=\"Message ID\",\n            info=\"The ID of the specific email message\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"thread_id\",\n            display_name=\"Thread ID\",\n            info=\"The ID of the email thread\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_body\",\n            display_name=\"Message Body\",\n            info=\"The body content of the message to be sent\",\n            show=False,\n            advanced=True,\n        ),\n        # Label management fields\n        MessageTextInput(\n            name=\"label_name\",\n            display_name=\"Label Name\",\n            info=\"Name of the Gmail label to create, modify, or filter by\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_id\",\n            display_name=\"Label ID\",\n            info=\"The ID of the Gmail label\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_ids\",\n            display_name=\"Label Ids\",\n            info=\"Comma-separated list of label IDs to filter messages\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"label_list_visibility\",\n            display_name=\"Label List Visibility\",\n            info=\"The visibility of the label in the label list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"message_list_visibility\",\n            display_name=\"Message List Visibility\",\n            info=\"The visibility of the label in the message list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        # Pagination and filtering\n        MessageTextInput(\n            name=\"page_token\",\n            display_name=\"Page Token\",\n            info=\"Token for retrieving the next page of results\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_spam_trash\",\n            display_name=\"Include messages from Spam/Trash\",\n            info=\"Include messages from SPAM and TRASH in the results\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"The format to return the message in. Possible values: minimal, full, raw, metadata\",\n            show=False,\n            advanced=True,\n        ),\n        # Contact management fields\n        MessageTextInput(\n            name=\"resource_name\",\n            display_name=\"Resource Name\",\n            info=\"The resource name of the person to provide information about\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"person_fields\",\n            display_name=\"Person fields\",\n            info=\"Fields to return for the person. Multiple fields can be specified by separating them with commas\",\n            show=False,\n            advanced=True,\n        ),\n        # Attachment handling\n        MessageTextInput(\n            name=\"attachment_id\",\n            display_name=\"Attachment ID\",\n            info=\"Id of the attachment\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"file_name\",\n            display_name=\"File name\",\n            info=\"File name of the attachment file\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        FileInput(\n            name=\"attachment\",\n            display_name=\"Add Attachment\",\n            file_types=[\n                \"csv\",\n                \"txt\",\n                \"doc\",\n                \"docx\",\n                \"xls\",\n                \"xlsx\",\n                \"pdf\",\n                \"png\",\n                \"jpg\",\n                \"jpeg\",\n                \"gif\",\n                \"zip\",\n                \"rar\",\n                \"ppt\",\n                \"pptx\",\n            ],\n            info=\"Add an attachment\",\n            show=False,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in [\"cc\", \"bcc\", \"label_ids\"] and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    params[field] = value\n\n            if params.get(\"gmail_user_id\"):\n                params[\"user_id\"] = params.pop(\"gmail_user_id\")\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"data\", {}).get(\"message\", \"{}\")\n                try:\n                    error_data = json.loads(message_str).get(\"error\", {})\n                except json.JSONDecodeError:\n                    error_data = {\"error\": \"Failed to get exact error details\"}\n                return {\n                    \"code\": error_data.get(\"code\"),\n                    \"message\": error_data.get(\"message\"),\n                    \"errors\": error_data.get(\"errors\", []),\n                    \"status\": error_data.get(\"status\"),\n                }\n\n            result_data = result.get(\"data\", {})\n            actions_data = self._actions_data.get(action_key, {})\n            # If 'get_result_field' is True and 'result_field' is specified, extract the data\n            # using 'result_field'. Otherwise, fall back to the entire 'data' field in the response.\n            if actions_data.get(\"get_result_field\") and actions_data.get(\"result_field\"):\n                result_data = result_data.get(actions_data.get(\"result_field\"), result.get(\"data\", []))\n            if len(result_data) != 1 and not actions_data.get(\"result_field\") and actions_data.get(\"get_result_field\"):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            return result_data  # noqa: TRY300\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            \"GMAIL_SEND_EMAIL\",\n            \"GMAIL_FETCH_EMAILS\",\n        }\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "file_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "File name",
                "dynamic": false,
                "info": "File name of the attachment file",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_name",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "format": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Format",
                "dynamic": false,
                "info": "The format to return the message in. Possible values: minimal, full, raw, metadata",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "format",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "gmail_user_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "User ID",
                "dynamic": false,
                "info": "The user's email address or 'me' for the authenticated user",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "gmail_user_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_spam_trash": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include messages from Spam/Trash",
                "dynamic": false,
                "info": "Include messages from SPAM and TRASH in the results",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_spam_trash",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "is_html": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Is HTML",
                "dynamic": false,
                "info": "Specify whether the email body contains HTML content (true/false)",
                "list": false,
                "list_add_label": "Add More",
                "name": "is_html",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "label_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Label ID",
                "dynamic": false,
                "info": "The ID of the Gmail label",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_ids": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Label Ids",
                "dynamic": false,
                "info": "Comma-separated list of label IDs to filter messages",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_ids",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_list_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Label List Visibility",
                "dynamic": false,
                "info": "The visibility of the label in the label list in the Gmail web interface",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_list_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Label Name",
                "dynamic": false,
                "info": "Name of the Gmail label to create, modify, or filter by",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_name",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of emails to be returned",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_results",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "message_body": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Message Body",
                "dynamic": false,
                "info": "The body content of the message to be sent",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_body",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Message ID",
                "dynamic": false,
                "info": "The ID of the specific email message",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message_list_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Message List Visibility",
                "dynamic": false,
                "info": "The visibility of the label in the message list in the Gmail web interface",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_list_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token for retrieving the next page of results",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "page_token",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "person_fields": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Person fields",
                "dynamic": false,
                "info": "Fields to return for the person. Multiple fields can be specified by separating them with commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "person_fields",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "recipient_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Recipient Email",
                "dynamic": false,
                "info": "Email address of the recipient",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "recipient_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "resource_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Resource Name",
                "dynamic": false,
                "info": "The resource name of the person to provide information about",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "resource_name",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "subject": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Subject",
                "dynamic": false,
                "info": "Subject of the email",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "subject",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "thread_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Thread ID",
                "dynamic": false,
                "info": "The ID of the email thread",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "thread_id",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "GmailAPI"
        },
        "dragging": false,
        "id": "GmailAPI-Yiv6V",
        "measured": {
          "height": 325,
          "width": 320
        },
        "position": {
          "x": -1203.4728482879946,
          "y": 441.65522793566197
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-Py0Vi",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts text using a template.",
            "display_name": "Parser",
            "documentation": "https://docs.langflow.org/components-processing#parser",
            "edited": false,
            "field_order": [
              "input_data",
              "mode",
              "pattern",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "556209520650",
              "module": "langflow.components.processing.parser.ParserComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "group_outputs": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{threadId}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-Py0Vi",
        "measured": {
          "height": 326,
          "width": 320
        },
        "position": {
          "x": -824.5834730114067,
          "y": 250.31292817569698
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-IkaF6",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts text using a template.",
            "display_name": "Parser",
            "documentation": "https://docs.langflow.org/components-processing#parser",
            "edited": false,
            "field_order": [
              "input_data",
              "mode",
              "pattern",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "556209520650",
              "module": "langflow.components.processing.parser.ParserComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "group_outputs": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{messages[0][preview]}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-IkaF6",
        "measured": {
          "height": 326,
          "width": 320
        },
        "position": {
          "x": -820.28458578829,
          "y": 652.2679969251477
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "LanguageModelComponent-pfOpC",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Runs a language model given a specified provider.",
            "display_name": "Language Model",
            "documentation": "https://docs.langflow.org/components-models",
            "edited": false,
            "field_order": [
              "provider",
              "model_name",
              "api_key",
              "input_value",
              "system_message",
              "stream",
              "temperature"
            ],
            "frozen": false,
            "icon": "brain-circuit",
            "last_updated": "2025-08-08T15:26:00.589Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "6ac42a7167a4",
              "keywords": [
                "model",
                "llm",
                "language model",
                "large language model"
              ],
              "module": "langflow.components.models.language_model.LanguageModelComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Model Response",
                "group_outputs": false,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "group_outputs": false,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": null,
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": 0,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "Model Provider API key",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_openai import ChatOpenAI\n\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\nfrom langflow.base.models.google_generative_ai_constants import GOOGLE_GENERATIVE_AI_MODELS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_CHAT_MODEL_NAMES, OPENAI_REASONING_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MultilineInput, SecretStrInput, SliderInput\nfrom langflow.schema.dotdict import dotdict\n\n\nclass LanguageModelComponent(LCModelComponent):\n    display_name = \"Language Model\"\n    description = \"Runs a language model given a specified provider.\"\n    documentation: str = \"https://docs.langflow.org/components-models\"\n    icon = \"brain-circuit\"\n    category = \"models\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Model Provider\",\n            options=[\"OpenAI\", \"Anthropic\", \"Google\"],\n            value=\"OpenAI\",\n            info=\"Select the model provider\",\n            real_time_refresh=True,\n            options_metadata=[{\"icon\": \"OpenAI\"}, {\"icon\": \"Anthropic\"}, {\"icon\": \"GoogleGenerativeAI\"}],\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_CHAT_MODEL_NAMES[0],\n            info=\"Select the model to use\",\n            real_time_refresh=True,\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"Model Provider API key\",\n            required=False,\n            show=True,\n            real_time_refresh=True,\n        ),\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"The input text to send to the model\",\n        ),\n        MultilineInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"A system message that helps set the behavior of the assistant\",\n            advanced=False,\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=\"Whether to stream the response\",\n            value=False,\n            advanced=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            info=\"Controls randomness in responses\",\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        provider = self.provider\n        model_name = self.model_name\n        temperature = self.temperature\n        stream = self.stream\n\n        if provider == \"OpenAI\":\n            if not self.api_key:\n                msg = \"OpenAI API key is required when using OpenAI provider\"\n                raise ValueError(msg)\n\n            if model_name in OPENAI_REASONING_MODEL_NAMES:\n                # reasoning models do not support temperature (yet)\n                temperature = None\n\n            return ChatOpenAI(\n                model_name=model_name,\n                temperature=temperature,\n                streaming=stream,\n                openai_api_key=self.api_key,\n            )\n        if provider == \"Anthropic\":\n            if not self.api_key:\n                msg = \"Anthropic API key is required when using Anthropic provider\"\n                raise ValueError(msg)\n            return ChatAnthropic(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                anthropic_api_key=self.api_key,\n            )\n        if provider == \"Google\":\n            if not self.api_key:\n                msg = \"Google API key is required when using Google provider\"\n                raise ValueError(msg)\n            return ChatGoogleGenerativeAI(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                google_api_key=self.api_key,\n            )\n        msg = f\"Unknown provider: {provider}\"\n        raise ValueError(msg)\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name == \"provider\":\n            if field_value == \"OpenAI\":\n                build_config[\"model_name\"][\"options\"] = OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES\n                build_config[\"model_name\"][\"value\"] = OPENAI_CHAT_MODEL_NAMES[0]\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\n            elif field_value == \"Anthropic\":\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\n            elif field_value == \"Google\":\n                build_config[\"model_name\"][\"options\"] = GOOGLE_GENERATIVE_AI_MODELS\n                build_config[\"model_name\"][\"value\"] = GOOGLE_GENERATIVE_AI_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Google API Key\"\n        elif field_name == \"model_name\" and field_value.startswith(\"o1\") and self.provider == \"OpenAI\":\n            # Hide system_message for o1 models - currently unsupported\n            if \"system_message\" in build_config:\n                build_config[\"system_message\"][\"show\"] = False\n        elif field_name == \"model_name\" and not field_value.startswith(\"o1\") and \"system_message\" in build_config:\n            build_config[\"system_message\"][\"show\"] = True\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input text to send to the model",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "Select the model to use",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1"
              },
              "provider": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "Select the model provider",
                "name": "provider",
                "options": [
                  "OpenAI",
                  "Anthropic",
                  "Google"
                ],
                "options_metadata": [
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Whether to stream the response",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "A system message that helps set the behavior of the assistant",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Format the text and if it is error or Issue or bug reported by user, add \"Category: Issue\" in the end"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness in responses",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              }
            },
            "tool_mode": false
          },
          "selected_output": "text_output",
          "showNode": true,
          "type": "LanguageModelComponent"
        },
        "dragging": false,
        "id": "LanguageModelComponent-pfOpC",
        "measured": {
          "height": 530,
          "width": 320
        },
        "position": {
          "x": -438.9453840357237,
          "y": 274.21553846875526
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ConditionalRouter-VgCCN",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "logic",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "display_name": "If-Else",
            "documentation": "https://docs.langflow.org/components-logic#conditional-router-if-else-component",
            "edited": false,
            "field_order": [
              "input_text",
              "operator",
              "match_text",
              "case_sensitive",
              "true_case_message",
              "false_case_message",
              "max_iterations",
              "default_route"
            ],
            "frozen": false,
            "icon": "split",
            "key": "ConditionalRouter",
            "last_updated": "2025-08-08T15:39:36.492Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "0723360fc97e",
              "module": "langflow.components.logic.conditional_router.ConditionalRouterComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "True",
                "group_outputs": true,
                "method": "true_response",
                "name": "true_result",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "False",
                "group_outputs": true,
                "method": "false_response",
                "name": "false_result",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Case Sensitive",
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "list": false,
                "list_add_label": "Add More",
                "name": "case_sensitive",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    documentation: str = \"https://docs.langflow.org/components-logic#conditional-router-if-else-component\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\n                \"equals\",\n                \"not equals\",\n                \"contains\",\n                \"starts with\",\n                \"ends with\",\n                \"regex\",\n                \"less than\",\n                \"less than or equal\",\n                \"greater than\",\n                \"greater than or equal\",\n            ],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=True,\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"true_case_message\",\n            display_name=\"Case True\",\n            info=\"The message to pass if the condition is True.\",\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"false_case_message\",\n            display_name=\"Case False\",\n            info=\"The message to pass if the condition is False.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\", group_outputs=True),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\", group_outputs=True),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        if operator in [\"less than\", \"less than or equal\", \"greater than\", \"greater than or equal\"]:\n            try:\n                input_num = float(input_text)\n                match_num = float(match_text)\n                if operator == \"less than\":\n                    return input_num < match_num\n                if operator == \"less than or equal\":\n                    return input_num <= match_num\n                if operator == \"greater than\":\n                    return input_num > match_num\n                if operator == \"greater than or equal\":\n                    return input_num >= match_num\n            except ValueError:\n                return False  # Invalid number format for comparison\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n            self.stop(route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if result:\n            self.status = self.true_case_message\n            self.iterate_and_stop_once(\"false_result\")\n            return self.true_case_message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if not result:\n            self.status = self.false_case_message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.false_case_message\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n"
              },
              "default_route": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Default Route",
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "name": "default_route",
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "false_result"
              },
              "false_case_message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Case False",
                "dynamic": false,
                "info": "The message to pass if the condition is False.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "false_case_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "input_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text Input",
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_text",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "match_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Match Text",
                "dynamic": false,
                "info": "The text input to compare against.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "match_text",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Category: Issue"
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "operator": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Operator",
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "name": "operator",
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex",
                  "less than",
                  "less than or equal",
                  "greater than",
                  "greater than or equal"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "contains"
              },
              "true_case_message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Case True",
                "dynamic": false,
                "info": "The message to pass if the condition is True.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "true_case_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ConditionalRouter"
        },
        "dragging": false,
        "id": "ConditionalRouter-VgCCN",
        "measured": {
          "height": 591,
          "width": 320
        },
        "position": {
          "x": -14.09755629748578,
          "y": 61.57553170585089
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ComposioGitHubAPIComponent-73CDf",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "GitHub API",
            "display_name": "GitHub",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "GITHUB_CREATE_AN_ISSUE_owner",
              "GITHUB_CREATE_AN_ISSUE_repo",
              "GITHUB_CREATE_AN_ISSUE_title",
              "GITHUB_CREATE_AN_ISSUE_body",
              "GITHUB_CREATE_AN_ISSUE_assignee",
              "GITHUB_CREATE_AN_ISSUE_milestone",
              "GITHUB_CREATE_AN_ISSUE_labels",
              "GITHUB_CREATE_AN_ISSUE_assignees",
              "GITHUB_LIST_PULL_REQUESTS_owner",
              "GITHUB_LIST_PULL_REQUESTS_repo",
              "GITHUB_LIST_PULL_REQUESTS_state",
              "GITHUB_LIST_PULL_REQUESTS_head",
              "GITHUB_LIST_PULL_REQUESTS_base",
              "GITHUB_LIST_PULL_REQUESTS_sort",
              "GITHUB_LIST_PULL_REQUESTS_direction",
              "GITHUB_LIST_PULL_REQUESTS_per_page",
              "GITHUB_LIST_PULL_REQUESTS_page",
              "GITHUB_CREATE_A_PULL_REQUEST_owner",
              "GITHUB_CREATE_A_PULL_REQUEST_repo",
              "GITHUB_CREATE_A_PULL_REQUEST_title",
              "GITHUB_CREATE_A_PULL_REQUEST_head",
              "GITHUB_CREATE_A_PULL_REQUEST_head_repo",
              "GITHUB_CREATE_A_PULL_REQUEST_base",
              "GITHUB_CREATE_A_PULL_REQUEST_body",
              "GITHUB_CREATE_A_PULL_REQUEST_maintainer_can_modify",
              "GITHUB_CREATE_A_PULL_REQUEST_draft",
              "GITHUB_CREATE_A_PULL_REQUEST_issue",
              "GITHUB_LIST_REPOSITORY_ISSUES_owner",
              "GITHUB_LIST_REPOSITORY_ISSUES_repo",
              "GITHUB_LIST_REPOSITORY_ISSUES_milestone",
              "GITHUB_LIST_REPOSITORY_ISSUES_state",
              "GITHUB_LIST_REPOSITORY_ISSUES_assignee",
              "GITHUB_LIST_REPOSITORY_ISSUES_creator",
              "GITHUB_LIST_REPOSITORY_ISSUES_mentioned",
              "GITHUB_LIST_REPOSITORY_ISSUES_labels",
              "GITHUB_LIST_REPOSITORY_ISSUES_sort",
              "GITHUB_LIST_REPOSITORY_ISSUES_direction",
              "GITHUB_LIST_REPOSITORY_ISSUES_since",
              "GITHUB_LIST_REPOSITORY_ISSUES_per_page",
              "GITHUB_LIST_REPOSITORY_ISSUES_page",
              "GITHUB_LIST_BRANCHES_owner",
              "GITHUB_LIST_BRANCHES_repo",
              "GITHUB_LIST_BRANCHES_protected",
              "GITHUB_LIST_BRANCHES_per_page",
              "GITHUB_LIST_BRANCHES_page",
              "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_owner",
              "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_repo",
              "GITHUB_GET_A_PULL_REQUEST_owner",
              "GITHUB_GET_A_PULL_REQUEST_repo",
              "GITHUB_GET_A_PULL_REQUEST_pull_number",
              "GITHUB_LIST_COMMITS_owner",
              "GITHUB_LIST_COMMITS_repo",
              "GITHUB_LIST_COMMITS_sha",
              "GITHUB_LIST_COMMITS_path",
              "GITHUB_LIST_COMMITS_author",
              "GITHUB_LIST_COMMITS_committer",
              "GITHUB_LIST_COMMITS_since",
              "GITHUB_LIST_COMMITS_until",
              "GITHUB_LIST_COMMITS_per_page",
              "GITHUB_LIST_COMMITS_page"
            ],
            "frozen": false,
            "icon": "Github",
            "last_updated": "2025-08-08T15:47:31.715Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "code_hash": "f73244f1e01f",
              "module": "langflow.components.composio.github_composio.ComposioGitHubAPIComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "group_outputs": false,
                "method": "as_dataframe",
                "name": "dataFrame",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "GITHUB_CREATE_AN_ISSUE_assignee": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Assignee",
                "dynamic": false,
                "info": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_assignee",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_AN_ISSUE_assignees": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Assignees",
                "dynamic": false,
                "info": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_assignees",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_AN_ISSUE_body": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Body",
                "dynamic": false,
                "info": "The contents of the issue.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_body",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_AN_ISSUE_labels": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Labels",
                "dynamic": false,
                "info": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_labels",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_AN_ISSUE_milestone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Milestone",
                "dynamic": false,
                "info": "Milestone",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_milestone",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_AN_ISSUE_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_owner",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Uday-sidagana"
              },
              "GITHUB_CREATE_AN_ISSUE_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_repo",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Slackbot-send-message-reminder-bot"
              },
              "GITHUB_CREATE_AN_ISSUE_title": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title",
                "dynamic": false,
                "info": "The title of the issue.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_AN_ISSUE_title",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Issue from Email"
              },
              "GITHUB_CREATE_A_PULL_REQUEST_base": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Base",
                "dynamic": false,
                "info": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_base",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_body": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Body",
                "dynamic": false,
                "info": "The contents of the pull request.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_body",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_draft": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Draft",
                "dynamic": false,
                "info": "Indicates whether the pull request is a draft",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_CREATE_A_PULL_REQUEST_draft",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GITHUB_CREATE_A_PULL_REQUEST_head": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Head",
                "dynamic": false,
                "info": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_head",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_head_repo": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Head Repo",
                "dynamic": false,
                "info": "The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_head_repo",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_issue": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Issue",
                "dynamic": false,
                "info": "An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified. ",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_CREATE_A_PULL_REQUEST_issue",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_maintainer_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Maintainer Can Modify",
                "dynamic": false,
                "info": "Indicates whether maintainers can modify the pull request",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_CREATE_A_PULL_REQUEST_maintainer_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GITHUB_CREATE_A_PULL_REQUEST_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_CREATE_A_PULL_REQUEST_title": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title",
                "dynamic": false,
                "info": "The title of the new pull request. Required unless `issue` is specified.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_CREATE_A_PULL_REQUEST_title",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_GET_A_PULL_REQUEST_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_GET_A_PULL_REQUEST_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_GET_A_PULL_REQUEST_pull_number": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Pull Number",
                "dynamic": false,
                "info": "The number that identifies the pull request.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_GET_A_PULL_REQUEST_pull_number",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GITHUB_GET_A_PULL_REQUEST_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_GET_A_PULL_REQUEST_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_BRANCHES_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_BRANCHES_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_BRANCHES_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Page",
                "dynamic": false,
                "info": "The page number of the results to fetch",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_BRANCHES_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_BRANCHES_per_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Per Page",
                "dynamic": false,
                "info": "The number of results per page (max 100)",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_BRANCHES_per_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GITHUB_LIST_BRANCHES_protected": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Protected",
                "dynamic": false,
                "info": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_BRANCHES_protected",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GITHUB_LIST_BRANCHES_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_BRANCHES_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_author": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Author",
                "dynamic": false,
                "info": "GitHub username or email address to use to filter by commit author.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_author",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_committer": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Committer",
                "dynamic": false,
                "info": "GitHub username or email address to use to filter by commit committer.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_committer",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Page",
                "dynamic": false,
                "info": "The page number of the results to fetch",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_COMMITS_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_COMMITS_path": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Path",
                "dynamic": false,
                "info": "Only commits containing this file path will be returned.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_path",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_per_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Per Page",
                "dynamic": false,
                "info": "The number of results per page (max 100)",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_COMMITS_per_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_COMMITS_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_sha": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "SHA",
                "dynamic": false,
                "info": "SHA or branch to start listing commits from. Default: the repository's default branch (usually `main`). ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_sha",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_since": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Since",
                "dynamic": false,
                "info": "Only show results that were last updated after the given time. This is a timestamp in ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_since",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_COMMITS_until": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Until",
                "dynamic": false,
                "info": "Only commits before this date will be returned. This is a timestamp in ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_COMMITS_until",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_PULL_REQUESTS_base": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Base",
                "dynamic": false,
                "info": "Filter pulls by base branch name. Example: `gh-pages`.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_base",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_PULL_REQUESTS_direction": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Direction",
                "dynamic": false,
                "info": "The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_direction",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_PULL_REQUESTS_head": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Head",
                "dynamic": false,
                "info": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_head",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_PULL_REQUESTS_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_PULL_REQUESTS_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Page",
                "dynamic": false,
                "info": "The page number of the results to fetch",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_PULL_REQUESTS_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_PULL_REQUESTS_per_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Per Page",
                "dynamic": false,
                "info": "The number of results per page (max 100)",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_PULL_REQUESTS_per_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_PULL_REQUESTS_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_PULL_REQUESTS_sort": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sort",
                "dynamic": false,
                "info": "What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_sort",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "created"
              },
              "GITHUB_LIST_PULL_REQUESTS_state": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "State",
                "dynamic": false,
                "info": "Either `open`, `closed`, or `all` to filter by state.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_PULL_REQUESTS_state",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "open"
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_assignee": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Assignee",
                "dynamic": false,
                "info": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_assignee",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_creator": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Creator",
                "dynamic": false,
                "info": "The user that created the issue.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_creator",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_direction": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Direction",
                "dynamic": false,
                "info": "The direction to sort the results by",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_direction",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "desc"
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_labels": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Labels",
                "dynamic": false,
                "info": "A list of comma separated label names. Example: `bug,ui,@high`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_labels",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_mentioned": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Mentioned",
                "dynamic": false,
                "info": "A user that's mentioned in the issue.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_mentioned",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_milestone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Milestone",
                "dynamic": false,
                "info": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_milestone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Page",
                "dynamic": false,
                "info": "The page number of the results to fetch",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_per_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Per Page",
                "dynamic": false,
                "info": "The number of results per page (max 100)",
                "list": false,
                "list_add_label": "Add More",
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_per_page",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_since": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Since",
                "dynamic": false,
                "info": "Only show results that were last updated after the given time. This is a timestamp in ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. ",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_since",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_sort": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sort",
                "dynamic": false,
                "info": "What to sort results by",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_sort",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "created"
              },
              "GITHUB_LIST_REPOSITORY_ISSUES_state": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "State",
                "dynamic": false,
                "info": "Indicates the state of the issues to return.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_LIST_REPOSITORY_ISSUES_state",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "open"
              },
              "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Owner",
                "dynamic": false,
                "info": "The account owner of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_owner",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_repo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Repo",
                "dynamic": false,
                "info": "The name of the repository. The name is not case sensitive.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_repo",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GITHUB_CREATE_A_PULL_REQUEST",
                    "name": "Create A Pull Request"
                  },
                  {
                    "metadata": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                    "name": "Star A Repository"
                  },
                  {
                    "metadata": "GITHUB_LIST_COMMITS",
                    "name": "List Commits"
                  },
                  {
                    "metadata": "GITHUB_GET_A_PULL_REQUEST",
                    "name": "Get A Pull Request"
                  },
                  {
                    "metadata": "GITHUB_CREATE_AN_ISSUE",
                    "name": "Create An Issue"
                  },
                  {
                    "metadata": "GITHUB_LIST_REPOSITORY_ISSUES",
                    "name": "List Repository Issues"
                  },
                  {
                    "metadata": "GITHUB_LIST_BRANCHES",
                    "name": "List Branches"
                  },
                  {
                    "metadata": "GITHUB_LIST_PULL_REQUESTS",
                    "name": "List Pull Requests"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": [
                  {
                    "chosen": false,
                    "name": "Create An Issue",
                    "selected": false
                  }
                ]
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGitHubAPIComponent(ComposioBaseComponent):\n    \"\"\"GitHub API component for interacting with GitHub services.\"\"\"\n\n    display_name: str = \"GitHub\"\n    description: str = \"GitHub API\"\n    icon = \"Github\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"github\"\n\n    # GitHub-specific actions\n    _actions_data: dict = {\n        \"GITHUB_CREATE_A_PULL_REQUEST\": {\n            \"display_name\": \"Create A Pull Request\",\n            \"action_fields\": [\n                \"GITHUB_CREATE_A_PULL_REQUEST_owner\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_repo\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_title\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_head\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_head_repo\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_base\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_body\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_maintainer_can_modify\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_draft\",\n                \"GITHUB_CREATE_A_PULL_REQUEST_issue\",\n            ],\n        },\n        \"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\": {\n            \"display_name\": \"Star A Repository\",\n            \"action_fields\": [\n                \"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_owner\",\n                \"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_repo\",\n            ],\n        },\n        \"GITHUB_LIST_COMMITS\": {\n            \"display_name\": \"List Commits\",\n            \"action_fields\": [\n                \"GITHUB_LIST_COMMITS_owner\",\n                \"GITHUB_LIST_COMMITS_repo\",\n                \"GITHUB_LIST_COMMITS_sha\",\n                \"GITHUB_LIST_COMMITS_path\",\n                \"GITHUB_LIST_COMMITS_author\",\n                \"GITHUB_LIST_COMMITS_committer\",\n                \"GITHUB_LIST_COMMITS_since\",\n                \"GITHUB_LIST_COMMITS_until\",\n                \"GITHUB_LIST_COMMITS_per_page\",\n                \"GITHUB_LIST_COMMITS_page\",\n            ],\n        },\n        \"GITHUB_GET_A_PULL_REQUEST\": {\n            \"display_name\": \"Get A Pull Request\",\n            \"action_fields\": [\n                \"GITHUB_GET_A_PULL_REQUEST_owner\",\n                \"GITHUB_GET_A_PULL_REQUEST_repo\",\n                \"GITHUB_GET_A_PULL_REQUEST_pull_number\",\n            ],\n        },\n        \"GITHUB_CREATE_AN_ISSUE\": {\n            \"display_name\": \"Create An Issue\",\n            \"action_fields\": [\n                \"GITHUB_CREATE_AN_ISSUE_owner\",\n                \"GITHUB_CREATE_AN_ISSUE_repo\",\n                \"GITHUB_CREATE_AN_ISSUE_title\",\n                \"GITHUB_CREATE_AN_ISSUE_body\",\n                \"GITHUB_CREATE_AN_ISSUE_assignee\",\n                \"GITHUB_CREATE_AN_ISSUE_milestone\",\n                \"GITHUB_CREATE_AN_ISSUE_labels\",\n                \"GITHUB_CREATE_AN_ISSUE_assignees\",\n            ],\n        },\n        \"GITHUB_LIST_REPOSITORY_ISSUES\": {\n            \"display_name\": \"List Repository Issues\",\n            \"action_fields\": [\n                \"GITHUB_LIST_REPOSITORY_ISSUES_owner\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_repo\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_milestone\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_state\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_assignee\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_creator\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_mentioned\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_labels\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_sort\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_direction\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_since\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_per_page\",\n                \"GITHUB_LIST_REPOSITORY_ISSUES_page\",\n            ],\n        },\n        \"GITHUB_LIST_BRANCHES\": {\n            \"display_name\": \"List Branches\",\n            \"action_fields\": [\n                \"GITHUB_LIST_BRANCHES_owner\",\n                \"GITHUB_LIST_BRANCHES_repo\",\n                \"GITHUB_LIST_BRANCHES_protected\",\n                \"GITHUB_LIST_BRANCHES_per_page\",\n                \"GITHUB_LIST_BRANCHES_page\",\n            ],\n        },\n        \"GITHUB_LIST_PULL_REQUESTS\": {\n            \"display_name\": \"List Pull Requests\",\n            \"action_fields\": [\n                \"GITHUB_LIST_PULL_REQUESTS_owner\",\n                \"GITHUB_LIST_PULL_REQUESTS_repo\",\n                \"GITHUB_LIST_PULL_REQUESTS_state\",\n                \"GITHUB_LIST_PULL_REQUESTS_head\",\n                \"GITHUB_LIST_PULL_REQUESTS_base\",\n                \"GITHUB_LIST_PULL_REQUESTS_sort\",\n                \"GITHUB_LIST_PULL_REQUESTS_direction\",\n                \"GITHUB_LIST_PULL_REQUESTS_per_page\",\n                \"GITHUB_LIST_PULL_REQUESTS_page\",\n            ],\n        },\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"GITHUB_CREATE_A_PULL_REQUEST_maintainer_can_modify\",\n        \"GITHUB_CREATE_A_PULL_REQUEST_draft\",\n        \"GITHUB_LIST_BRANCHES_protected\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_title\",\n            display_name=\"Title\",\n            info=\"The title of the issue.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_body\",\n            display_name=\"Body\",\n            info=\"The contents of the issue.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_assignee\",\n            display_name=\"Assignee\",\n            info=\"Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_milestone\",\n            display_name=\"Milestone\",\n            info=\"Milestone\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_labels\",\n            display_name=\"Labels\",\n            info=\"Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_AN_ISSUE_assignees\",\n            display_name=\"Assignees\",\n            info=\"Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_state\",\n            display_name=\"State\",\n            info=\"Either `open`, `closed`, or `all` to filter by state.\",\n            show=False,\n            value=\"open\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_head\",\n            display_name=\"Head\",\n            info=\"Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_base\",\n            display_name=\"Base\",\n            info=\"Filter pulls by base branch name. Example: `gh-pages`.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_sort\",\n            display_name=\"Sort\",\n            info=\"What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. \",  # noqa: E501\n            show=False,\n            value=\"created\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_direction\",\n            display_name=\"Direction\",\n            info=\"The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_per_page\",\n            display_name=\"Per Page\",\n            info=\"The number of results per page (max 100)\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_PULL_REQUESTS_page\",\n            display_name=\"Page\",\n            info=\"The page number of the results to fetch\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_title\",\n            display_name=\"Title\",\n            info=\"The title of the new pull request. Required unless `issue` is specified.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_head\",\n            display_name=\"Head\",\n            info=\"The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. \",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_head_repo\",\n            display_name=\"Head Repo\",\n            info=\"The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_base\",\n            display_name=\"Base\",\n            info=\"The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. \",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_body\",\n            display_name=\"Body\",\n            info=\"The contents of the pull request.\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_maintainer_can_modify\",\n            display_name=\"Maintainer Can Modify\",\n            info=\"Indicates whether maintainers can modify the pull request\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_draft\",\n            display_name=\"Draft\",\n            info=\"Indicates whether the pull request is a draft\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_CREATE_A_PULL_REQUEST_issue\",\n            display_name=\"Issue\",\n            info=\"An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_milestone\",\n            display_name=\"Milestone\",\n            info=\"If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_state\",\n            display_name=\"State\",\n            info=\"Indicates the state of the issues to return.\",\n            show=False,\n            value=\"open\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_assignee\",\n            display_name=\"Assignee\",\n            info=\"Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_creator\",\n            display_name=\"Creator\",\n            info=\"The user that created the issue.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_mentioned\",\n            display_name=\"Mentioned\",\n            info=\"A user that's mentioned in the issue.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_labels\",\n            display_name=\"Labels\",\n            info=\"A list of comma separated label names. Example: `bug,ui,@high`\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_sort\",\n            display_name=\"Sort\",\n            info=\"What to sort results by\",\n            show=False,\n            value=\"created\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_direction\",\n            display_name=\"Direction\",\n            info=\"The direction to sort the results by\",\n            show=False,\n            value=\"desc\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_since\",\n            display_name=\"Since\",\n            info=\"Only show results that were last updated after the given time. This is a timestamp in ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_per_page\",\n            display_name=\"Per Page\",\n            info=\"The number of results per page (max 100)\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_REPOSITORY_ISSUES_page\",\n            display_name=\"Page\",\n            info=\"The page number of the results to fetch\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_BRANCHES_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_BRANCHES_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        BoolInput(\n            name=\"GITHUB_LIST_BRANCHES_protected\",\n            display_name=\"Protected\",\n            info=\"Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches\",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_BRANCHES_per_page\",\n            display_name=\"Per Page\",\n            info=\"The number of results per page (max 100)\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_BRANCHES_page\",\n            display_name=\"Page\",\n            info=\"The page number of the results to fetch\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_GET_A_PULL_REQUEST_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_GET_A_PULL_REQUEST_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GITHUB_GET_A_PULL_REQUEST_pull_number\",\n            display_name=\"Pull Number\",\n            info=\"The number that identifies the pull request.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_owner\",\n            display_name=\"Owner\",\n            info=\"The account owner of the repository. The name is not case sensitive.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_repo\",\n            display_name=\"Repo\",\n            info=\"The name of the repository. The name is not case sensitive. \",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_sha\",\n            display_name=\"SHA\",\n            info=\"SHA or branch to start listing commits from. Default: the repository's default branch (usually `main`). \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_path\",\n            display_name=\"Path\",\n            info=\"Only commits containing this file path will be returned.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_author\",\n            display_name=\"Author\",\n            info=\"GitHub username or email address to use to filter by commit author.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_committer\",\n            display_name=\"Committer\",\n            info=\"GitHub username or email address to use to filter by commit committer.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_since\",\n            display_name=\"Since\",\n            info=\"Only show results that were last updated after the given time. This is a timestamp in ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GITHUB_LIST_COMMITS_until\",\n            display_name=\"Until\",\n            info=\"Only commits before this date will be returned. This is a timestamp in ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_COMMITS_per_page\",\n            display_name=\"Per Page\",\n            info=\"The number of results per page (max 100)\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GITHUB_LIST_COMMITS_page\",\n            display_name=\"Page\",\n            info=\"The page number of the results to fetch\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if (\n                        field\n                        in [\n                            \"GITHUB_CREATE_AN_ISSUE_labels\",\n                            \"GITHUB_CREATE_AN_ISSUE_assignees\",\n                            \"GITHUB_LIST_REPOSITORY_ISSUES_labels\",\n                        ]\n                        and value\n                    ):\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                try:\n                    message_str = result.get(\"error\", {})\n                    error_message = message_str.split(\"`\")[1]\n                    error_msg_json = json.loads(error_message)\n                except (IndexError, json.JSONDecodeError):\n                    return {\"error\": str(message_str)}\n                return {\n                    \"code\": error_msg_json.get(\"status\"),\n                    \"message\": error_msg_json.get(\"message\"),\n                    \"documentation_url\": error_msg_json.get(\"documentation_url\"),\n                }\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            if isinstance(result_data.get(\"details\"), list):\n                return result_data.get(\"details\")\n            return result_data  # noqa: TRY300\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            self.sanitize_action_name(\"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\").replace(\" \", \"-\"),\n            self.sanitize_action_name(\"GITHUB_CREATE_A_PULL_REQUEST\").replace(\" \", \"-\"),\n        }\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ComposioGitHubAPIComponent"
        },
        "dragging": false,
        "id": "ComposioGitHubAPIComponent-73CDf",
        "measured": {
          "height": 601,
          "width": 320
        },
        "position": {
          "x": 347.3790177820866,
          "y": -79.8557761654993
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-VqXAQ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends text output via API.",
            "display_name": "Text Output",
            "documentation": "https://docs.langflow.org/components-io#text-output",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "metadata": {
              "code_hash": "2329aa44aa37",
              "module": "langflow.components.input_output.text_output.TextOutputComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Sends text output via API.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-VqXAQ",
        "measured": {
          "height": 201,
          "width": 320
        },
        "position": {
          "x": 346.1646382297514,
          "y": 617.4145249007455
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-z7a2U",
          "node": {
            "description": "This workflow automatically creates a GitHub issue if a recent Gmail message contains a bug, error, or user-reported issue. It fetches the latest email, extracts the thread ID, analyzes the content with Agent and creates an issue if relevant.\n",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note"
        },
        "dragging": false,
        "height": 324,
        "id": "note-z7a2U",
        "measured": {
          "height": 324,
          "width": 324
        },
        "position": {
          "x": -1575.1514598239273,
          "y": -202.57186691772566
        },
        "resizing": false,
        "selected": true,
        "type": "noteNode",
        "width": 324
      }
    ],
    "viewport": {
      "x": 799.8811785767206,
      "y": 198.90243418684776,
      "zoom": 0.4774603768699203
    }
  },
  "description": "Automatically creates GitHub issues from Gmail messages containing bugs or errors. Analyzes email content and creates relevant issues when needed.",
  "endpoint_name": null,
  "id": "49da148e-cd10-4c72-8d0f-4842f0a47484",
  "is_component": false,
  "last_tested_version": "1.5.0.post1",
  "name": "Gmail Issue Creator",
  "tags": ["agents", "assistants"]
}