{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-3jXse",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "medical_history",
            "id": "PriorAuthRecommendation-mX7JT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-3jXse{œdataTypeœ:œTextInputœ,œidœ:œTextInput-3jXseœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PriorAuthRecommendation-mX7JT{œfieldNameœ:œmedical_historyœ,œidœ:œPriorAuthRecommendation-mX7JTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "TextInput-3jXse",
        "sourceHandle": "{œdataTypeœ: œTextInputœ, œidœ: œTextInput-3jXseœ, œnameœ: œtextœ, œoutput_typesœ: [œMessageœ]}",
        "target": "PriorAuthRecommendation-mX7JT",
        "targetHandle": "{œfieldNameœ: œmedical_historyœ, œidœ: œPriorAuthRecommendation-mX7JTœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-FnZrD",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "guidelines",
            "id": "PriorAuthRecommendation-mX7JT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-FnZrD{œdataTypeœ:œTextInputœ,œidœ:œTextInput-FnZrDœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PriorAuthRecommendation-mX7JT{œfieldNameœ:œguidelinesœ,œidœ:œPriorAuthRecommendation-mX7JTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "TextInput-FnZrD",
        "sourceHandle": "{œdataTypeœ: œTextInputœ, œidœ: œTextInput-FnZrDœ, œnameœ: œtextœ, œoutput_typesœ: [œMessageœ]}",
        "target": "PriorAuthRecommendation-mX7JT",
        "targetHandle": "{œfieldNameœ: œguidelinesœ, œidœ: œPriorAuthRecommendation-mX7JTœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "PriorAuthRecommendation",
            "id": "PriorAuthRecommendation-mX7JT",
            "name": "recommendation",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "JSONOutput-czbaR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__PriorAuthRecommendation-mX7JT{œdataTypeœ:œPriorAuthRecommendationœ,œidœ:œPriorAuthRecommendation-mX7JTœ,œnameœ:œrecommendationœ,œoutput_typesœ:[œDataœ]}-JSONOutput-czbaR{œfieldNameœ:œdataœ,œidœ:œJSONOutput-czbaRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "source": "PriorAuthRecommendation-mX7JT",
        "sourceHandle": "{œdataTypeœ: œPriorAuthRecommendationœ, œidœ: œPriorAuthRecommendation-mX7JTœ, œnameœ: œrecommendationœ, œoutput_typesœ: [œDataœ]}",
        "target": "JSONOutput-czbaR",
        "targetHandle": "{œfieldNameœ: œdataœ, œidœ: œJSONOutput-czbaRœ, œinputTypesœ: [œDataœ], œtypeœ: œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "PriorAuthRecommendation-mX7JT",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate recommendations based on guidelines and medical history",
            "display_name": "Prior Auth Recommendation",
            "documentation": "https://docs.example.com/prior-auth",
            "edited": false,
            "field_order": [
              "medical_history",
              "guidelines"
            ],
            "frozen": false,
            "icon": "Autonomize",
            "legacy": false,
            "metadata": {
              "code_hash": "f315b1538b83",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "lfx",
                    "version": null
                  },
                  {
                    "name": "loguru",
                    "version": "0.7.3"
                  },
                  {
                    "name": "langflow",
                    "version": null
                  }
                ],
                "total_dependencies": 3
              },
              "module": "lfx.components.processing.prior_auth_recommendation.PriorAuthRecommendation"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Recommendation",
                "group_outputs": false,
                "method": "build_output",
                "name": "recommendation",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom lfx.io import MultilineInput, Output\nfrom lfx.schema.data import Data\nfrom loguru import logger\n\nfrom lfx.base.modelhub import ATModelComponent\nfrom langflow.custom.genesis.services.deps import get_rag_service\n\n\nclass PriorAuthRecommendation(ATModelComponent):\n    \"\"\"Component for generating prior authorization recommendations\"\"\"\n\n    display_name: str = \"Prior Auth Recommendation\"\n    description: str = (\n        \"Generate recommendations based on guidelines and medical history\"\n    )\n    documentation: str = \"https://docs.example.com/prior-auth\"\n    icon: str = \"Autonomize\"\n    name: str = \"PriorAuthRecommendation\"\n\n    inputs = [\n        MultilineInput(\n            name=\"medical_history\",\n            display_name=\"Medical History\",\n            value=\"\",\n            info=\"The medical history of the patient.\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"guidelines\",\n            display_name=\"Guidelines\",\n            value=\"\",\n            info=\"The guidelines to follow for the recommendation.\",\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"recommendation\", display_name=\"Recommendation\", method=\"build_output\"\n        )\n    ]\n\n    async def generate_recommendation(\n        self, medical_history: str, guidelines: str\n    ) -> Any:\n        \"\"\"Generate recommendation using the RAG service\"\"\"\n        try:\n            logger.debug(f\"Medical History: {medical_history}\")\n            logger.debug(f\"Guidelines: {guidelines}\")\n\n            payload = {\"medical_history\": medical_history, \"guidelines\": [guidelines]}\n            response = await get_rag_service().generate_guideline_adjudication_summary(\n                payload\n            )\n            return response\n        except Exception as e:\n            logger.error(f\"Error generating recommendation: {e!s}\")\n            raise ValueError(f\"Failed to generate recommendation: {e!s}\") from e\n\n    async def build_output(self) -> Data:\n        \"\"\"Generate the output recommendation\"\"\"\n        recommendation = await self.generate_recommendation(\n            medical_history=self.medical_history, guidelines=self.guidelines\n        )\n        data = Data(value=recommendation)\n        self.status = data\n        return data\n"
              },
              "guidelines": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Guidelines",
                "dynamic": false,
                "info": "The guidelines to follow for the recommendation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "guidelines",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "medical_history": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Medical History",
                "dynamic": false,
                "info": "The medical history of the patient.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "medical_history",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "PriorAuthRecommendation"
        },
        "dragging": false,
        "id": "PriorAuthRecommendation-mX7JT",
        "measured": {
          "height": 340,
          "width": 320
        },
        "position": {
          "x": 581,
          "y": 137
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-FnZrD",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "inputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Guidelines",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextInput",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {
              "code_hash": "3dd28ea591b9",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "lfx",
                    "version": null
                  }
                ],
                "total_dependencies": 1
              },
              "module": "lfx.components.input_output.text.TextInputComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.000045030081906763545,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from lfx.base.io.text import TextComponent\nfrom lfx.io import MultilineInput, Output\nfrom lfx.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Pediatric Acute Abdominal Pain: In children, CT is necessary when ultrasound is nondiagnostic or unavailable. It aids in emergent situations like peritonitis, offering a faster diagnosis when immediate imaging is crucial for a surgical abdomen."
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-FnZrD",
        "measured": {
          "height": 234,
          "width": 320
        },
        "position": {
          "x": 99.80951966008732,
          "y": 362.2997176626368
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-3jXse",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "inputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Medical History",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextInput",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {
              "code_hash": "3dd28ea591b9",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "lfx",
                    "version": null
                  }
                ],
                "total_dependencies": 1
              },
              "module": "lfx.components.input_output.text.TextInputComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.000045030081906763545,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from lfx.base.io.text import TextComponent\nfrom lfx.io import MultilineInput, Output\nfrom lfx.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Patient Name: Jane Smith   Date of Birth: 04/12/1982    **Condition:**   - Diagnosed with unspecified upper abdominal pain (ICD-10 Code: R10.10) [c5f7dd50-3281-4061-b0f4-561eb499812e].  **Diagnostic Procedure Ordered:**   - A CT scan of the abdomen and pelvis with contrast material [c5f7dd50-3281-4061-b0f4-561eb499812e].  **Purpose and Necessity:**   - The imaging procedure is intended to investigate the underlying cause of the unspecified upper abdominal pain, providing detailed internal images that can help in identifying any abnormalities or conditions that may not be visible through a physical examination or other non-invasive methods.   **Administrative Details:**   - A prior authorization request is required for this procedure, highlighting the necessity for comprehensive supporting documentation [2ce2f7d3-18e0-49e4-8891-08f9bae96f96]. This documentation must verify the medical necessity of the CT scan and should include detailed procedural information and provider-specific details [1a376213-af76-4e31-b0b9-eca1b9c856f7].   - The emphasis is placed on the legibility and completeness of these documents to ensure successful authorization and avoid delays in the elective/routine service [2ce2f7d3-18e0-49e4-8891-08f9bae96f96].  **Service Categorization:**   - The CT scan is categorized as an elective/routine service, suggesting that while it is necessary for diagnosis, it is not required on an emergency basis [2ce2f7d3-18e0-49e4-8891-08f9bae96f96]. This category implies that the procedure will be scheduled at a convenient time, subject to insurance approval and authorization processes.   In summary, this case involves patient Jane Smith, who is experiencing unspecified upper abdominal pain, necessitating a thorough investigation through a CT scan. The successful processing of a prior authorization form, backed by adequate documentation, is crucial for proceeding with the CT scan as part of an elective/routine diagnostic approach."
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-3jXse",
        "measured": {
          "height": 234,
          "width": 320
        },
        "position": {
          "x": 62.07841597960396,
          "y": -4.267301666732138
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "JSONOutput-czbaR",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display input data as JSON in the Playground.",
            "display_name": "JSON Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "pretty_print"
            ],
            "frozen": false,
            "icon": "Braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "JSON",
                "method": "json_response",
                "name": "json",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.inputs import DataInput\nfrom langflow.io import BoolInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass JSONOutputComponent(TextComponent):\n    display_name = \"JSON Output\"\n    description = \"Display input data as JSON in the Playground.\"\n    icon = \"Braces\"\n    name = \"JSONOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to JSON.\",\n            is_list=True,\n        ),\n        BoolInput(\n            name=\"pretty_print\",\n            display_name=\"Pretty Print\",\n            info=\"Format JSON with proper indentation\",\n            value=True,\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"JSON\", name=\"json\", method=\"json_response\"),\n    ]\n\n    def _process_data(self, data: Data | list[Data]) -> dict | list:\n        \"\"\"Convert Data object(s) to dictionary/list format.\"\"\"\n        if isinstance(data, list):\n            return [item.dict() for item in data]\n        return data.dict()\n\n    def json_response(self) -> Message:\n        try:\n            # Process the Data input\n            processed_data = self._process_data(self.data)\n\n            # Convert to JSON string with optional pretty printing\n            if self.pretty_print:\n                formatted_json = json.dumps(\n                    processed_data, indent=2, ensure_ascii=False\n                )\n            else:\n                formatted_json = json.dumps(processed_data, ensure_ascii=False)\n\n            message = Message(text=formatted_json)\n            self.status = formatted_json\n            return message\n\n        except Exception as e:\n            error_message = f\"Error processing data to JSON: {e!s}\"\n            message = Message(text=error_message)\n            self.status = error_message\n            return message\n"
              },
              "data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to JSON.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "pretty_print": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Pretty Print",
                "dynamic": false,
                "info": "Format JSON with proper indentation",
                "list": false,
                "name": "pretty_print",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "JSONOutput"
        },
        "dragging": false,
        "id": "JSONOutput-czbaR",
        "measured": {
          "height": 196,
          "width": 320
        },
        "position": {
          "x": 985.4490998771804,
          "y": 187.97410751566917
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 2.957203798236037,
      "y": 97.64317870187034,
      "zoom": 0.7720442406356132
    }
  },
  "description": "Provide recommendations on prior authorization approvals based on the adjudication, streamlining decision-making and ensuring compliance with payer requirements.",
  "endpoint_name": null,
  "id": "60eafe9c-19b2-4438-aee0-296ae1fe297b",
  "is_component": false,
  "last_tested_version": "1.1.1",
  "name": "Prior Auth Recommendation Agent",
  "tags": [
    "prior-auth"
  ]
}