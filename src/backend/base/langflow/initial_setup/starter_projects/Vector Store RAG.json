{
  "name": "Vector Store RAG",
  "description": "Load your data for chat context with Retrieval Augmented Generation.",
  "id": "e120d90a-3ba4-4f53-a551-8b6d94ccb424",
  "is_component": false,
  "endpoint_name": null,
  "last_tested_version": "1.4.2",
  "tags": [
    "openai",
    "astradb",
    "rag",
    "q-a"
  ],
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-FzOTA",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-FzOTA",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 0,
          "y": 0
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Use a Vector Store as a retriever for information from a document database.",
          "display_name": "Astra DB",
          "id": "AstraDB-BRnBB",
          "node": {
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Use a Vector Store as a retriever for information from a document database.",
            "display_name": "Astra DB",
            "documentation": "",
            "edited": false,
            "field_order": [
              "token",
              "database_name",
              "api_endpoint",
              "collection_name",
              "keyspace",
              "embedding_model",
              "ingest_data",
              "search_query",
              "search_method",
              "number_of_results",
              "reranker",
              "lexical_terms",
              "search_type",
              "search_score_threshold",
              "content_field",
              "autodetect_collection",
              "ignore_invalid_documents",
              "deletion_field",
              "environment",
              "should_cache_vector_store",
              "astradb_vectorstore_kwargs"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "Retriever"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Vector Store",
                "method": "build_vector_store",
                "name": "vector_store",
                "selected": "VectorStore",
                "tool_mode": false,
                "types": [
                  "VectorStore"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Documents",
                "method": "search_documents",
                "name": "documents",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Retriever",
                "method": "get_retriever",
                "name": "retriever",
                "selected": "BaseRetriever",
                "tool_mode": true,
                "types": [
                  "BaseRetriever"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_endpoint": {
                "_input_type": "TextInput",
                "advanced": true,
                "display_name": "API Endpoint",
                "dynamic": false,
                "info": "The API endpoint for the Astra DB instance.",
                "list": false,
                "load_from_db": false,
                "name": "api_endpoint",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "astradb_vectorstore_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Astra DB Vector Store Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the AstraDBVectorStore constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "astradb_vectorstore_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              },
              "autodetect_collection": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Autodetect Collection",
                "dynamic": false,
                "info": "If True, the collection will be automatically detected. If the collec
tion does not exist, it will be created.",
                "list": false,
                "list_add_label": "Add More",
                "name": "autodetect_collection",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "collection_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several seconds for creation to complete.",
                        "display_name": "Create new collection",
                        "field_order": [
                          "01_new_collection_name",
                          "02_embedding_generation_provider",
                          "03_embedding_generation_model",
                          "04_dimension"
                        ],
                        "name": "create_collection",
                        "template": {
                          "01_new_collection_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new collection to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_collection_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_embedding_generation_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding generation method",
                            "dynamic": false,
                            "helper_text": "To create collections with more embedding provider options, go to <a class="underline" href="https://astra.datastax.com/" target="_blank" rel="noopener noreferrer">your database in Astra DB</a>",
                            "info": "Provider to use for generating embeddings.",
                            "name": "embedding_generation_provider",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_embedding_generation_model": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding model",
                            "dynamic": false,
                            "info": "Model to use for generating embeddings.",
                            "name": "embedding_generation_model",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "04_dimension": {
                            "_input_type": "IntInput",
                            "advanced": false,
                            "display_name": "Dimensions",
                            "dynamic": false,
                            "info": "Dimensions of the embeddings to generate.",
                            "list": false,
                            "list_add_label": "Add More",
                            "name": "dimension",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "int"
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Collection",
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "name": "collection_name",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "content_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Content Field",
                "dynamic": false,
                "info": "Field to use as the text content field for the vector store.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "content_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "database_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several minutes for creation to complete.",
                        "display_name": "Create new database",
                        "field_order": [
                          "01_new_database_name",
                          "02_cloud_provider",
                          "03_region"
                        ],
                        "name": "create_database",
                        "template": {
                          "01_new_database_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new database to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_database_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_cloud_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Cloud provider",
                            "dynamic": false,
                            "info": "Cloud provider for the new database.",
                            "name": "cloud_provider",
                            "options": [
                              "Amazon Web Services",
                              "Google Cloud Platform",
                              "Microsoft Azure"
                            ],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_region": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Region",
                            "dynamic": false,
                            "info": "Region for the new database.",
                            "name": "region",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Database",
                "dynamic": false,
                "info": "The Database name for the Astra DB instance.",
                "name": "database_name",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "deletion_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Deletion Based On Field",
                "dynamic": false,
                "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "deletion_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "embedding_model": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding Model",
                "dynamic": false,
                "info": "Specify the Embedding Model. Not required for Astra Vectorize collections.",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_model",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "environment": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Environment",
                "dynamic": false,
                "info": "The environment for the Astra DB API Endpoint.",
                "name": "environment",
                "options": [
                  "prod",
                  "test",
                  "dev"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "prod"
              },
              "ignore_invalid_documents": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Invalid Documents",
                "dynamic": false,
                "info": "Boolean flag to determine whether to ignore invalid documents at runtime.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_invalid_documents",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "keyspace": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Keyspace",
                "dynamic": false,
                "info": "Optional keyspace within Astra DB to use for the collection.",
                "name": "keyspace",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "lexical_terms": {
                "_input_type": "QueryInput",
                "advanced": true,
                "display_name": "Lexical Terms",
                "dynamic": false,
                "info": "Add additional terms/keywords to augment search precision.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "lexical_terms",
                "placeholder": "Enter terms to search...",
                "required": false,
                "separator": " ",
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Search Results",
                "dynamic": false,
                "info": "Number of search results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "reranker": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Reranker",
                "dynamic": false,
                "info": "Post-retrieval model that re-scores results for optimal relevance ranking.",
                "name": "reranker",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "search_method": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Method",
                "dynamic": false,
                "info": "Determine how your content is matched: Vector finds semantic similarity, and Hybrid Search (suggested) combines both approaches with a reranker.",
                "name": "search_method",
                "options": [
                  "Hybrid Search",
                  "Vector Search"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Vector Search"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "search_score_threshold": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Search Score Threshold",
                "dynamic": false,
                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                "list": false,
                "list_add_label": "Add More",
                "name": "search_score_threshold",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0
              },
              "search_type": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Type",
                "dynamic": false,
                "info": "Search type to use",
                "name": "search_type",
                "options": [
                  "Similarity",
                  "Similarity with score threshold",
                  "MMR (Max Marginal Relevance)"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Similarity"
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "token": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [],
                "load_from_db": true,
                "name": "token",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "ASTRA_DB_APPLICATION_TOKEN"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "AstraDB"
        },
        "dragging": false,
        "id": "AstraDB-BRnBB",
        "measured": {
          "height": 449,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Output text to the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-t0f1f",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Output text to the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-t0f1f",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Use a simple prompt template to generate a prompt.",
          "display_name": "Prompt",
          "id": "Prompt-kr3Rx",
          "node": {
            "base_classes": [
              "PromptTemplate"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "code": {
                "display_name": "Code",
                "multiline": true,
                "show": false,
                "type": "str"
              },
              "input_variables": {
                "display_name": "Input Variables",
                "field_type": "dict",
                "show": false,
                "type": "list"
              },
              "template": {
                "display_name": "Template",
                "multiline": true,
                "show": true,
                "type": "str"
              }
            },
            "description": "Use a simple prompt template to generate a prompt.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "field_order": [
              "template",
              "input_variables",
              "code",
              "prompt_template_plus_kwargs"
            ],
            "frozen": false,
            "icon": "MessageSquareDot",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "PromptTemplate"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Template",
                "method": "build_template",
                "name": "template",
                "selected": "PromptTemplate",
                "tool_mode": true,
                "types": [
                  "PromptTemplate"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "context": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Context",
                "dynamic": false,
                "info": "Context for the prompt.",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "context",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "prompt_template_plus_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Prompt Template Plus Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the PromptTemplatePlus constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "prompt_template_plus_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              },
              "question": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Question",
                "dynamic": false,
                "info": "The question to be asked.",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "question",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "TextAreaInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "Template for the prompt.",
                "list": false,
                "load_from_db": false,
                "name": "template",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Use the following pieces of context to answer the user's question. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n{context}\n\nQuestion: {question}\nHelpful Answer:"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-kr3Rx",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Combine documents into a single string.",
          "display_name": "Combine Documents",
          "id": "CombineDocuments-iJ2bY",
          "node": {
            "base_classes": [
              "Text"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Combine documents into a single string.",
            "display_name": "Combine Documents",
            "documentation": "",
            "edited": false,
            "field_order": [
              "documents",
              "document_separator",
              "lc_combine_documents_kwargs"
            ],
            "frozen": false,
            "icon": "Files",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "Text"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "method": "combine_documents",
                "name": "text",
                "selected": "Text",
                "tool_mode": true,
                "types": [
                  "Text"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "document_separator": {
                "_input_type": "TextInput",
                "advanced": false,
                "display_name": "Document Separator",
                "dynamic": false,
                "info": "The separator to use between documents.",
                "list": false,
                "load_from_db": false,
                "name": "document_separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n\n"
              },
              "documents": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Documents",
                "dynamic": false,
                "info": "Documents to combine.",
                "input_types": [
                  "Document"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "documents",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "lc_combine_documents_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Combine Documents Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the CombineDocuments constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "lc_combine_documents_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CombineDocuments"
        },
        "dragging": false,
        "id": "CombineDocuments-iJ2bY",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Generate text with a Large Language Model.",
          "display_name": "OpenAI",
          "id": "OpenAI-xL3iG",
          "node": {
            "base_classes": [
              "LLM"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate text with a Large Language Model.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "openai_api_base",
              "openai_api_key",
              "max_tokens",
              "model_name",
              "temperature",
              "openai_llm_kwargs"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "LLM"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "LLM",
                "method": "build_llm",
                "name": "llm",
                "selected": "LLM",
                "tool_mode": true,
                "types": [
                  "LLM"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate in the completion.",
                "list": false,
                "load_from_db": false,
                "name": "max_tokens",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 256
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "Model name to use.",
                "name": "model_name",
                "options": [
                  "gpt-3.5-turbo",
                  "text-davinci-003",
                  "gpt-4",
                  "gpt-4-32k",
                  "gpt-4-turbo-preview",
                  "gpt-4o",
                  "gpt-4o-mini"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-3.5-turbo"
              },
              "openai_api_base": {
                "_input_type": "TextInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "Base URL for OpenAI API.",
                "list": false,
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "OpenAI API Key.",
                "input_types": [],
                "load_from_db": true,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "openai_llm_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "OpenAI LLM Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the OpenAI LLM constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "openai_llm_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              },
              "temperature": {
                "_input_type": "FloatInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "What sampling temperature to use, between 0 and 2. Higher values mean the model will take more risks. Try 0.9 for more creative applications, and 0 for ones with a well-defined answer.",
                "list": false,
                "load_from_db": false,
                "name": "temperature",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0.7
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAI"
        },
        "dragging": false,
        "id": "OpenAI-xL3iG",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Generate embeddings with OpenAI models.",
          "display_name": "OpenAI Embeddings",
          "id": "OpenAIEmbeddings-tSZ8A",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings with OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "openai_api_base",
              "openai_api_key",
              "model",
              "embedding_openai_kwargs"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "Embeddings"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "name": "embeddings",
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "embedding_openai_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "OpenAI Embeddings Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the OpenAIEmbeddings constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_openai_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              },
              "model": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "Model name to use.",
                "name": "model",
                "options": [
                  "text-embedding-ada-002",
                  "text-embedding-3-small",
                  "text-embedding-3-large"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "openai_api_base": {
                "_input_type": "TextInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "Base URL for OpenAI API.",
                "list": false,
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "OpenAI API Key.",
                "input_types": [],
                "load_from_db": true,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIEmbeddings"
        },
        "dragging": false,
        "id": "OpenAIEmbeddings-tSZ8A",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Split text into chunks.",
          "display_name": "Split Text",
          "id": "SplitText-aHhAi",
          "node": {
            "base_classes": [
              "Document"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Split text into chunks.",
            "display_name": "Split Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data_inputs",
              "text_splitter",
              "split_text_kwargs"
            ],
            "frozen": false,
            "icon": "Split",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "Document"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chunks",
                "method": "split_text",
                "name": "chunks",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "data_inputs": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "Data to split.",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "data_inputs",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "split_text_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Split Text Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the SplitText constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "split_text_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              },
              "text_splitter": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text Splitter",
                "dynamic": false,
                "info": "Text splitter to use.",
                "input_types": [
                  "TextSplitter"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "text_splitter",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SplitText"
        },
        "dragging": false,
        "id": "SplitText-aHhAi",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Upload a file to the flow.",
          "display_name": "File",
          "id": "File-EO8pn",
          "node": {
            "base_classes": [
              "Data",
              "Document"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Upload a file to the flow.",
            "display_name": "File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "path",
              "data_type",
              "file_component_kwargs"
            ],
            "frozen": false,
            "icon": "FileText",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [
              "Data",
              "DataFrame"
            ],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "method": "to_dataframe",
                "name": "dataframe",
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "method": "load_file",
                "name": "data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "data_type": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Data Type",
                "dynamic": false,
                "info": "The type of data to load from the file.",
                "name": "data_type",
                "options": [
                  "text",
                  "csv",
                  "json",
                  "jsonl",
                  "html",
                  "pdf",
                  "xml",
                  "image",
                  "audio",
                  "video"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text"
              },
              "file_component_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "File Component Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the FileComponent constructor.",
                "list": false,
                "list_add_label": "Add More",
                "name": "file_component_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "dict",
                "value": {}
              },
              "path": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "info": "Path to the file to upload.",
                "list": false,
                "load_from_db": false,
                "name": "path",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "File"
        },
        "dragging": false,
        "id": "File-EO8pn",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Output data to the Playground.",
          "display_name": "Document Output",
          "id": "DocumentOutput-k5Z7p",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Output data to the Playground.",
            "display_name": "Document Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "code"
            ],
            "frozen": false,
            "icon": "FileText",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Document Output",
                "method": "to_data",
                "name": "document",
                "selected": "Data",
                "tool_mode": false,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "_input_type": "Code",
                "advanced": false,
                "dynamic": false,
                "info": "You can use the \"input_value\" variable to reference the input. \n\nThis code will be executed at the end of the build_data method.",
                "list": false,
                "load_from_db": false,
                "name": "code",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "code",
                "value": ""
              },
              "input_value": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "Input data to be processed.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "Data",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DocumentOutput"
        },
        "dragging": false,
        "id": "DocumentOutput-k5Z7p",
        "measured": {
          "height": 269,
          "width": 320
        },
        "position": {
          "x": 2060.799531746744,
          "y": 1507.872099528214
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-FzOTA",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "question",
            "id": "Prompt-kr3Rx",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-FzOTA{œdataTypeœ:œChatInputœ,œidœ:œChatInput-FzOTAœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-kr3Rx{œfieldNameœ:œquestionœ,œidœ:œPrompt-kr3Rxœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-FzOTA",
        "sourceHandle": "{"dataType": "ChatInput", "id": "ChatInput-FzOTA", "name": "message", "output_types": ["Message"]}",
        "target": "Prompt-kr3Rx",
        "targetHandle": "{"fieldName": "question", "id": "Prompt-kr3Rx", "inputTypes": ["Message", "Text"], "type": "str"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PromptTemplate",
            "id": "Prompt-kr3Rx",
            "name": "template",
            "output_types": [
              "PromptTemplate"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAI-xL3iG",
            "inputTypes": [
              "PromptTemplate"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-kr3Rx{œdataTypeœ:œPromptTemplateœ,œidœ:œPrompt-kr3Rxœ,œnameœ:œtemplateœ,œoutput_typesœ:[œPromptTemplateœ]}-OpenAI-xL3iG{œfieldNameœ:œinput_valueœ,œidœ:œOpenAI-xL3iGœ,œinputTypesœ:[œPromptTemplateœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-kr3Rx",
        "sourceHandle": "{"dataType": "PromptTemplate", "id": "Prompt-kr3Rx", "name": "template", "output_types": ["PromptTemplate"]}",
        "target": "OpenAI-xL3iG",
        "targetHandle": "{"fieldName": "input_value", "id": "OpenAI-xL3iG", "inputTypes": ["PromptTemplate"], "type": "str"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LLM",
            "id": "OpenAI-xL3iG",
            "name": "llm",
            "output_types": [
              "LLM"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-t0f1f",
            "inputTypes": [
              "Message"
            ],
            "type": "Message"
          }
        },
        "id": "reactflow__edge-OpenAI-xL3iG{œdataTypeœ:œLLMœ,œidœ:œOpenAI-xL3iGœ,œnameœ:œllmœ,œoutput_typesœ:[œLLMœ]}-ChatOutput-t0f1f{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-t0f1fœ,œinputTypesœ:[œMessageœ],œtypeœ:œMessageœ}",
        "selected": false,
        "source": "OpenAI-xL3iG",
        "sourceHandle": "{"dataType": "LLM", "id": "OpenAI-xL3iG", "name": "llm", "output_types": ["LLM"]}",
        "target": "ChatOutput-t0f1f",
        "targetHandle": "{"fieldName": "input_value", "id": "ChatOutput-t0f1f", "inputTypes": ["Message"], "type": "Message"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Retriever",
            "id": "AstraDB-BRnBB",
            "name": "retriever",
            "output_types": [
              "Retriever"
            ]
          },
          "targetHandle": {
            "fieldName": "documents",
            "id": "CombineDocuments-iJ2bY",
            "inputTypes": [
              "Document"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-AstraDB-BRnBB{œdataTypeœ:œRetrieverœ,œidœ:œAstraDB-BRnBBœ,œnameœ:œretrieverœ,œoutput_typesœ:[œRetrieverœ]}-CombineDocuments-iJ2bY{œfieldNameœ:œdocumentsœ,œidœ:œCombineDocuments-iJ2bYœ,œinputTypesœ:[œDocumentœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "AstraDB-BRnBB",
        "sourceHandle": "{"dataType": "Retriever", "id": "AstraDB-BRnBB", "name": "retriever", "output_types": ["Retriever"]}",
        "target": "CombineDocuments-iJ2bY",
        "targetHandle": "{"fieldName": "documents", "id": "CombineDocuments-iJ2bY", "inputTypes": ["Document"], "type": "other"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Text",
            "id": "CombineDocuments-iJ2bY",
            "name": "text",
            "output_types": [
              "Text"
            ]
          },
          "targetHandle": {
            "fieldName": "context",
            "id": "Prompt-kr3Rx",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-CombineDocuments-iJ2bY{œdataTypeœ:œTextœ,œidœ:œCombineDocuments-iJ2bYœ,œnameœ:œtextœ,œoutput_typesœ:[œTextœ]}-Prompt-kr3Rx{œfieldNameœ:œcontextœ,œidœ:œPrompt-kr3Rxœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CombineDocuments-iJ2bY",
        "sourceHandle": "{"dataType": "Text", "id": "CombineDocuments-iJ2bY", "name": "text", "output_types": ["Text"]}",
        "target": "Prompt-kr3Rx",
        "targetHandle": "{"fieldName": "context", "id": "Prompt-kr3Rx", "inputTypes": ["Message", "Text"], "type": "str"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "File",
            "id": "File-EO8pn",
            "name": "data",
            "output_types": [
              "Data",
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "SplitText-aHhAi",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-File-EO8pn{œdataTypeœ:œFileœ,œidœ:œFile-EO8pnœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ,œDataFrameœ]}-SplitText-aHhAi{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-aHhAiœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "File-EO8pn",
        "sourceHandle": "{"dataType": "File", "id": "File-EO8pn", "name": "data", "output_types": ["Data", "DataFrame"]}",
        "target": "SplitText-aHhAi",
        "targetHandle": "{"fieldName": "data_inputs", "id": "SplitText-aHhAi", "inputTypes": ["Data", "DataFrame"], "type": "other"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Data",
            "id": "SplitText-aHhAi",
            "name": "chunks",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "AstraDB-BRnBB",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-SplitText-aHhAi{œdataTypeœ:œDataœ,œidœ:œSplitText-aHhAiœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-AstraDB-BRnBB{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-BRnBBœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SplitText-aHhAi",
        "sourceHandle": "{"dataType": "Data", "id": "SplitText-aHhAi", "name": "chunks", "output_types": ["Data"]}",
        "target": "AstraDB-BRnBB",
        "targetHandle": "{"fieldName": "ingest_data", "id": "AstraDB-BRnBB", "inputTypes": ["Data", "DataFrame"], "type": "other"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Embeddings",
            "id": "OpenAIEmbeddings-tSZ8A",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding_model",
            "id": "AstraDB-BRnBB",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-tSZ8A{œdataTypeœ:œEmbeddingsœ,œidœ:œOpenAIEmbeddings-tSZ8Aœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraDB-BRnBB{œfieldNameœ:œembedding_modelœ,œidœ:œAstraDB-BRnBBœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIEmbeddings-tSZ8A",
        "sourceHandle": "{"dataType": "Embeddings", "id": "OpenAIEmbeddings-tSZ8A", "name": "embeddings", "output_types": ["Embeddings"]}",
        "target": "AstraDB-BRnBB",
        "targetHandle": "{"fieldName": "embedding_model", "id": "AstraDB-BRnBB", "inputTypes": ["Embeddings"], "type": "other"}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Message",
            "id": "ChatInput-FzOTA",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "search_query",
            "id": "AstraDB-BRnBB",
            "inputTypes": [
              "Message"
            ],
            "type": "query"
          }
        },
        "id": "reactflow__edge-ChatInput-FzOTA{œdataTypeœ:œChatInputœ,œidœ:œChatInput-FzOTAœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-AstraDB-BRnBB{œfieldNameœ:œsearch_queryœ,œidœ:œAstraDB-BRnBBœ,œinputTypesœ:[œMessageœ],œtypeœ:œqueryœ}",
        "selected": false,
        "source": "ChatInput-FzOTA",
        "sourceHandle": "{"dataType": "ChatInput", "id": "ChatInput-FzOTA", "name": "message", "output_types": ["Message"]}",
        "target": "AstraDB-BRnBB",
        "targetHandle": "{"fieldName": "search_query", "id": "AstraDB-BRnBB", "inputTypes": ["Message"], "type": "query"}"
      }
    ],
    "viewport": {
      "x": 90.57560089396452,
      "y": -149.7037806007536,
      "zoom": 0.46276403161264995
    }
  }
} 