{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-1lWBj",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-HIx8w",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-1lWBj{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1lWBjœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-HIx8w{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-HIx8wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "ChatInput-1lWBj",
        "sourceHandle": "{œdataTypeœ: œChatInputœ, œidœ: œChatInput-1lWBjœ, œnameœ: œmessageœ, œoutput_typesœ: [œMessageœ]}",
        "target": "OpenAIModel-HIx8w",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œOpenAIModel-HIx8wœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-HIx8w",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-hKFON",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-HIx8w{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-HIx8wœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-hKFON{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hKFONœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "OpenAIModel-HIx8w",
        "sourceHandle": "{œdataTypeœ: œOpenAIModelœ, œidœ: œOpenAIModel-HIx8wœ, œnameœ: œtext_outputœ, œoutput_typesœ: [œMessageœ]}",
        "target": "ChatOutput-hKFON",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-hKFONœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "File",
            "id": "File-dlDLp",
            "name": "data",
            "output_types": []
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-mIiSz",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-File-dlDLp{œdataTypeœ:œFileœ,œidœ:œFile-dlDLpœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-mIiSz{œfieldNameœ:œdataœ,œidœ:œParseData-mIiSzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "source": "File-dlDLp",
        "sourceHandle": "{œdataTypeœ: œFileœ, œidœ: œFile-dlDLpœ, œnameœ: œdataœ, œoutput_typesœ: []}",
        "target": "ParseData-mIiSz",
        "targetHandle": "{œfieldNameœ: œdataœ, œidœ: œParseData-mIiSzœ, œinputTypesœ: [œDataœ], œtypeœ: œotherœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-mIiSz",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "Document",
            "id": "Prompt-L5CiD",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParseData-mIiSz{œdataTypeœ:œParseDataœ,œidœ:œParseData-mIiSzœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-L5CiD{œfieldNameœ:œDocumentœ,œidœ:œPrompt-L5CiDœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "source": "ParseData-mIiSz",
        "sourceHandle": "{œdataTypeœ: œParseDataœ, œidœ: œParseData-mIiSzœ, œnameœ: œtextœ, œoutput_typesœ: [œMessageœ]}",
        "target": "Prompt-L5CiD",
        "targetHandle": "{œfieldNameœ: œDocumentœ, œidœ: œPrompt-L5CiDœ, œinputTypesœ: [œMessageœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-L5CiD",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_message",
            "id": "OpenAIModel-HIx8w",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-L5CiD{œdataTypeœ:œPromptœ,œidœ:œPrompt-L5CiDœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-HIx8w{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-HIx8wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "Prompt-L5CiD",
        "sourceHandle": "{œdataTypeœ: œPromptœ, œidœ: œPrompt-L5CiDœ, œnameœ: œpromptœ, œoutput_typesœ: [œMessageœ]}",
        "target": "OpenAIModel-HIx8w",
        "targetHandle": "{œfieldNameœ: œsystem_messageœ, œidœ: œOpenAIModel-HIx8wœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-1lWBj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "What is this document is about?"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 234,
        "id": "ChatInput-1lWBj",
        "position": {
          "x": 516.7529480335185,
          "y": 237.04967879541528
        },
        "positionAbsolute": {
          "x": 516.7529480335185,
          "y": 237.04967879541528
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-hKFON",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 234,
        "id": "ChatOutput-hKFON",
        "position": {
          "x": 1631.3766926569258,
          "y": 136.66509468115308
        },
        "positionAbsolute": {
          "x": 1631.3766926569258,
          "y": 136.66509468115308
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data",
          "id": "ParseData-mIiSz",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "name": "data_list",
                "selected": "Data",
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
              },
              "data": {
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              }
            }
          },
          "type": "ParseData"
        },
        "dragging": false,
        "height": 302,
        "id": "ParseData-mIiSz",
        "position": {
          "x": 514.8054600415829,
          "y": -117.1921617826383
        },
        "positionAbsolute": {
          "x": 514.8054600415829,
          "y": -117.1921617826383
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "note-Tz3ZY",
          "node": {
            "description": "## Get Your OpenAI API Key\n\n**Steps**:\n\n1. **Visit** [OpenAI's API Key Page](https://platform.openai.com/api-keys).\n\n2. **Log In/Sign Up**:\n   - Log in or create a new OpenAI account.\n\n3. **Generate API Key**:\n   - Click \"Create New Secret Key\" to obtain your key.\n\n4. **Store Your Key Securely**:\n   - Note it down as it will only display once.\n\n5. **Enter API Key**:\n   - Input your key in the OpenAI API Key field within the component setup.\n\nKeep your key safe and manage it responsibly!",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note"
        },
        "dragging": true,
        "height": 325,
        "id": "note-Tz3ZY",
        "position": {
          "x": 1253.2038187140245,
          "y": -421.5721019678553
        },
        "positionAbsolute": {
          "x": 1253.2038187140245,
          "y": -421.5721019678553
        },
        "selected": false,
        "type": "noteNode",
        "width": 325
      },
      {
        "data": {
          "id": "OpenAIModel-HIx8w",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "output_parser"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "text_response",
                "name": "text_output",
                "required_inputs": [],
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "Language Model",
                "method": "build_model",
                "name": "model_output",
                "required_inputs": [],
                "selected": "LanguageModel",
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "display_name": "Model Name",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "FloatInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "temperature",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0.1
              }
            },
            "tool_mode": false
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 630,
        "id": "OpenAIModel-HIx8w",
        "position": {
          "x": 1259.2100978002586,
          "y": -88.15692253090975
        },
        "positionAbsolute": {
          "x": 1259.2100978002586,
          "y": -88.15692253090975
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "note-XGIUa",
          "node": {
            "description": "# Document Q&A\n\n**Purpose:**\nThis flow leverages a language model to answer questions based on content from a loaded document. It's ideal for obtaining quick insights from PDFs or other text files by asking direct questions.\n\n**Components**:\n1. **File Component**: Loads and processes your document in supported formats.\n2. **Parse Data**: Converts the loaded document into text using a specified template for consistent processing.\n3. **Prompt Component**: Forms a structured query by combining the parsed document content with user questions.\n4. **OpenAI Model**: Engages OpenAI's language model to generate responses to queries based on the document context.\n5. **Chat Input/Output**: Facilitates user queries and displays AI-generated answers seamlessly.\n\n**Steps to Use**:\n1. **Upload Document**: Use the \"File\" component to upload a document or text file you want to query.\n2. **Enter Question**: Through the \"Chat Input\" field, type your question related to the document content.\n3. **Run the Flow**: Activate the flow to process the input and generate an answer using the OpenAI model.\n4. **View Response**: Read the generated answer in the \"Chat Output\" field for immediate insights.\n\n**Benefits**:\n- Simplifies the process of extracting information from documents.\n- Provides a user-friendly interface for interactive document exploration using AI.\n",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note"
        },
        "dragging": false,
        "height": 452,
        "id": "note-XGIUa",
        "position": {
          "x": -338.7070086205371,
          "y": -177.11912020709357
        },
        "positionAbsolute": {
          "x": -338.7070086205371,
          "y": -177.11912020709357
        },
        "resizing": false,
        "selected": false,
        "style": {
          "height": 452,
          "width": 469
        },
        "type": "noteNode",
        "width": 469
      },
      {
        "data": {
          "id": "File-dlDLp",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Load a file to be used in your project.",
            "display_name": "File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "path",
              "silent_errors",
              "use_multithreading",
              "concurrency_multithreading"
            ],
            "frozen": false,
            "icon": "file-text",
            "legacy": false,
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "DataFrame",
                "method": "get_dataframe",
                "name": "dataframe",
                "selected": "DataFrame",
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "Raw Text",
                "method": "get_raw_text",
                "name": "raw_text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "File Paths",
                "method": "get_file_paths",
                "name": "file_paths",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import io\nimport json\nimport os\nimport tempfile\nimport xml.etree.ElementTree as ET\nfrom pathlib import Path\nfrom typing import Any\nfrom zipfile import ZipFile, is_zipfile\n\nimport pandas as pd\nfrom defusedxml import ElementTree\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, IntInput, Output\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\nSUPPORTED_FILE_TYPES = [\n    \"json\",\n    \"csv\",\n    \"yaml\",\n    \"yml\",\n    \"txt\",\n    \"md\",\n    \"mdx\",\n    \"xml\",\n    \"html\",\n    \"htm\",\n    \"pdf\",\n    \"docx\",\n    \"py\",\n    \"sh\",\n    \"sql\",\n    \"js\",\n    \"ts\",\n    \"tsx\",\n    \"zip\",\n]\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"Load and process various file types with support for multiple formats and structured outputs.\"\n    icon = \"file-text\"\n    name = \"File\"\n    VALID_EXTENSIONS = SUPPORTED_FILE_TYPES\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"File\",\n            file_types=SUPPORTED_FILE_TYPES,\n            required=True,\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            info=\"If true, errors will not raise an exception.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"get_dataframe\"),\n        Output(display_name=\"Raw Text\", name=\"raw_text\", method=\"get_raw_text\"),\n        Output(display_name=\"File Paths\", name=\"file_paths\", method=\"get_file_paths\"),\n    ]\n\n    @staticmethod\n    def resolve_path(path: str) -> str:\n        if not path:\n            return \"\"\n        path_obj = Path(path)\n        if path_obj.is_absolute():\n            return path\n        current_dir = Path.cwd()\n        resolved_path = str(current_dir / path)\n        return Path(resolved_path).resolve().as_posix()\n\n    def _flatten_dict(self, d: dict[str, Any], parent_key: str = \"\", sep: str = \"_\") -> dict[str, Any]:\n        items: list = []\n        for k, v in d.items():\n            new_key = f\"{parent_key}{sep}{k}\" if parent_key else k\n            if isinstance(v, dict):\n                items.extend(self._flatten_dict(v, new_key, sep=sep).items())\n            else:\n                items.append((new_key, v))\n        return dict(items)\n\n    def _normalize_data(self, data: dict[str, Any] | Data) -> dict[str, Any]:\n        if isinstance(data, Data):\n            data = data.data\n\n        if isinstance(data, dict):\n            return self._flatten_dict(data)\n        if isinstance(data, str):\n            return {\"content\": data}\n        return {\"content\": str(data)}\n\n    def _to_dataframe(self, data: Data | list[Data]) -> DataFrame:\n        if isinstance(data, list):\n            normalized_data = [self._normalize_data(d) for d in data]\n            if not normalized_data:\n                return DataFrame(pd.DataFrame())\n\n            df_data = pd.DataFrame(normalized_data)\n\n        elif isinstance(data, Data):\n            normalized_data = self._normalize_data(data)\n            df_data = pd.DataFrame([normalized_data])\n        else:\n            df_data = pd.DataFrame()\n\n        for col in df_data.columns:\n            if df_data[col].apply(lambda x: isinstance(x, dict | list)).any():\n                df_data[col] = df_data[col].apply(json.dumps)\n\n        return DataFrame(df_data)\n\n    def get_dataframe(self) -> DataFrame:\n        self.log(\"Getting DataFrame\")\n        result = self._process_file(structured=True)\n        dataframe = self._to_dataframe(result)\n        self.status = dataframe\n        return dataframe\n\n    def get_raw_text(self) -> Message:\n        self.log(\"Getting Raw Text\")\n        result = self._process_file(structured=False)\n        raw_string = self._to_raw_string(result)\n        self.status = raw_string\n        return Message(text=raw_string)\n\n    def _to_raw_string(self, data: Data | list[Data] | str) -> str:\n        if isinstance(data, str):\n            return data\n        if isinstance(data, Data):\n            if isinstance(data.data, dict):\n                if \"text_content\" in data.data:\n                    return str(data.data[\"text_content\"])\n                if \"zip_contents\" in data.data:\n                    return \"\\n\".join(self._to_raw_string(content) for content in data.data[\"zip_contents\"])\n                return json.dumps(data.data, indent=2)\n            return str(data.data)\n        if isinstance(data, list):\n            return \"\\n\".join(self._to_raw_string(item) for item in data)\n        return str(data)\n\n    def get_file_paths(self) -> Message:\n        path = Path(self.resolve_path(self.path))\n        paths = self._extract_zip_paths(path) if is_zipfile(path) else [str(path)]\n        file_paths_string = \"\\n\".join(paths)\n        self.status = file_paths_string\n        return Message(text=file_paths_string)\n\n    def _extract_zip_paths(self, zip_path: Path) -> list[str]:\n        extracted_paths = []\n        with tempfile.TemporaryDirectory() as tmpdirname, ZipFile(zip_path, \"r\") as zip_ref:\n            zip_ref.extractall(tmpdirname)\n            for root, _, files in os.walk(tmpdirname):\n                for file in files:\n                    full_path = Path(root) / file\n                    relative_path = Path(full_path).relative_to(tmpdirname)\n                    extracted_paths.append(f\"{zip_path.name}/{relative_path}\")\n        return extracted_paths\n\n    def _process_file(self, *, structured: bool = True) -> Data | list[Data]:\n        if not self.path:\n            msg = \"Please upload a file for processing.\"\n            raise ValueError(msg)\n\n        path = Path(self.resolve_path(self.path))\n        self.log(f\"Processing file: {path}\")\n\n        if is_zipfile(path):\n            return self._process_zip_file(zip_path=path, structured=structured)\n        return self._process_single_file(file_path=path, structured=structured)\n\n    def _process_zip_file(self, zip_path: Path, *, structured: bool) -> list[Data]:\n        self.log(\"Processing ZIP file\")\n        data: list[Data] = []\n        with tempfile.TemporaryDirectory() as tmpdirname, ZipFile(zip_path, \"r\") as zip_file:\n            zip_file.extractall(tmpdirname)\n            for root, _, files in os.walk(tmpdirname):\n                for file_name in files:\n                    file_path = Path(root) / file_name\n                    if file_path.suffix.lower() == \".pdf\":\n                        self.log(f\"Processing PDF in ZIP: {file_name}\")\n                        result = parse_text_file_to_data(str(file_path), silent_errors=self.silent_errors)\n                        parsed_content = Data(data={\"text_content\": result.text if result else None})\n                    elif any(file_name.endswith(ext) for ext in [*TEXT_FILE_TYPES, \".docx\"]):\n                        self.log(f\"Processing ZIP content: {file_name}\")\n                        with file_path.open(\"rb\") as file:\n                            content = file.read()\n                            parsed_content = self._parse_file_content(file_name, content, structured=structured)\n                    else:\n                        continue\n\n                    if isinstance(parsed_content, Data):\n                        data.append(parsed_content)\n                    elif isinstance(parsed_content, list):\n                        data.extend(parsed_content)\n\n        if structured:\n            return data\n        return [Data(data={\"zip_contents\": [d.data if isinstance(d, Data) else d for d in data]})]\n\n    def _process_single_file(self, file_path: Path, *, structured: bool) -> Data | list[Data]:\n        try:\n            if file_path.suffix.lower() == \".pdf\":\n                self.log(\"Processing PDF file\")\n                result = parse_text_file_to_data(str(file_path), silent_errors=self.silent_errors)\n                parsed_data = Data(data={\"text_content\": result.text if result else None})\n                return [parsed_data]  # Return as list to match return type\n            with file_path.open(\"rb\") as f:\n                content = f.read()\n                return self._parse_file_content(file_path.name, content, structured=structured)\n        except Exception as e:\n            msg = f\"Error processing file: {e!s}\"\n            self.log(msg)\n            if self.silent_errors:\n                return [Data(data={\"error\": msg})]  # Return as list to match return type\n            raise\n\n    def _parse_file_content(self, file_name: str, content: bytes, *, structured: bool = True) -> Data | list[Data]:\n        file_extension = Path(file_name).suffix.lower()\n        self.log(f\"Parsing file content: {file_extension}\")\n\n        parser_map = {\n            \".json\": self._parse_json,\n            \".csv\": self._parse_csv,\n            \".yaml\": self._parse_yaml,\n            \".yml\": self._parse_yaml,\n            \".xml\": self._parse_xml,\n            \".html\": self._parse_html,\n            \".htm\": self._parse_html,\n            \".docx\": self._parse_docx,\n        }\n\n        parser = parser_map.get(file_extension, self._parse_text)\n        result = parser(content, structured=structured)\n        if isinstance(result, Data):\n            return [result]\n        return result\n\n    def _parse_json(self, content: bytes, *, structured: bool) -> Data | list[Data]:\n        self.log(\"Parsing JSON content\")\n        try:\n            parsed_data = json.loads(content.decode(\"utf-8\"))\n            if structured:\n                if isinstance(parsed_data, list):\n                    return [Data(data=item) for item in parsed_data]\n                return Data(data=parsed_data)\n            return Data(data={\"json_content\": json.dumps(parsed_data, indent=2)})\n        except json.JSONDecodeError as e:\n            msg = f\"JSON parsing error: {e!s}\"\n            self.log(msg)\n            if self.silent_errors:\n                return Data(data={\"error\": msg})\n            raise\n\n    def _parse_csv(self, content: bytes, *, structured: bool) -> list[Data]:\n        self.log(\"Parsing CSV content\")\n        try:\n            df_csv = pd.read_csv(\n                io.StringIO(content.decode(\"utf-8\")),\n                dtype_backend=\"numpy_nullable\",\n                parse_dates=True,\n                infer_datetime_format=True,\n            )\n\n            if structured:\n                column_types = {}\n                for column in df_csv.columns:\n                    if df_csv[column].dtype.name.startswith((\"int\", \"uint\")):\n                        column_types[column] = \"integer\"\n                    elif df_csv[column].dtype.name.startswith(\"float\"):\n                        column_types[column] = \"float\"\n                    elif df_csv[column].dtype.name == \"boolean\":\n                        column_types[column] = \"boolean\"\n                    elif df_csv[column].dtype.name == \"datetime64[ns]\":\n                        column_types[column] = \"datetime\"\n                    else:\n                        column_types[column] = \"string\"\n\n                data = []\n                for _, row in df_csv.iterrows():\n                    processed_row: dict[str, Any] = {}\n                    for column in df_csv.columns:\n                        value = row[column]\n\n                        if pd.isna(value):\n                            processed_row[column] = None\n                            continue\n\n                        if column_types[column] == \"integer\":\n                            processed_row[column] = int(value)\n                        elif column_types[column] == \"float\":\n                            processed_row[column] = float(value)\n                        elif column_types[column] == \"boolean\":\n                            processed_row[column] = bool(value)\n                        elif column_types[column] == \"datetime\":\n                            processed_row[column] = pd.Timestamp(str(value)).isoformat() if not pd.isna(value) else None\n                        elif isinstance(value, str):\n                            try:\n                                processed_row[column] = json.loads(value)\n                            except (json.JSONDecodeError, TypeError):\n                                processed_row[column] = str(value)\n                        else:\n                            processed_row[column] = str(value)\n\n                    data.append(Data(data={\"values\": processed_row, \"column_types\": column_types}))\n                return data\n            return [Data(data={\"csv_content\": df_csv.to_csv(index=False)})]\n\n        except Exception as e:\n            msg = f\"CSV parsing error: {e!s}\"\n            self.log(msg)\n            if self.silent_errors:\n                return Data(data={\"error\": msg})\n            raise\n\n    def _parse_yaml(self, content: bytes, *, structured: bool) -> Data | list[Data] | str:\n        try:\n            import yaml\n\n            yaml_content = content.decode(\"utf-8\")\n            if structured:\n                parsed_data = yaml.safe_load(yaml_content)\n                if isinstance(parsed_data, list):\n                    return [Data(data=item) for item in parsed_data]\n                if isinstance(parsed_data, dict):\n                    return Data(data=parsed_data)\n                return Data(data={\"content\": parsed_data})\n            if not structured:\n                return yaml_content\n        except Exception as e:\n            msg = f\"YAML parsing error: {e!s}\"\n            self.log(msg)\n            if self.silent_errors:\n                return Data(data={\"error\": msg})\n            raise\n\n    def _parse_xml(self, content: bytes, *, structured: bool) -> list[Data] | str:\n        try:\n            root = ElementTree.fromstring(content)\n            if structured:\n                return self._xml_to_list_data(root)\n            return ElementTree.tostring(root, encoding=\"unicode\", method=\"xml\")\n        except ElementTree.ParseError as e:\n            msg = f\"XML parsing error: {e!s}\"\n            self.log(msg)\n            if self.silent_errors:\n                return Data(data={\"error\": msg})\n            raise\n\n    def _xml_to_list_data(self, element: ET.Element) -> list[Data]:\n        result = []\n        for child in element:\n            data = {}\n            for subchild in child:\n                if len(subchild) == 0:\n                    data[subchild.tag] = subchild.text\n                else:\n                    data[subchild.tag] = self._xml_to_dict(subchild)\n            result.append(Data(data=data))\n        return result\n\n    def _xml_to_dict(self, element: ET.Element) -> dict:\n        result = {}\n        for child in element:\n            if len(child) == 0:\n                result[child.tag] = child.text\n            else:\n                result[child.tag] = self._xml_to_dict(child)\n        return result\n\n    def _parse_html(self, content: bytes, *, structured: bool) -> Data | str:\n        html_content = content.decode(\"utf-8\")\n        if not structured:\n            return html_content\n\n        try:\n            root = ElementTree.fromstring(html_content)\n\n            title = None\n            title_elem = root.find(\".//title\")\n            if title_elem is not None:\n                title = title_elem.text\n\n            def extract_text(element, exclude_tags=None):\n                if exclude_tags is None:\n                    exclude_tags = {\"script\", \"style\"}\n                if element.tag in exclude_tags:\n                    return \"\"\n                text = (element.text or \"\").strip()\n                for child in element:\n                    text += \" \" + extract_text(child, exclude_tags)\n                    if child.tail:\n                        text += \" \" + child.tail.strip()\n                return text.strip()\n\n            def extract_dataframe(element):\n                data = {\"tag\": element.tag, \"attributes\": dict(element.attrib), \"text\": (element.text or \"\").strip()}\n\n                children = []\n                for child in element:\n                    child_data = extract_dataframe(child)\n                    if child_data:\n                        children.append(child_data)\n\n                if children:\n                    data[\"children\"] = children\n\n                if element.tail:\n                    data[\"tail\"] = element.tail.strip()\n\n                return data\n\n            dataframe = {\n                \"title\": title,\n                \"text\": extract_text(root),\n                \"structure\": extract_dataframe(root),\n                \"metadata\": {\n                    \"links\": [a.get(\"href\") for a in root.findall(\".//a\") if a.get(\"href\")],\n                    \"images\": [img.get(\"src\") for img in root.findall(\".//img\") if img.get(\"src\")],\n                    \"headers\": [\n                        h.text.strip()\n                        for h in root.findall(\".//*\")\n                        if h.tag in {\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"} and h.text\n                    ],\n                },\n            }\n\n            return Data(data=dataframe)\n\n        except ElementTree.ParseError:\n            return Data(data={\"text\": html_content})\n\n    def _parse_docx(self, content: bytes, *, structured: bool) -> Data | str:\n        if not structured:\n            return content.decode(\"utf-8\", errors=\"ignore\")\n\n        try:\n            with tempfile.NamedTemporaryFile(suffix=\".docx\", delete=False) as temp_file:\n                temp_file.write(content)\n                temp_path = temp_file.name\n\n            dataframe = {\n                \"metadata\": {},\n                \"styles\": {},\n                \"content\": [],\n                \"relationships\": {},\n                \"numbering\": {},\n                \"comments\": [],\n            }\n\n            with ZipFile(temp_path, \"r\") as docx:\n                # Parse core properties\n                if \"docProps/core.xml\" in docx.namelist():\n                    core_xml = docx.read(\"docProps/core.xml\")\n                    root = ElementTree.fromstring(core_xml)\n                    for child in root:\n                        tag = child.tag.split(\"}\")[-1]\n                        dataframe[\"metadata\"][tag] = child.text\n\n                # Parse styles\n                if \"word/styles.xml\" in docx.namelist():\n                    styles_xml = docx.read(\"word/styles.xml\")\n                    root = ElementTree.fromstring(styles_xml)\n                    for style in root.findall(\".//{*}style\"):\n                        style_id = style.get(\"{*}styleId\", \"\")\n                        style_name = style.find(\".//{*}name\")\n                        if style_name is not None:\n                            dataframe[\"styles\"][style_id] = style_name.get(\"{*}val\", \"\")\n\n                # Parse document content\n                if \"word/document.xml\" in docx.namelist():\n                    doc_xml = docx.read(\"word/document.xml\")\n                    root = ElementTree.fromstring(doc_xml)\n                    body = root.find(\".//{*}body\")\n\n                    for elem in body:\n                        elem_data = self._process_docx_element(elem)\n                        if elem_data:\n                            dataframe[\"content\"].append(elem_data)\n\n                # Parse comments\n                if \"word/comments.xml\" in docx.namelist():\n                    comments_xml = docx.read(\"word/comments.xml\")\n                    root = ElementTree.fromstring(comments_xml)\n                    for comment in root.findall(\".//{*}comment\"):\n                        comment_data = {\n                            \"id\": comment.get(\"{*}id\"),\n                            \"author\": comment.get(\"{*}author\"),\n                            \"date\": comment.get(\"{*}date\"),\n                            \"text\": \"\".join(t.text or \"\" for t in comment.findall(\".//{*}t\")),\n                        }\n                        dataframe[\"comments\"].append(comment_data)\n\n            Path(temp_path).unlink()\n            return Data(data=dataframe)\n\n        except Exception as e:\n            msg = f\"DOCX parsing error: {e!s}\"\n            self.log(msg)\n            if self.silent_errors:\n                return Data(data={\"error\": msg})\n            raise\n\n    def _process_docx_element(self, elem: ET.Element) -> dict[str, Any] | None:\n        tag = elem.tag.split(\"}\")[-1]\n        dataframe: dict[str, Any] = {}\n\n        if tag == \"p\":\n            dataframe = self._process_docx_paragraph(elem)\n        elif tag == \"tbl\":\n            dataframe = self._process_docx_table(elem)\n\n        return dataframe if dataframe else None\n\n    def _process_docx_paragraph(self, p_elem: ET.Element) -> dict[str, Any]:\n        p_data = {\n            \"type\": \"paragraph\",\n            \"style\": None,  # Initialize as None\n            \"content\": [],\n        }\n\n        # Get style properly\n        p_style = p_elem.find(\".//{*}pStyle\")\n        if p_style is not None:\n            p_data[\"style\"] = p_style.get(\"{*}val\", \"normal\")\n        else:\n            p_data[\"style\"] = \"normal\"\n\n        for r in p_elem.findall(\".//{*}r\"):\n            run_data = {\"text\": \"\", \"formatting\": {}, \"properties\": {}}\n\n            r_pr = r.find(\".//{*}rPr\")\n            if r_pr is not None:\n                for prop in r_pr:\n                    prop_name = prop.tag.split(\"}\")[-1]\n                    run_data[\"formatting\"][prop_name] = True\n\n            for t in r.findall(\".//{*}t\"):\n                preserve = t.get(\"{http://www.w3.org/XML/1998/namespace}space\") == \"preserve\"\n                text = t.text or \"\"\n                run_data[\"text\"] += text if preserve else text.strip()\n\n            if run_data[\"text\"] or run_data[\"formatting\"]:\n                p_data[\"content\"].append(run_data)\n\n        return p_data\n\n    def _process_docx_table(self, tbl_elem: ET.Element) -> dict[str, Any]:\n        table_data: dict[str, Any] = {\n            \"type\": \"table\",\n            \"properties\": {},\n            \"rows\": [],  # Initialize as proper list\n        }\n\n        tbl_pr = tbl_elem.find(\".//{*}tblPr\")\n        if tbl_pr is not None:\n            for prop in tbl_pr:\n                prop_name = prop.tag.split(\"}\")[-1]\n                table_data[\"properties\"][prop_name] = True\n\n        for tr in tbl_elem.findall(\".//{*}tr\"):\n            row = []\n            for tc in tr.findall(\".//{*}tc\"):\n                cell_content = []\n                for p in tc.findall(\".//{*}p\"):\n                    p_data = self._process_docx_paragraph(p)\n                    if p_data[\"content\"]:\n                        cell_content.append(p_data)\n                row.append(cell_content)\n            table_data[\"rows\"].append(row)\n\n        return table_data\n\n    def _parse_text(self, content: bytes, *, structured: bool) -> Data | str:\n        text_content = content.decode(\"utf-8\", errors=\"ignore\")\n        if structured:\n            return Data(data={\"text\": text_content})\n        return text_content\n\n    def log(\n        self, message: str | dict[Any, Any] | list[Any] | float | bool | Any | None | list[str], name: str | None = None\n    ) -> None:\n        if name:\n            super().log(message, name)\n        else:\n            super().log(message)\n"
              },
              "concurrency_multithreading": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Processing Concurrency",
                "dynamic": false,
                "info": "When multiple files are being processed, the number of files to process concurrently.",
                "list": false,
                "name": "concurrency_multithreading",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "path": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "File",
                "dynamic": false,
                "fileTypes": [
                  "json",
                  "csv",
                  "yaml",
                  "yml",
                  "txt",
                  "md",
                  "mdx",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "zip"
                ],
                "file_path": "",
                "info": "",
                "list": false,
                "name": "path",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "silent_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "use_multithreading": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "[Deprecated] Use Multithreading",
                "dynamic": false,
                "info": "Set 'Processing Concurrency' greater than 1 to enable multithreading.",
                "list": false,
                "name": "use_multithreading",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "tool_mode": false
          },
          "type": "File"
        },
        "dragging": false,
        "height": 232,
        "id": "File-dlDLp",
        "position": {
          "x": 155.39382083637838,
          "y": -82.32805525710685
        },
        "positionAbsolute": {
          "x": 155.39382083637838,
          "y": -82.32805525710685
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-L5CiD",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "Document"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "name": "prompt",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "Document": {
                "advanced": false,
                "display_name": "Document",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "Document",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Answer user's questions based on the document below:\n\n---\n\n{Document}\n\n---\n\nQuestion:"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 347,
        "id": "Prompt-L5CiD",
        "position": {
          "x": 895.1947781377585,
          "y": -59.89409263992732
        },
        "positionAbsolute": {
          "x": 895.1947781377585,
          "y": -59.89409263992732
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      }
    ],
    "viewport": {
      "x": 262.21464656923195,
      "y": 450.3754323717522,
      "zoom": 0.5739369419687381
    }
  },
  "description": "Integrates PDF reading with a language model to answer document-specific questions. Ideal for small-scale texts, it facilitates direct queries with immediate insights.",
  "endpoint_name": null,
  "gradient": "3",
  "icon": "FileQuestion",
  "id": "febba2f9-69b3-484b-8aef-65626810ec8a",
  "is_component": false,
  "last_tested_version": "1.0.19.post2",
  "name": "Document Q&A",
  "tags": [
    "rag",
    "q-a",
    "openai"
  ]
}