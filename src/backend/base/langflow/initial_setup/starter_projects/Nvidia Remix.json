{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-8XmJU",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-9dON7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-8XmJU{œdataTypeœ:œChatInputœ,œidœ:œChatInput-8XmJUœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-9dON7{œfieldNameœ:œinput_valueœ,œidœ:œAgent-9dON7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-8XmJU",
        "sourceHandle": "{œdataTypeœ: œChatInputœ, œidœ: œChatInput-8XmJUœ, œnameœ: œmessageœ, œoutput_typesœ: [œMessageœ]}",
        "target": "Agent-9dON7",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œAgent-9dON7œ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-9dON7",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-o3obj",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-9dON7{œdataTypeœ:œAgentœ,œidœ:œAgent-9dON7œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-o3obj{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-o3objœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-9dON7",
        "sourceHandle": "{œdataTypeœ: œAgentœ, œidœ: œAgent-9dON7œ, œnameœ: œresponseœ, œoutput_typesœ: [œMessageœ]}",
        "target": "ChatOutput-o3obj",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-o3objœ, œinputTypesœ: [œDataœ, œDataFrameœ, œMessageœ], œtypeœ: œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-PrjbV",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-9dON7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-PrjbV{œdataTypeœ:œPromptœ,œidœ:œPrompt-PrjbVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-9dON7{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-9dON7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-PrjbV",
        "sourceHandle": "{œdataTypeœ: œPromptœ, œidœ: œPrompt-PrjbVœ, œnameœ: œpromptœ, œoutput_typesœ: [œMessageœ]}",
        "target": "Agent-9dON7",
        "targetHandle": "{œfieldNameœ: œsystem_promptœ, œidœ: œAgent-9dON7œ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "RemixDocumentation",
            "id": "RemixDocumentation-DEIws",
            "name": "dataframe_output",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "FAISS-Uz8O4",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-RemixDocumentation-DEIws{œdataTypeœ:œRemixDocumentationœ,œidœ:œRemixDocumentation-DEIwsœ,œnameœ:œdataframe_outputœ,œoutput_typesœ:[œDataFrameœ]}-FAISS-Uz8O4{œfieldNameœ:œingest_dataœ,œidœ:œFAISS-Uz8O4œ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "RemixDocumentation-DEIws",
        "sourceHandle": "{œdataTypeœ: œRemixDocumentationœ, œidœ: œRemixDocumentation-DEIwsœ, œnameœ: œdataframe_outputœ, œoutput_typesœ: [œDataFrameœ]}",
        "target": "FAISS-Uz8O4",
        "targetHandle": "{œfieldNameœ: œingest_dataœ, œidœ: œFAISS-Uz8O4œ, œinputTypesœ: [œDataœ, œDataFrameœ], œtypeœ: œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "EmbeddingModel",
            "id": "EmbeddingModel-X6URU",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "FAISS-Uz8O4",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-EmbeddingModel-X6URU{œdataTypeœ:œEmbeddingModelœ,œidœ:œEmbeddingModel-X6URUœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-FAISS-Uz8O4{œfieldNameœ:œembeddingœ,œidœ:œFAISS-Uz8O4œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "EmbeddingModel-X6URU",
        "sourceHandle": "{œdataTypeœ: œEmbeddingModelœ, œidœ: œEmbeddingModel-X6URUœ, œnameœ: œembeddingsœ, œoutput_typesœ: [œEmbeddingsœ]}",
        "target": "FAISS-Uz8O4",
        "targetHandle": "{œfieldNameœ: œembeddingœ, œidœ: œFAISS-Uz8O4œ, œinputTypesœ: [œEmbeddingsœ], œtypeœ: œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "FAISS",
            "id": "FAISS-Uz8O4",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-9dON7",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-FAISS-Uz8O4{œdataTypeœ:œFAISSœ,œidœ:œFAISS-Uz8O4œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-9dON7{œfieldNameœ:œtoolsœ,œidœ:œAgent-9dON7œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "FAISS-Uz8O4",
        "sourceHandle": "{œdataTypeœ: œFAISSœ, œidœ: œFAISS-Uz8O4œ, œnameœ: œcomponent_as_toolœ, œoutput_typesœ: [œToolœ]}",
        "target": "Agent-9dON7",
        "targetHandle": "{œfieldNameœ: œtoolsœ, œidœ: œAgent-9dON7œ, œinputTypesœ: [œToolœ], œtypeœ: œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "MCPTools",
            "id": "MCPTools-beHVJ",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-9dON7",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-MCPTools-beHVJ{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-beHVJœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-9dON7{œfieldNameœ:œtoolsœ,œidœ:œAgent-9dON7œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "MCPTools-beHVJ",
        "sourceHandle": "{œdataTypeœ: œMCPToolsœ, œidœ: œMCPTools-beHVJœ, œnameœ: œcomponent_as_toolœ, œoutput_typesœ: [œToolœ]}",
        "target": "Agent-9dON7",
        "targetHandle": "{œfieldNameœ: œtoolsœ, œidœ: œAgent-9dON7œ, œinputTypesœ: [œToolœ], œtypeœ: œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-8XmJU",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chat Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        # Ensure files is a list and filter out empty/None values\n        files = self.files if self.files else []\n        if files and not isinstance(files, list):\n            files = [files]\n        files = [f for f in files if f is not None and f != \"\"]\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=files,\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "csv",
                  "json",
                  "pdf",
                  "txt",
                  "md",
                  "mdx",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Input Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-8XmJU",
        "measured": {
          "height": 47,
          "width": 192
        },
        "position": {
          "x": -210.69432682306316,
          "y": 315.16488151952666
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-o3obj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            clean_data: bool = getattr(self, \"clean_data\", False)\n            return \"\\n\".join([safe_convert(item, clean_data=clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-o3obj",
        "measured": {
          "height": 47,
          "width": 192
        },
        "position": {
          "x": 431.32852283796484,
          "y": 385.1551996791115
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-9dON7",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "method": "message_response",
                "name": "response",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "external_options": {
                  "fields": {
                    "data": {
                      "node": {
                        "display_name": "Connect other models",
                        "icon": "CornerDownLeft",
                        "name": "connect_other_models"
                      }
                    }
                  }
                },
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "OpenAI",
                  "Azure OpenAI"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\n\nfrom langchain_core.tools import StructuredTool\nfrom pydantic import ValidationError\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import (\n    ToolCallingAgentComponent,\n)\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    IntInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.logging import logger\nfrom langflow.schema.data import Data\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\nfrom langflow.schema.table import EditMode\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"OpenAI\", \"Azure OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    # Filter out json_mode from OpenAI inputs since we handle structured output differently\n    if \"OpenAI\" in MODEL_PROVIDERS_DICT:\n        openai_inputs_filtered = [\n            input_field\n            for input_field in MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"]\n            if not (hasattr(input_field, \"name\") and input_field.name == \"json_mode\")\n        ]\n    else:\n        openai_inputs_filtered = []\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            refresh_button=False,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST if key in MODELS_METADATA]\n            + [{\"icon\": \"brain\"}],\n            external_options={\n                \"fields\": {\n                    \"data\": {\n                        \"node\": {\n                            \"name\": \"connect_other_models\",\n                            \"display_name\": \"Connect other models\",\n                            \"icon\": \"CornerDownLeft\",\n                        }\n                    }\n                },\n            },\n        ),\n        *openai_inputs_filtered,\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        MultilineInput(\n            name=\"format_instructions\",\n            display_name=\"Output Format Instructions\",\n            info=\"Generic Template for structured output formatting. Valid only with Structured response.\",\n            value=(\n                \"You are an AI that extracts structured JSON objects from unstructured text. \"\n                \"Use a predefined schema with expected types (str, int, float, bool, dict). \"\n                \"Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. \"\n                \"Fill missing or ambiguous values with defaults: null for missing values. \"\n                \"Remove exact duplicates but keep variations that have different field values. \"\n                \"Always return valid JSON in the expected format, never throw errors. \"\n                \"If multiple objects can be extracted, return them all in the structured format.\"\n            ),\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=(\n                \"Schema Validation: Define the structure and data types for structured output. \"\n                \"No validation if no output schema.\"\n            ),\n            advanced=True,\n            required=False,\n            value=[],\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Indicate the data type of the output field (e.g., str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"As List\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [\n        Output(name=\"response\", display_name=\"Response\", method=\"message_response\"),\n    ]\n\n    async def get_agent_requirements(self):\n        \"\"\"Get the agent requirements for the agent.\"\"\"\n        llm_model, display_name = await self.get_llm()\n        if llm_model is None:\n            msg = \"No language model selected. Please choose a model to proceed.\"\n            raise ValueError(msg)\n        self.model_name = get_model_name(llm_model, display_name=display_name)\n\n        # Get memory data\n        self.chat_history = await self.get_memory_data()\n        if isinstance(self.chat_history, Message):\n            self.chat_history = [self.chat_history]\n\n        # Add current date tool if enabled\n        if self.add_current_date_tool:\n            if not isinstance(self.tools, list):  # type: ignore[has-type]\n                self.tools = []\n            current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n            if not isinstance(current_date_tool, StructuredTool):\n                msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                raise TypeError(msg)\n            self.tools.append(current_date_tool)\n        return llm_model, self.chat_history, self.tools\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            result = await self.run_agent(agent)\n\n            # Store result for potential JSON output\n            self._agent_result = result\n\n        except (ValueError, TypeError, KeyError) as e:\n            await logger.aerror(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            await logger.aerror(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        # Avoid catching blind Exception; let truly unexpected exceptions propagate\n        except Exception as e:\n            await logger.aerror(f\"Unexpected error: {e!s}\")\n            raise\n        else:\n            return result\n\n    def _preprocess_schema(self, schema):\n        \"\"\"Preprocess schema to ensure correct data types for build_model_from_schema.\"\"\"\n        processed_schema = []\n        for field in schema:\n            processed_field = {\n                \"name\": str(field.get(\"name\", \"field\")),\n                \"type\": str(field.get(\"type\", \"str\")),\n                \"description\": str(field.get(\"description\", \"\")),\n                \"multiple\": field.get(\"multiple\", False),\n            }\n            # Ensure multiple is handled correctly\n            if isinstance(processed_field[\"multiple\"], str):\n                processed_field[\"multiple\"] = processed_field[\"multiple\"].lower() in [\n                    \"true\",\n                    \"1\",\n                    \"t\",\n                    \"y\",\n                    \"yes\",\n                ]\n            processed_schema.append(processed_field)\n        return processed_schema\n\n    async def build_structured_output_base(self, content: str):\n        \"\"\"Build structured output with optional BaseModel validation.\"\"\"\n        json_pattern = r\"\\{.*\\}\"\n        schema_error_msg = \"Try setting an output schema\"\n\n        # Try to parse content as JSON first\n        json_data = None\n        try:\n            json_data = json.loads(content)\n        except json.JSONDecodeError:\n            json_match = re.search(json_pattern, content, re.DOTALL)\n            if json_match:\n                try:\n                    json_data = json.loads(json_match.group())\n                except json.JSONDecodeError:\n                    return {\"content\": content, \"error\": schema_error_msg}\n            else:\n                return {\"content\": content, \"error\": schema_error_msg}\n\n        # If no output schema provided, return parsed JSON without validation\n        if not hasattr(self, \"output_schema\") or not self.output_schema or len(self.output_schema) == 0:\n            return json_data\n\n        # Use BaseModel validation with schema\n        try:\n            processed_schema = self._preprocess_schema(self.output_schema)\n            output_model = build_model_from_schema(processed_schema)\n\n            # Validate against the schema\n            if isinstance(json_data, list):\n                # Multiple objects\n                validated_objects = []\n                for item in json_data:\n                    try:\n                        validated_obj = output_model.model_validate(item)\n                        validated_objects.append(validated_obj.model_dump())\n                    except ValidationError as e:\n                        await logger.aerror(f\"Validation error for item: {e}\")\n                        # Include invalid items with error info\n                        validated_objects.append({\"data\": item, \"validation_error\": str(e)})\n                return validated_objects\n\n            # Single object\n            try:\n                validated_obj = output_model.model_validate(json_data)\n                return [validated_obj.model_dump()]  # Return as list for consistency\n            except ValidationError as e:\n                await logger.aerror(f\"Validation error: {e}\")\n                return [{\"data\": json_data, \"validation_error\": str(e)}]\n\n        except (TypeError, ValueError) as e:\n            await logger.aerror(f\"Error building structured output: {e}\")\n            # Fallback to parsed JSON without validation\n            return json_data\n\n    async def json_response(self) -> Data:\n        \"\"\"Convert agent response to structured JSON Data output with schema validation.\"\"\"\n        # Always use structured chat agent for JSON response mode for better JSON formatting\n        try:\n            system_components = []\n\n            # 1. Agent Instructions (system_prompt)\n            agent_instructions = getattr(self, \"system_prompt\", \"\") or \"\"\n            if agent_instructions:\n                system_components.append(f\"{agent_instructions}\")\n\n            # 2. Format Instructions\n            format_instructions = getattr(self, \"format_instructions\", \"\") or \"\"\n            if format_instructions:\n                system_components.append(f\"Format instructions: {format_instructions}\")\n\n            # 3. Schema Information from BaseModel\n            if hasattr(self, \"output_schema\") and self.output_schema and len(self.output_schema) > 0:\n                try:\n                    processed_schema = self._preprocess_schema(self.output_schema)\n                    output_model = build_model_from_schema(processed_schema)\n                    schema_dict = output_model.model_json_schema()\n                    schema_info = (\n                        \"You are given some text that may include format instructions, \"\n                        \"explanations, or other content alongside a JSON schema.\\n\\n\"\n                        \"Your task:\\n\"\n                        \"- Extract only the JSON schema.\\n\"\n                        \"- Return it as valid JSON.\\n\"\n                        \"- Do not include format instructions, explanations, or extra text.\\n\\n\"\n                        \"Input:\\n\"\n                        f\"{json.dumps(schema_dict, indent=2)}\\n\\n\"\n                        \"Output (only JSON schema):\"\n                    )\n                    system_components.append(schema_info)\n                except (ValidationError, ValueError, TypeError, KeyError) as e:\n                    await logger.aerror(f\"Could not build schema for prompt: {e}\", exc_info=True)\n\n            # Combine all components\n            combined_instructions = \"\\n\\n\".join(system_components) if system_components else \"\"\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=combined_instructions,\n            )\n\n            # Create and run structured chat agent\n            try:\n                structured_agent = self.create_agent_runnable()\n            except (NotImplementedError, ValueError, TypeError) as e:\n                await logger.aerror(f\"Error with structured chat agent: {e}\")\n                raise\n            try:\n                result = await self.run_agent(structured_agent)\n            except (\n                ExceptionWithMessageError,\n                ValueError,\n                TypeError,\n                RuntimeError,\n            ) as e:\n                await logger.aerror(f\"Error with structured agent result: {e}\")\n                raise\n            # Extract content from structured agent result\n            if hasattr(result, \"content\"):\n                content = result.content\n            elif hasattr(result, \"text\"):\n                content = result.text\n            else:\n                content = str(result)\n\n        except (\n            ExceptionWithMessageError,\n            ValueError,\n            TypeError,\n            NotImplementedError,\n            AttributeError,\n        ) as e:\n            await logger.aerror(f\"Error with structured chat agent: {e}\")\n            # Fallback to regular agent\n            content_str = \"No content returned from agent\"\n            return Data(data={\"content\": content_str, \"error\": str(e)})\n\n        # Process with structured output validation\n        try:\n            structured_output = await self.build_structured_output_base(content)\n\n            # Handle different output formats\n            if isinstance(structured_output, list) and structured_output:\n                if len(structured_output) == 1:\n                    return Data(data=structured_output[0])\n                return Data(data={\"results\": structured_output})\n            if isinstance(structured_output, dict):\n                return Data(data=structured_output)\n            return Data(data={\"content\": content})\n\n        except (ValueError, TypeError) as e:\n            await logger.aerror(f\"Error in structured output processing: {e}\")\n            return Data(data={\"content\": content, \"error\": str(e)})\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(\n                session_id=self.graph.session_id,\n                order=\"Ascending\",\n                n_messages=self.n_messages,\n            )\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    async def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except (AttributeError, ValueError, TypeError, RuntimeError) as e:\n            await logger.aerror(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            # Filter out json_mode and only use attributes that exist on this component\n            model_kwargs = {}\n            for input_ in inputs:\n                if hasattr(self, f\"{prefix}{input_.name}\"):\n                    model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n                build_config[\"agent_llm\"][\"display_name\"] = \"Model Provider\"\n            elif field_value == \"connect_other_models\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    info=\"The provider of the language model that the agent will use to generate responses.\",\n                    options=[*MODEL_PROVIDERS_LIST],\n                    real_time_refresh=True,\n                    refresh_button=False,\n                    input_types=[\"LanguageModel\"],\n                    placeholder=\"Awaiting model input.\",\n                    options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST if key in MODELS_METADATA],\n                    external_options={\n                        \"fields\": {\n                            \"data\": {\n                                \"node\": {\n                                    \"name\": \"connect_other_models\",\n                                    \"display_name\": \"Connect other models\",\n                                    \"icon\": \"CornerDownLeft\",\n                                },\n                            }\n                        },\n                    },\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\",\n            tool_description=description,\n            callbacks=self.get_langchain_callbacks(),\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "format_instructions": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Output Format Instructions",
                "dynamic": false,
                "info": "Generic Template for structured output formatting. Valid only with Structured response.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "format_instructions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an AI that extracts structured JSON objects from unstructured text. Use a predefined schema with expected types (str, int, float, bool, dict). Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. Fill missing or ambiguous values with defaults: null for missing values. Remove exact duplicates but keep variations that have different field values. Always return valid JSON in the expected format, never throw errors. If multiple objects can be extracted, return them all in the structured format."
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt-5-chat-latest",
                  "o1",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "output_schema": {
                "_input_type": "TableInput",
                "advanced": true,
                "display_name": "Output Schema",
                "dynamic": false,
                "info": "Schema Validation: Define the structure and data types for structured output. No validation if no output schema.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "output_schema",
                "placeholder": "",
                "required": false,
                "show": true,
                "table_icon": "Table",
                "table_schema": {
                  "columns": [
                    {
                      "default": "field",
                      "description": "Specify the name of the output field.",
                      "disable_edit": false,
                      "display_name": "Name",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "name",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "description of field",
                      "description": "Describe the purpose of the output field.",
                      "disable_edit": false,
                      "display_name": "Description",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "description",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "str",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                      "disable_edit": false,
                      "display_name": "Type",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "type",
                      "options": [
                        "str",
                        "int",
                        "float",
                        "bool",
                        "dict"
                      ],
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": false,
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "disable_edit": false,
                      "display_name": "As List",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "boolean",
                      "hidden": false,
                      "name": "multiple",
                      "sortable": true,
                      "type": "boolean"
                    }
                  ]
                },
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": []
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant that must use tools to answer questions and perform tasks regarding RTX Remix.\n\nBefore "
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-9dON7",
        "measured": {
          "height": 591,
          "width": 320
        },
        "position": {
          "x": 78.6911094428821,
          "y": -159.83908350054932
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-PrjbV",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "remix_documentation",
                "remix_mcp_server",
                "mcp_prompts"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "name": "prompt",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "mcp_prompts": {
                "advanced": false,
                "display_name": "mcp_prompts",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "mcp_prompts",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "remix_documentation": {
                "advanced": false,
                "display_name": "remix_documentation",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "remix_documentation",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "FAISS"
              },
              "remix_mcp_server": {
                "advanced": false,
                "display_name": "remix_mcp_server",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "remix_mcp_server",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "RTX Remix Toolkit Connection"
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "# Background\n\nYou are a helpful assistant that must use tools to answer questions and perform tasks regarding RTX Remix.\n\n# Procedure\n\n- You MUST ABSOLUTELY ALWAYS search through the documentation before responding to the user. Follow the instructions in the \"Documentation Instructions\" section for instruction on using the documentation.\n- When the user asks how to do something, always assume they are asking about the RTX Remix Toolkit or Runtime Graphic User Interfaces unless specified otherwise (DO NOT mention the tools available to you).\n- If the user requested you take an action or provide information about the current project, you may follow the instructions in the \"RTX Remix Toolkit Instructions\" section.\n\n# Documentation Instructions\n\n- DO NOT ATTEMPT, UNDER ANY CIRCUMSTANCES TO PROVIDE AN ANSWER BASED ON YOUR TRAINING DATA.\n- Use the {remix_documentation} tool to fetch the requested information from the RTX Remix documentation.\n- Always provide the source you used to get to the answer provided to the user.\n- If the user asks a question that can be ambiguous, request that they provide more information.\n- If the user asks a question that cannot be answered using the documentation, simply say so and don't attempt to answer the question.\n\n# RTX Remix Toolkit Instructions\n\n- Use the tools provided by the \"{remix_mcp_server}\" MCP Server to interact with the RTX Remix Toolkit.\n- Always verify if a recipe provided in the \"MCP Server Recipes\" sub-section matches the current user request. \n    - If a recipe matches, follow the instructions as closely as possible\n    - If NO recipe matches the user request, try to use any combination of tools to complete the user's request\n\n## MCP Server Recipes\n\n{mcp_prompts}"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-PrjbV",
        "measured": {
          "height": 529,
          "width": 320
        },
        "position": {
          "x": -338.00443250004696,
          "y": -753.7815399447686
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "RemixDocumentation-DEIws",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Fetch information from the NVIDIA RTX Remix documentation",
            "display_name": "RTX Remix Documentation",
            "documentation": "https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/index.html",
            "edited": true,
            "field_order": [
              "exclude_paths"
            ],
            "frozen": false,
            "icon": "NVIDIA",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": false,
                "method": "fetch_documentation_dataframe",
                "name": "dataframe_output",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": null,
                "method": "fetch_documentation_data",
                "name": "data_output",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import httpx\r\nimport json\r\nimport re\r\nfrom langflow.custom import Component\r\nfrom langflow.io import Output, MessageTextInput\r\nfrom langflow.schema import DataFrame, Data\r\n\r\n\r\nclass RemixDocumentation(Component):\r\n    display_name = \"RTX Remix Documentation\"\r\n    description = \"Fetch information from the NVIDIA RTX Remix documentation\"\r\n    documentation: str = (\r\n        \"https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/index.html\"\r\n    )\r\n    icon = \"NVIDIA\"\r\n    name = \"RemixDocumentation\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"exclude_paths\",\r\n            display_name=\"Exclude Paths\",\r\n            info=(\r\n                \"List of path prefixes to exclude from results. \"\r\n                \"Used to filter out sections of the documentation that are not typically relevant to user queries.\"\r\n            ),\r\n            is_list=True,\r\n            value=[\r\n                \"source\",\r\n                \"CHANGELOG.html\",\r\n                \"docs/changelog\",\r\n                \"docs/contributing/api.html\",\r\n            ],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"DataFrame\",\r\n            name=\"dataframe_output\",\r\n            method=\"fetch_documentation_dataframe\",\r\n        ),\r\n        Output(\r\n            display_name=\"Data\", name=\"data_output\", method=\"fetch_documentation_data\"\r\n        ),\r\n    ]\r\n\r\n    _BASE_URL = \"https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/\"\r\n\r\n    def _fetch_all_documentation(self) -> list[Data]:\r\n        \"\"\"Fetch all documentation entries and return as list of Data objects.\"\"\"\r\n        # URL for the search index JavaScript file\r\n        search_index_url = self._BASE_URL + \"searchindex.js\"\r\n\r\n        # Fetch the search index file\r\n        response = httpx.get(search_index_url, follow_redirects=True)\r\n        response.raise_for_status()\r\n\r\n        # Extract the JSON data from the JavaScript file\r\n        # The file contains: const searchData = {...};\r\n        js_content = response.text\r\n\r\n        # Extract the JSON part using regex\r\n        match = re.search(r\"const searchData = ({.*});\", js_content, re.DOTALL)\r\n        if not match:\r\n            raise ValueError(\"Could not parse search index data\")\r\n\r\n        # Parse the JSON data\r\n        search_data = json.loads(match.group(1))\r\n\r\n        # Get the data array which contains all searchable items\r\n        data_items = search_data.get(\"data\", [])\r\n\r\n        results = []\r\n        for item in data_items:\r\n            filename = item.get(\"filename\", \"\")\r\n            text = item.get(\"content\", \"\")\r\n\r\n            if not text:\r\n                continue\r\n\r\n            # Check if filename should be excluded\r\n            should_exclude = False\r\n            for exclude_path in self.exclude_paths:\r\n                if filename.startswith(exclude_path):\r\n                    should_exclude = True\r\n                    break\r\n\r\n            if should_exclude:\r\n                continue\r\n\r\n            # Build URL with proper handling of empty anchors\r\n            anchor = item.get(\"anchor\", \"\")\r\n            if anchor:\r\n                url = f\"{self._BASE_URL}{filename}#{anchor}\"\r\n            else:\r\n                url = f\"{self._BASE_URL}{filename}\"\r\n\r\n            results.append(\r\n                Data(\r\n                    title=item.get(\"display_name\", \"\"),\r\n                    text=text,\r\n                    url=url,\r\n                )\r\n            )\r\n\r\n        # If no results found, create a single entry indicating no results\r\n        if not results:\r\n            data = Data(\r\n                title=\"No documentation found\",\r\n                text=\"No documentation entries were found in the search index\",\r\n                url=search_index_url,\r\n            )\r\n            results.append(data)\r\n\r\n        return results\r\n\r\n    def fetch_documentation_dataframe(self) -> DataFrame:\r\n        \"\"\"Fetch documentation and return as DataFrame.\"\"\"\r\n        results = self._fetch_all_documentation()\r\n        data_frame = DataFrame(results)\r\n        self.status = data_frame\r\n        return data_frame\r\n\r\n    def fetch_documentation_data(self) -> list[Data]:\r\n        \"\"\"Fetch documentation and return as list of Data objects.\"\"\"\r\n        results = self._fetch_all_documentation()\r\n        self.status = results\r\n        return results\r\n"
              },
              "exclude_paths": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Exclude Paths",
                "dynamic": false,
                "info": "List of path prefixes to exclude from results. Used to filter out sections of the documentation that are not typically relevant to user queries.",
                "input_types": [
                  "Message"
                ],
                "list": true,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "exclude_paths",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": [
                  "source",
                  "docs/changelog",
                  "CHANGELOG.html",
                  "docs/contributing/api.html"
                ]
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "RemixDocumentation"
        },
        "dragging": false,
        "id": "RemixDocumentation-DEIws",
        "measured": {
          "height": 373,
          "width": 320
        },
        "position": {
          "x": -783.4316223978514,
          "y": -373.75276518828326
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Generate embeddings using a specified provider.",
          "display_name": "Embedding Model",
          "id": "EmbeddingModel-X6URU",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using a specified provider.",
            "display_name": "Embedding Model",
            "documentation": "",
            "edited": false,
            "field_order": [
              "provider",
              "model",
              "api_key",
              "api_base",
              "dimensions",
              "chunk_size",
              "request_timeout",
              "max_retries",
              "show_progress_bar",
              "model_kwargs"
            ],
            "frozen": false,
            "icon": "binary",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embedding Model",
                "group_outputs": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_base": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "API Base URL",
                "dynamic": false,
                "info": "Base URL for the API. Leave empty for default.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "Model Provider API key",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "chunk_size": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageTextInput,\n    SecretStrInput,\n)\nfrom langflow.schema.dotdict import dotdict\n\n\nclass EmbeddingModelComponent(LCEmbeddingsModel):\n    display_name = \"Embedding Model\"\n    description = \"Generate embeddings using a specified provider.\"\n    documentation: str = \"https://docs.langflow.org/components-embedding-models\"\n    icon = \"binary\"\n    name = \"EmbeddingModel\"\n    category = \"models\"\n\n    inputs = [\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Model Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n            info=\"Select the embedding model provider\",\n            real_time_refresh=True,\n            options_metadata=[{\"icon\": \"OpenAI\"}],\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model Name\",\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=OPENAI_EMBEDDING_MODEL_NAMES[0],\n            info=\"Select the embedding model to use\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"Model Provider API key\",\n            required=True,\n            show=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"api_base\",\n            display_name=\"API Base URL\",\n            info=\"Base URL for the API. Leave empty for default.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", advanced=True, value=3),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        provider = self.provider\n        model = self.model\n        api_key = self.api_key\n        api_base = self.api_base\n        dimensions = self.dimensions\n        chunk_size = self.chunk_size\n        request_timeout = self.request_timeout\n        max_retries = self.max_retries\n        show_progress_bar = self.show_progress_bar\n        model_kwargs = self.model_kwargs or {}\n\n        if provider == \"OpenAI\":\n            if not api_key:\n                msg = \"OpenAI API key is required when using OpenAI provider\"\n                raise ValueError(msg)\n            return OpenAIEmbeddings(\n                model=model,\n                dimensions=dimensions or None,\n                base_url=api_base or None,\n                api_key=api_key,\n                chunk_size=chunk_size,\n                max_retries=max_retries,\n                timeout=request_timeout or None,\n                show_progress_bar=show_progress_bar,\n                model_kwargs=model_kwargs,\n            )\n        msg = f\"Unknown provider: {provider}\"\n        raise ValueError(msg)\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name == \"provider\" and field_value == \"OpenAI\":\n            build_config[\"model\"][\"options\"] = OPENAI_EMBEDDING_MODEL_NAMES\n            build_config[\"model\"][\"value\"] = OPENAI_EMBEDDING_MODEL_NAMES[0]\n            build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\n            build_config[\"api_base\"][\"display_name\"] = \"OpenAI API Base URL\"\n        return build_config\n"
              },
              "dimensions": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Dimensions",
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "list": false,
                "list_add_label": "Add More",
                "name": "dimensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "model": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "Select the embedding model to use",
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text-embedding-3-small"
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "provider": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "Select the embedding model provider",
                "name": "provider",
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [
                  {
                    "icon": "OpenAI"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "request_timeout": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              },
              "show_progress_bar": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "show_progress_bar",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "EmbeddingModel"
        },
        "dragging": false,
        "id": "EmbeddingModel-X6URU",
        "measured": {
          "height": 375,
          "width": 320
        },
        "position": {
          "x": -781.7797027471986,
          "y": 80.22604713786116
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "FAISS-Uz8O4",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "FAISS Vector Store with search capabilities",
            "display_name": "FAISS",
            "documentation": "",
            "edited": false,
            "field_order": [
              "index_name",
              "persist_directory",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "allow_dangerous_deserialization",
              "embedding",
              "number_of_results"
            ],
            "frozen": false,
            "icon": "FAISS",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "allow_dangerous_deserialization": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Allow Dangerous Deserialization",
                "dynamic": false,
                "info": "Set to True to allow loading pickle files from untrusted sources. Only enable this if you trust the source of the data.",
                "list": false,
                "list_add_label": "Add More",
                "name": "allow_dangerous_deserialization",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pathlib import Path\n\nfrom langchain_community.vectorstores import FAISS\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import BoolInput, HandleInput, IntInput, StrInput\nfrom langflow.schema.data import Data\n\n\nclass FaissVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"FAISS Vector Store with search capabilities.\"\"\"\n\n    display_name: str = \"FAISS\"\n    description: str = \"FAISS Vector Store with search capabilities\"\n    name = \"FAISS\"\n    icon = \"FAISS\"\n\n    inputs = [\n        StrInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            value=\"langflow_index\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n            info=\"Path to save the FAISS index. It will be relative to where Langflow is running.\",\n        ),\n        *LCVectorStoreComponent.inputs,\n        BoolInput(\n            name=\"allow_dangerous_deserialization\",\n            display_name=\"Allow Dangerous Deserialization\",\n            info=\"Set to True to allow loading pickle files from untrusted sources. \"\n            \"Only enable this if you trust the source of the data.\",\n            advanced=True,\n            value=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n    ]\n\n    @staticmethod\n    def resolve_path(path: str) -> str:\n        \"\"\"Resolve the path relative to the Langflow root.\n\n        Args:\n            path: The path to resolve\n        Returns:\n            str: The resolved path as a string\n        \"\"\"\n        return str(Path(path).resolve())\n\n    def get_persist_directory(self) -> Path:\n        \"\"\"Returns the resolved persist directory path or the current directory if not set.\"\"\"\n        if self.persist_directory:\n            return Path(self.resolve_path(self.persist_directory))\n        return Path()\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> FAISS:\n        \"\"\"Builds the FAISS object.\"\"\"\n        path = self.get_persist_directory()\n        path.mkdir(parents=True, exist_ok=True)\n\n        # Convert DataFrame to Data if needed using parent's method\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        faiss = FAISS.from_documents(documents=documents, embedding=self.embedding)\n        faiss.save_local(str(path), self.index_name)\n        return faiss\n\n    def search_documents(self) -> list[Data]:\n        \"\"\"Search for documents in the FAISS vector store.\"\"\"\n        path = self.get_persist_directory()\n        index_path = path / f\"{self.index_name}.faiss\"\n\n        if not index_path.exists():\n            vector_store = self.build_vector_store()\n        else:\n            vector_store = FAISS.load_local(\n                folder_path=str(path),\n                embeddings=self.embedding,\n                index_name=self.index_name,\n                allow_dangerous_deserialization=self.allow_dangerous_deserialization,\n            )\n\n        if not vector_store:\n            msg = \"Failed to load the FAISS index.\"\n            raise ValueError(msg)\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n            return docs_to_data(docs)\n        return []\n"
              },
              "embedding": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "index_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "langflow_index"
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "info": "Number of results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "persist_directory": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Persist Directory",
                "dynamic": false,
                "info": "Path to save the FAISS index. It will be relative to where Langflow is running.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "persist_directory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Enter a query to run a similarity search.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "FAISS. search_documents - FAISS Vector Store with search capabilities",
                    "display_description": "FAISS. search_documents - FAISS Vector Store with search capabilities",
                    "display_name": "search_documents",
                    "name": "search_documents",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "search_documents"
                    ]
                  },
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Enter a query to run a similarity search.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "FAISS. as_dataframe - FAISS Vector Store with search capabilities",
                    "display_description": "FAISS. as_dataframe - FAISS Vector Store with search capabilities",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "as_dataframe"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "FAISS"
        },
        "dragging": false,
        "id": "FAISS-Uz8O4",
        "measured": {
          "height": 503,
          "width": 320
        },
        "position": {
          "x": -344.50128361428034,
          "y": -176.20680066416054
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-HQL5D",
          "node": {
            "description": "# RTX Remix Langflow Integration\n\nThis Langflow project provides an integration for the NVIDIA RTX Remix Toolkit through its REST API.\n\n## Prerequisites\n\nBefore using this project, ensure you have completed the following steps:\n\n1. **Install RTX Remix Toolkit**\n   You must have the RTX Remix Toolkit installed on your system. Follow the installation guide here:\n   [Installing the RTX Remix Toolkit](https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/docs/installation/install-toolkit.html)\n\n2. **Run RTX Remix Toolkit**\n   Make sure the RTX Remix Toolkit application is running before using this Langflow project.\n\n3. **Create/Open a Project**\n   You must have an RTX Remix project opened within the Toolkit. Learn how to set up a project here:\n   [Setting Up a Project with the RTX Remix Toolkit](https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/docs/gettingstarted/learning-toolkitsetup.html)\n\n### Quick Start Tutorial\n\nTo quickly get started with RTX Remix, follow the [Building Your First Mod for the RTX Remix Sample](https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/docs/tutorials/tutorial-remixtool.html) tutorial.\n\nIt goes through the process of installing the various required parts, setting them up and getting a project up and running.\n\n## Getting Started\n\nOnce all prerequisites are met, the Langflow project should work without additional configuration.\n\n### Testing the Connection\n\nTo verify everything is working correctly:\n\n1. Open the Langflow project\n2. Locate the **RTX Remix MCP Connection** node\n3. Click the **refresh button** on the node\n4. Verify that the various REST API tools appear\n\nIf the REST API tools appear after refreshing, your connection to RTX Remix Toolkit is working properly and you can begin using the available tools.\n\n## Additional Resources\n\n- [RTX Remix Documentation](https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/)\n- [RTX Remix MCP Documentation](https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/docs/howto/learning-mcp.html)\n- [RTX Remix REST API Documentation](https://docs.omniverse.nvidia.com/kit/docs/rtx_remix/latest/docs/howto/learning-restapi.html)",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "lime"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "height": 1454,
        "id": "note-HQL5D",
        "measured": {
          "height": 1454,
          "width": 452
        },
        "position": {
          "x": -1257.898918275863,
          "y": -634.0975399601093
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 452
      },
      {
        "data": {
          "id": "MCPTools-beHVJ",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "data",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Connection",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mode",
              "command",
              "env",
              "sse_url",
              "headers_input",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from __future__ import annotations\n\nimport asyncio\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool  # noqa: TC002\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.agents.utils import maybe_unflatten_dict, safe_cache_get, safe_cache_set\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes  # noqa: TC001\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_settings_service, get_storage_service, session_scope\n\n\n# Mock tool templates for healthcare tools when no MCP server is available\nMOCK_TOOL_TEMPLATES = {\n    # Healthcare EHR Tools\n    \"ehr_patient_records\": {\n        \"name\": \"EHR Patient Records\",\n        \"description\": \"Access patient electronic health records for the specific visit\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"visit_date\": {\"type\": \"string\", \"description\": \"Visit date (YYYY-MM-DD format)\"},\n            \"record_type\": {\"type\": \"string\", \"description\": \"Type of record to retrieve\", \"enum\": [\"visit_notes\", \"discharge_summary\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT123456\",\n            \"visit_date\": \"2024-01-15\",\n            \"visit_notes\": [\n                {\n                    \"timestamp\": \"2024-01-15T10:30:00Z\",\n                    \"provider\": \"Dr. Smith\",\n                    \"note_type\": \"Assessment\",\n                    \"content\": \"Patient presents with stable chronic conditions. Medication adherence improved.\"\n                }\n            ],\n            \"diagnoses\": [\"Type 2 Diabetes Mellitus\", \"Hypertension\", \"Hyperlipidemia\"],\n            \"medications\": [\n                {\"name\": \"Metformin\", \"dosage\": \"500mg\", \"frequency\": \"twice daily\"},\n                {\"name\": \"Lisinopril\", \"dosage\": \"10mg\", \"frequency\": \"once daily\"}\n            ],\n            \"vital_signs\": {\"bp\": \"130/80\", \"pulse\": \"72\", \"temp\": \"98.6F\"},\n            \"status\": \"active\"\n        }\n    },\n\n    \"pharmacy_claims_ncpdp\": {\n        \"name\": \"Pharmacy Claims NCPDP\",\n        \"description\": \"Access pharmacy claims data to retrieve medication fill history and refill patterns\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for claims (e.g., '90d', '6m', '1y')\"},\n            \"medication_filter\": {\"type\": \"string\", \"description\": \"Filter by specific medication or drug class\"}\n        },\n        \"mock_response\": {\n            \"member_id\": \"MEM789012\",\n            \"claims_period\": \"2023-10-15 to 2024-01-15\",\n            \"prescriptions\": [\n                {\n                    \"ndc\": \"00093-0058-01\",\n                    \"medication\": \"Metformin HCl 500mg\",\n                    \"fill_date\": \"2024-01-10\",\n                    \"days_supply\": 30,\n                    \"quantity\": 60,\n                    \"pharmacy\": \"CVS Pharmacy #1234\",\n                    \"prescriber\": \"Dr. Smith\"\n                }\n            ],\n            \"adherence_metrics\": {\n                \"pdc_diabetes\": 0.85,\n                \"pdc_hypertension\": 0.72,\n                \"refill_gaps\": [\"Lisinopril: 5-day gap in December\"]\n            },\n            \"total_claims\": 12\n        }\n    },\n\n    \"insurance_eligibility_check\": {\n        \"name\": \"Insurance Eligibility Check\",\n        \"description\": \"Real-time insurance eligibility verification and benefits checking\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Insurance member ID\"},\n            \"provider_npi\": {\"type\": \"string\", \"description\": \"Provider NPI number\"},\n            \"service_type\": {\"type\": \"string\", \"description\": \"Type of service\", \"enum\": [\"office_visit\", \"specialist\", \"diagnostic\", \"procedure\"]}\n        },\n        \"mock_response\": {\n            \"member_id\": \"INS456789\",\n            \"eligibility_status\": \"active\",\n            \"coverage_effective_date\": \"2024-01-01\",\n            \"plan_name\": \"Health Plus Premium\",\n            \"copay_office_visit\": \"$25\",\n            \"copay_specialist\": \"$50\",\n            \"deductible_remaining\": \"$750\",\n            \"out_of_pocket_max\": \"$5000\",\n            \"prior_auth_required\": False,\n            \"benefits\": {\n                \"office_visits\": \"Covered after copay\",\n                \"preventive_care\": \"100% covered\",\n                \"prescription_drugs\": \"Covered with formulary\"\n            }\n        }\n    },\n\n    \"member_management_system\": {\n        \"name\": \"Member Management System\",\n        \"description\": \"Access member demographics and management system for patient information\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"info_type\": {\"type\": \"string\", \"description\": \"Type of information requested\", \"enum\": [\"demographics\", \"contact\", \"preferences\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"member_id\": \"MEM123456\",\n            \"demographics\": {\n                \"name\": \"John Doe\",\n                \"date_of_birth\": \"1985-06-15\",\n                \"gender\": \"Male\",\n                \"address\": \"123 Main St, Anytown, ST 12345\"\n            },\n            \"contact_preferences\": {\n                \"email\": \"john.doe@email.com\",\n                \"phone\": \"555-123-4567\",\n                \"preferred_method\": \"email\",\n                \"language\": \"English\"\n            },\n            \"care_team\": {\n                \"primary_care_provider\": \"Dr. Jane Smith\",\n                \"care_coordinator\": \"Sarah Johnson, RN\"\n            },\n            \"risk_score\": 65,\n            \"last_updated\": \"2024-01-15T08:00:00Z\"\n        }\n    },\n\n    \"healthcare_nlp_sentiment\": {\n        \"name\": \"Healthcare NLP Sentiment Analysis\",\n        \"description\": \"Advanced NLP engine optimized for healthcare feedback sentiment analysis\",\n        \"input_schema\": {\n            \"text_content\": {\"type\": \"string\", \"description\": \"Text content to analyze\"},\n            \"analysis_type\": {\"type\": \"string\", \"description\": \"Type of analysis\", \"enum\": [\"sentiment\", \"themes\", \"clinical_terms\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"sentiment_score\": 0.75,\n            \"sentiment_label\": \"positive\",\n            \"confidence\": 0.88,\n            \"themes_extracted\": [\"staff_friendliness\", \"wait_time\", \"treatment_effectiveness\"],\n            \"clinical_terms\": [\"blood_pressure\", \"medication\", \"follow_up\"],\n            \"key_phrases\": [\"very satisfied\", \"professional staff\", \"timely care\"],\n            \"processing_time_ms\": 145\n        }\n    },\n\n    \"symptom_checker_api\": {\n        \"name\": \"Symptom Checker API\",\n        \"description\": \"Advanced symptom analysis and clinical triage assessment system\",\n        \"input_schema\": {\n            \"symptoms\": {\"type\": \"array\", \"description\": \"List of symptoms\"},\n            \"patient_age\": {\"type\": \"integer\", \"description\": \"Patient age\"},\n            \"patient_gender\": {\"type\": \"string\", \"description\": \"Patient gender\"},\n            \"severity\": {\"type\": \"string\", \"description\": \"Symptom severity\", \"enum\": [\"mild\", \"moderate\", \"severe\"]}\n        },\n        \"mock_response\": {\n            \"triage_level\": \"routine\",\n            \"urgency_score\": 3,\n            \"possible_conditions\": [\n                {\"condition\": \"Upper Respiratory Infection\", \"probability\": 0.65},\n                {\"condition\": \"Allergic Rhinitis\", \"probability\": 0.25},\n                {\"condition\": \"Sinusitis\", \"probability\": 0.10}\n            ],\n            \"recommendations\": [\n                \"Consider scheduling routine appointment with primary care\",\n                \"Monitor symptoms for 24-48 hours\",\n                \"Increase fluid intake and rest\"\n            ],\n            \"red_flags\": [],\n            \"follow_up_needed\": \"3-5 days if symptoms persist\"\n        }\n    },\n\n    # HIGH PRIORITY: Patient Experience Tools\n    \"call_center_logs\": {\n        \"name\": \"Call Center Logs Access\",\n        \"description\": \"Access call center logs, transcripts, and metadata for patient feedback analysis\",\n        \"input_schema\": {\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for logs (e.g., '7d', '30d', '6m')\"},\n            \"call_type\": {\"type\": \"string\", \"description\": \"Type of call\", \"enum\": [\"appointment\", \"billing\", \"clinical\", \"complaint\", \"all\"]},\n            \"member_id\": {\"type\": \"string\", \"description\": \"Specific member ID (optional)\"},\n            \"sentiment_filter\": {\"type\": \"string\", \"description\": \"Filter by sentiment\", \"enum\": [\"positive\", \"negative\", \"neutral\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"total_calls\": 1247,\n            \"date_range\": \"2024-01-01 to 2024-01-15\",\n            \"call_summary\": {\n                \"appointment_calls\": 523,\n                \"billing_calls\": 312,\n                \"clinical_calls\": 298,\n                \"complaint_calls\": 114\n            },\n            \"sentiment_breakdown\": {\n                \"positive\": 0.42,\n                \"neutral\": 0.35,\n                \"negative\": 0.23\n            },\n            \"sample_transcripts\": [\n                {\n                    \"call_id\": \"CALL_20240115_001\",\n                    \"timestamp\": \"2024-01-15T09:30:00Z\",\n                    \"duration_minutes\": 8.5,\n                    \"call_type\": \"appointment\",\n                    \"sentiment\": \"positive\",\n                    \"summary\": \"Patient successfully scheduled follow-up appointment, expressed satisfaction with provider\",\n                    \"keywords\": [\"appointment\", \"schedule\", \"satisfied\", \"follow-up\"]\n                },\n                {\n                    \"call_id\": \"CALL_20240115_002\",\n                    \"timestamp\": \"2024-01-15T11:15:00Z\",\n                    \"duration_minutes\": 12.3,\n                    \"call_type\": \"billing\",\n                    \"sentiment\": \"negative\",\n                    \"summary\": \"Patient concerned about unexpected charges, issue escalated to billing department\",\n                    \"keywords\": [\"billing\", \"charges\", \"confused\", \"escalated\"]\n                }\n            ],\n            \"common_issues\": [\n                {\"issue\": \"Long wait times\", \"frequency\": 0.34},\n                {\"issue\": \"Billing confusion\", \"frequency\": 0.28},\n                {\"issue\": \"Appointment scheduling\", \"frequency\": 0.21}\n            ]\n        }\n    },\n\n    \"survey_responses\": {\n        \"name\": \"Survey Response Access\",\n        \"description\": \"Access patient survey responses across multiple survey types and platforms\",\n        \"input_schema\": {\n            \"survey_type\": {\"type\": \"string\", \"description\": \"Type of survey\", \"enum\": [\"satisfaction\", \"post_visit\", \"annual\", \"experience\", \"all\"]},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for responses\"},\n            \"response_status\": {\"type\": \"string\", \"description\": \"Response completion status\", \"enum\": [\"complete\", \"partial\", \"abandoned\", \"all\"]},\n            \"score_range\": {\"type\": \"string\", \"description\": \"Filter by score range (e.g., '1-3', '4-5')\"}\n        },\n        \"mock_response\": {\n            \"total_responses\": 2834,\n            \"response_rate\": 0.67,\n            \"survey_period\": \"2024-01-01 to 2024-01-15\",\n            \"average_scores\": {\n                \"overall_satisfaction\": 4.2,\n                \"provider_communication\": 4.5,\n                \"appointment_scheduling\": 3.8,\n                \"facility_cleanliness\": 4.6,\n                \"wait_time_satisfaction\": 3.4\n            },\n            \"response_distribution\": {\n                \"5_stars\": 0.45,\n                \"4_stars\": 0.28,\n                \"3_stars\": 0.15,\n                \"2_stars\": 0.08,\n                \"1_star\": 0.04\n            },\n            \"recent_responses\": [\n                {\n                    \"response_id\": \"SURV_20240115_001\",\n                    \"survey_type\": \"post_visit\",\n                    \"overall_score\": 5,\n                    \"completion_date\": \"2024-01-15T14:30:00Z\",\n                    \"feedback_text\": \"Excellent care, doctor was very thorough and explained everything clearly\",\n                    \"department\": \"Primary Care\",\n                    \"provider\": \"Dr. Smith\"\n                },\n                {\n                    \"response_id\": \"SURV_20240115_002\",\n                    \"survey_type\": \"satisfaction\",\n                    \"overall_score\": 2,\n                    \"completion_date\": \"2024-01-15T16:45:00Z\",\n                    \"feedback_text\": \"Long wait time, difficult to get appointment\",\n                    \"department\": \"Cardiology\",\n                    \"provider\": \"Dr. Johnson\"\n                }\n            ],\n            \"trending_topics\": [\n                {\"topic\": \"wait_times\", \"sentiment\": \"negative\", \"frequency\": 0.42},\n                {\"topic\": \"staff_friendliness\", \"sentiment\": \"positive\", \"frequency\": 0.38},\n                {\"topic\": \"appointment_availability\", \"sentiment\": \"negative\", \"frequency\": 0.31}\n            ]\n        }\n    },\n\n    \"complaint_management\": {\n        \"name\": \"Complaint Management System\",\n        \"description\": \"Access formal complaints, grievances, and resolution data from CRM systems\",\n        \"input_schema\": {\n            \"complaint_status\": {\"type\": \"string\", \"description\": \"Status of complaint\", \"enum\": [\"open\", \"investigating\", \"resolved\", \"escalated\", \"all\"]},\n            \"severity_level\": {\"type\": \"string\", \"description\": \"Complaint severity\", \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for complaints\"},\n            \"department\": {\"type\": \"string\", \"description\": \"Department involved (optional)\"}\n        },\n        \"mock_response\": {\n            \"total_complaints\": 89,\n            \"period\": \"2024-01-01 to 2024-01-15\",\n            \"status_breakdown\": {\n                \"open\": 23,\n                \"investigating\": 31,\n                \"resolved\": 28,\n                \"escalated\": 7\n            },\n            \"severity_distribution\": {\n                \"low\": 0.34,\n                \"medium\": 0.45,\n                \"high\": 0.18,\n                \"critical\": 0.03\n            },\n            \"average_resolution_time_days\": 8.5,\n            \"departments_most_complaints\": [\n                {\"department\": \"Billing\", \"count\": 32},\n                {\"department\": \"Scheduling\", \"count\": 21},\n                {\"department\": \"Clinical Care\", \"count\": 18},\n                {\"department\": \"Customer Service\", \"count\": 12}\n            ],\n            \"recent_complaints\": [\n                {\n                    \"complaint_id\": \"COMP_20240115_001\",\n                    \"submitted_date\": \"2024-01-15T10:00:00Z\",\n                    \"severity\": \"high\",\n                    \"status\": \"investigating\",\n                    \"department\": \"Billing\",\n                    \"summary\": \"Patient charged for services not received, insurance claim processed incorrectly\",\n                    \"complainant_type\": \"patient\",\n                    \"assigned_to\": \"Billing Manager\"\n                },\n                {\n                    \"complaint_id\": \"COMP_20240115_002\",\n                    \"submitted_date\": \"2024-01-15T14:30:00Z\",\n                    \"severity\": \"medium\",\n                    \"status\": \"open\",\n                    \"department\": \"Clinical Care\",\n                    \"summary\": \"Patient dissatisfied with wait time for specialist referral\",\n                    \"complainant_type\": \"patient\",\n                    \"assigned_to\": \"Patient Relations\"\n                }\n            ],\n            \"complaint_categories\": [\n                {\"category\": \"Billing/Financial\", \"percentage\": 0.36},\n                {\"category\": \"Access/Scheduling\", \"percentage\": 0.24},\n                {\"category\": \"Quality of Care\", \"percentage\": 0.20},\n                {\"category\": \"Communication\", \"percentage\": 0.20}\n            ]\n        }\n    },\n\n    \"ehr_calendar_access\": {\n        \"name\": \"EHR Calendar Access\",\n        \"description\": \"Access electronic health record system for provider scheduling and availability\",\n        \"input_schema\": {\n            \"provider_id\": {\"type\": \"string\", \"description\": \"Provider identifier or NPI\"},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for availability check\"},\n            \"appointment_type\": {\"type\": \"string\", \"description\": \"Type of appointment\", \"enum\": [\"routine\", \"urgent\", \"follow_up\", \"new_patient\", \"procedure\"]},\n            \"location\": {\"type\": \"string\", \"description\": \"Clinic location (optional)\"}\n        },\n        \"mock_response\": {\n            \"provider_id\": \"NPI_1234567890\",\n            \"provider_name\": \"Dr. Jane Smith\",\n            \"specialty\": \"Internal Medicine\",\n            \"location\": \"Main Clinic - Building A\",\n            \"availability_summary\": {\n                \"total_slots_available\": 47,\n                \"next_available\": \"2024-01-17T09:00:00Z\",\n                \"earliest_routine\": \"2024-01-22T14:30:00Z\",\n                \"earliest_urgent\": \"2024-01-16T16:00:00Z\"\n            },\n            \"weekly_schedule\": {\n                \"monday\": {\"start\": \"08:00\", \"end\": \"17:00\", \"lunch\": \"12:00-13:00\"},\n                \"tuesday\": {\"start\": \"08:00\", \"end\": \"17:00\", \"lunch\": \"12:00-13:00\"},\n                \"wednesday\": {\"start\": \"08:00\", \"end\": \"12:00\", \"lunch\": None},\n                \"thursday\": {\"start\": \"08:00\", \"end\": \"17:00\", \"lunch\": \"12:00-13:00\"},\n                \"friday\": {\"start\": \"08:00\", \"end\": \"16:00\", \"lunch\": \"12:00-13:00\"}\n            },\n            \"available_slots\": [\n                {\n                    \"date\": \"2024-01-17\",\n                    \"time\": \"09:00\",\n                    \"duration_minutes\": 30,\n                    \"appointment_type\": \"routine\",\n                    \"status\": \"available\"\n                },\n                {\n                    \"date\": \"2024-01-17\",\n                    \"time\": \"09:30\",\n                    \"duration_minutes\": 30,\n                    \"appointment_type\": \"routine\",\n                    \"status\": \"available\"\n                },\n                {\n                    \"date\": \"2024-01-17\",\n                    \"time\": \"14:00\",\n                    \"duration_minutes\": 60,\n                    \"appointment_type\": \"new_patient\",\n                    \"status\": \"available\"\n                }\n            ],\n            \"upcoming_appointments\": [\n                {\n                    \"date\": \"2024-01-16\",\n                    \"time\": \"10:00\",\n                    \"patient_name\": \"John Doe\",\n                    \"appointment_type\": \"follow_up\",\n                    \"reason\": \"Diabetes management\"\n                }\n            ]\n        }\n    },\n\n    \"email_service\": {\n        \"name\": \"Email Communication Service\",\n        \"description\": \"Email service for comprehensive patient communication and appointment management\",\n        \"input_schema\": {\n            \"recipient\": {\"type\": \"string\", \"description\": \"Recipient email address\"},\n            \"message_type\": {\"type\": \"string\", \"description\": \"Type of email\", \"enum\": [\"appointment_confirmation\", \"reminder\", \"follow_up\", \"survey\", \"newsletter\", \"custom\"]},\n            \"template_id\": {\"type\": \"string\", \"description\": \"Email template identifier (optional)\"},\n            \"personalization_data\": {\"type\": \"object\", \"description\": \"Data for email personalization\"}\n        },\n        \"mock_response\": {\n            \"email_id\": \"EMAIL_20240115_001\",\n            \"status\": \"sent\",\n            \"sent_timestamp\": \"2024-01-15T10:30:00Z\",\n            \"recipient\": \"patient@example.com\",\n            \"subject\": \"Appointment Confirmation - Dr. Smith on Jan 22, 2024\",\n            \"message_type\": \"appointment_confirmation\",\n            \"delivery_status\": {\n                \"delivered\": True,\n                \"opened\": False,\n                \"clicked\": False,\n                \"bounce\": False,\n                \"complaint\": False\n            },\n            \"tracking_metrics\": {\n                \"delivery_time_seconds\": 2.3,\n                \"estimated_read_time\": \"45 seconds\",\n                \"mobile_friendly\": True,\n                \"accessibility_score\": 0.95\n            },\n            \"email_content\": {\n                \"preview_text\": \"Your appointment with Dr. Smith is confirmed for January 22, 2024 at 2:30 PM\",\n                \"personalization_applied\": [\n                    \"patient_name\",\n                    \"provider_name\",\n                    \"appointment_date\",\n                    \"appointment_time\",\n                    \"location\"\n                ],\n                \"call_to_action\": \"Add to Calendar\",\n                \"attachments\": [\"appointment_prep_instructions.pdf\"]\n            },\n            \"campaign_data\": {\n                \"campaign_id\": \"APPT_CONFIRM_2024\",\n                \"segment\": \"scheduled_patients\",\n                \"a_b_test_variant\": \"standard\"\n            }\n        }\n    },\n\n    \"sms_gateway\": {\n        \"name\": \"SMS Gateway Service\",\n        \"description\": \"SMS messaging service for patient communication and notifications\",\n        \"input_schema\": {\n            \"phone_number\": {\"type\": \"string\", \"description\": \"Recipient phone number\"},\n            \"message_type\": {\"type\": \"string\", \"description\": \"Type of SMS\", \"enum\": [\"appointment_reminder\", \"confirmation\", \"follow_up\", \"health_tip\", \"urgent\", \"survey\"]},\n            \"message_content\": {\"type\": \"string\", \"description\": \"SMS message content\"},\n            \"send_time\": {\"type\": \"string\", \"description\": \"Scheduled send time (optional)\"}\n        },\n        \"mock_response\": {\n            \"message_id\": \"SMS_20240115_001\",\n            \"status\": \"sent\",\n            \"sent_timestamp\": \"2024-01-15T10:30:00Z\",\n            \"phone_number\": \"+1-555-123-4567\",\n            \"message_type\": \"appointment_reminder\",\n            \"message_content\": \"Reminder: You have an appointment with Dr. Smith tomorrow at 2:30 PM. Reply CONFIRM to confirm or CANCEL to reschedule. Main Clinic, 123 Health St.\",\n            \"character_count\": 147,\n            \"segment_count\": 1,\n            \"delivery_status\": {\n                \"delivered\": True,\n                \"delivery_time_seconds\": 1.8,\n                \"carrier\": \"Verizon\",\n                \"country_code\": \"US\"\n            },\n            \"response_tracking\": {\n                \"response_expected\": True,\n                \"response_received\": False,\n                \"response_deadline\": \"2024-01-16T14:30:00Z\",\n                \"auto_response_enabled\": True\n            },\n            \"cost_data\": {\n                \"cost_per_message\": 0.0075,\n                \"currency\": \"USD\",\n                \"billing_category\": \"patient_communications\"\n            },\n            \"compliance\": {\n                \"opt_in_status\": \"confirmed\",\n                \"opt_in_date\": \"2024-01-10T09:00:00Z\",\n                \"do_not_disturb_respected\": True,\n                \"hipaa_compliant\": True\n            }\n        }\n    },\n\n    # MEDIUM PRIORITY: Clinical & Analytics Tools\n    \"appointment_analytics\": {\n        \"name\": \"Appointment Analytics Platform\",\n        \"description\": \"Analytics platform for tracking appointment scheduling performance and KPIs\",\n        \"input_schema\": {\n            \"metric_type\": {\"type\": \"string\", \"description\": \"Type of metric\", \"enum\": [\"scheduling\", \"cancellation\", \"no_show\", \"satisfaction\", \"utilization\", \"all\"]},\n            \"time_period\": {\"type\": \"string\", \"description\": \"Analysis time period\", \"enum\": [\"daily\", \"weekly\", \"monthly\", \"quarterly\"]},\n            \"department\": {\"type\": \"string\", \"description\": \"Department filter (optional)\"},\n            \"provider_id\": {\"type\": \"string\", \"description\": \"Specific provider analysis (optional)\"}\n        },\n        \"mock_response\": {\n            \"analysis_period\": \"2024-01-01 to 2024-01-15\",\n            \"total_appointments\": 3247,\n            \"key_metrics\": {\n                \"scheduling_efficiency\": 0.87,\n                \"no_show_rate\": 0.12,\n                \"cancellation_rate\": 0.08,\n                \"average_booking_lead_time_days\": 12.5,\n                \"same_day_availability\": 0.23,\n                \"patient_satisfaction_score\": 4.3\n            },\n            \"department_performance\": [\n                {\n                    \"department\": \"Primary Care\",\n                    \"appointments\": 1523,\n                    \"no_show_rate\": 0.10,\n                    \"satisfaction\": 4.4,\n                    \"utilization\": 0.92\n                },\n                {\n                    \"department\": \"Cardiology\",\n                    \"appointments\": 456,\n                    \"no_show_rate\": 0.15,\n                    \"satisfaction\": 4.2,\n                    \"utilization\": 0.88\n                },\n                {\n                    \"department\": \"Orthopedics\",\n                    \"appointments\": 387,\n                    \"no_show_rate\": 0.13,\n                    \"satisfaction\": 4.1,\n                    \"utilization\": 0.85\n                }\n            ],\n            \"trending_metrics\": {\n                \"appointment_volume_trend\": \"increasing\",\n                \"no_show_trend\": \"stable\",\n                \"satisfaction_trend\": \"improving\",\n                \"wait_time_trend\": \"decreasing\"\n            },\n            \"recommendations\": [\n                \"Implement automated reminder system to reduce no-shows\",\n                \"Expand same-day scheduling availability\",\n                \"Focus on orthopedics department satisfaction improvement\"\n            ]\n        }\n    },\n\n    \"patient_feedback_analytics\": {\n        \"name\": \"Patient Feedback Analytics\",\n        \"description\": \"Advanced patient feedback and satisfaction tracking system for navigation quality improvement\",\n        \"input_schema\": {\n            \"feedback_source\": {\"type\": \"string\", \"description\": \"Source of feedback\", \"enum\": [\"surveys\", \"calls\", \"online\", \"in_person\", \"all\"]},\n            \"sentiment_analysis\": {\"type\": \"boolean\", \"description\": \"Include sentiment analysis\"},\n            \"time_period\": {\"type\": \"string\", \"description\": \"Analysis period\"},\n            \"department_filter\": {\"type\": \"string\", \"description\": \"Filter by department (optional)\"}\n        },\n        \"mock_response\": {\n            \"analysis_period\": \"2024-01-01 to 2024-01-15\",\n            \"total_feedback_items\": 1847,\n            \"overall_sentiment_score\": 0.72,\n            \"sentiment_distribution\": {\n                \"very_positive\": 0.34,\n                \"positive\": 0.28,\n                \"neutral\": 0.23,\n                \"negative\": 0.12,\n                \"very_negative\": 0.03\n            },\n            \"feedback_themes\": [\n                {\n                    \"theme\": \"staff_communication\",\n                    \"sentiment\": \"positive\",\n                    \"frequency\": 0.45,\n                    \"average_score\": 4.3,\n                    \"sample_comments\": [\n                        \"Nurses were very helpful and explained everything\",\n                        \"Doctor listened carefully to my concerns\"\n                    ]\n                },\n                {\n                    \"theme\": \"wait_times\",\n                    \"sentiment\": \"negative\",\n                    \"frequency\": 0.38,\n                    \"average_score\": 2.1,\n                    \"sample_comments\": [\n                        \"Waited 45 minutes past appointment time\",\n                        \"Long delays in emergency department\"\n                    ]\n                },\n                {\n                    \"theme\": \"facility_cleanliness\",\n                    \"sentiment\": \"positive\",\n                    \"frequency\": 0.31,\n                    \"average_score\": 4.6,\n                    \"sample_comments\": [\n                        \"Very clean and well-maintained facilities\",\n                        \"Impressive attention to hygiene protocols\"\n                    ]\n                }\n            ],\n            \"department_feedback\": [\n                {\n                    \"department\": \"Emergency\",\n                    \"feedback_count\": 523,\n                    \"average_sentiment\": 0.65,\n                    \"primary_concerns\": [\"wait_times\", \"communication\", \"triage_process\"]\n                },\n                {\n                    \"department\": \"Outpatient Surgery\",\n                    \"feedback_count\": 298,\n                    \"average_sentiment\": 0.84,\n                    \"primary_concerns\": [\"pre_op_instructions\", \"post_op_care\", \"scheduling\"]\n                }\n            ],\n            \"improvement_opportunities\": [\n                \"Reduce wait times in primary care (target: <15 min)\",\n                \"Enhance communication training for emergency staff\",\n                \"Implement real-time feedback collection system\"\n            ],\n            \"trending_topics\": {\n                \"emerging_positive\": [\"telehealth_experience\", \"appointment_flexibility\"],\n                \"emerging_negative\": [\"parking_availability\", \"phone_system_navigation\"]\n            }\n        }\n    },\n\n    \"ehr_care_plans\": {\n        \"name\": \"EHR Care Plans Access\",\n        \"description\": \"Access electronic health record care plans and clinical protocols\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"care_plan_type\": {\"type\": \"string\", \"description\": \"Type of care plan\", \"enum\": [\"chronic_disease\", \"post_acute\", \"preventive\", \"wellness\", \"all\"]},\n            \"active_only\": {\"type\": \"boolean\", \"description\": \"Return only active care plans\"},\n            \"include_goals\": {\"type\": \"boolean\", \"description\": \"Include care plan goals and outcomes\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT123456\",\n            \"total_care_plans\": 3,\n            \"active_care_plans\": 2,\n            \"last_updated\": \"2024-01-15T08:00:00Z\",\n            \"care_plans\": [\n                {\n                    \"care_plan_id\": \"CP_DIABETES_001\",\n                    \"plan_type\": \"chronic_disease\",\n                    \"condition\": \"Type 2 Diabetes Mellitus\",\n                    \"status\": \"active\",\n                    \"start_date\": \"2023-06-15\",\n                    \"next_review_date\": \"2024-03-15\",\n                    \"care_team\": [\n                        {\"role\": \"Primary Care Provider\", \"name\": \"Dr. Jane Smith\"},\n                        {\"role\": \"Diabetes Educator\", \"name\": \"Sarah Johnson, RN\"},\n                        {\"role\": \"Nutritionist\", \"name\": \"Mike Chen, RD\"}\n                    ],\n                    \"goals\": [\n                        {\n                            \"goal\": \"HbA1c < 7%\",\n                            \"target_date\": \"2024-06-15\",\n                            \"current_value\": \"7.2%\",\n                            \"status\": \"in_progress\"\n                        },\n                        {\n                            \"goal\": \"Weight loss 10 lbs\",\n                            \"target_date\": \"2024-04-15\",\n                            \"current_value\": \"-6 lbs\",\n                            \"status\": \"on_track\"\n                        }\n                    ],\n                    \"interventions\": [\n                        \"Metformin 500mg twice daily\",\n                        \"Blood glucose monitoring 2x daily\",\n                        \"Nutritionist consultation monthly\",\n                        \"Exercise plan: 30 min walking 5x/week\"\n                    ],\n                    \"next_actions\": [\n                        \"Lab work scheduled for 2024-01-22\",\n                        \"Follow-up appointment with Dr. Smith on 2024-01-29\"\n                    ]\n                },\n                {\n                    \"care_plan_id\": \"CP_HYPERTENSION_001\",\n                    \"plan_type\": \"chronic_disease\",\n                    \"condition\": \"Hypertension\",\n                    \"status\": \"active\",\n                    \"start_date\": \"2023-08-20\",\n                    \"next_review_date\": \"2024-02-20\",\n                    \"care_team\": [\n                        {\"role\": \"Primary Care Provider\", \"name\": \"Dr. Jane Smith\"},\n                        {\"role\": \"Pharmacist\", \"name\": \"David Lee, PharmD\"}\n                    ],\n                    \"goals\": [\n                        {\n                            \"goal\": \"Blood pressure < 130/80\",\n                            \"target_date\": \"2024-05-20\",\n                            \"current_value\": \"138/85\",\n                            \"status\": \"needs_adjustment\"\n                        }\n                    ],\n                    \"interventions\": [\n                        \"Lisinopril 10mg once daily\",\n                        \"Home blood pressure monitoring\",\n                        \"DASH diet consultation\",\n                        \"Sodium restriction < 2g daily\"\n                    ]\n                }\n            ],\n            \"quality_measures\": {\n                \"diabetes_control\": \"needs_improvement\",\n                \"hypertension_control\": \"adequate\",\n                \"medication_adherence_score\": 0.78,\n                \"care_plan_completion_rate\": 0.85\n            }\n        }\n    },\n\n    \"medication_records\": {\n        \"name\": \"Medication Records Access\",\n        \"description\": \"Access detailed medication information for patient questions and medication management\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"medication_name\": {\"type\": \"string\", \"description\": \"Specific medication name (optional)\"},\n            \"active_only\": {\"type\": \"boolean\", \"description\": \"Return only active medications\"},\n            \"include_history\": {\"type\": \"boolean\", \"description\": \"Include medication history and changes\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT123456\",\n            \"total_medications\": 8,\n            \"active_medications\": 5,\n            \"last_updated\": \"2024-01-15T10:00:00Z\",\n            \"current_medications\": [\n                {\n                    \"medication_id\": \"MED_001\",\n                    \"name\": \"Metformin\",\n                    \"generic_name\": \"Metformin Hydrochloride\",\n                    \"strength\": \"500mg\",\n                    \"dosage_form\": \"tablet\",\n                    \"directions\": \"Take 1 tablet by mouth twice daily with meals\",\n                    \"quantity\": 60,\n                    \"days_supply\": 30,\n                    \"refills_remaining\": 3,\n                    \"prescriber\": \"Dr. Jane Smith\",\n                    \"pharmacy\": \"CVS Pharmacy #1234\",\n                    \"date_prescribed\": \"2023-12-15\",\n                    \"last_filled\": \"2024-01-10\",\n                    \"next_refill_due\": \"2024-02-09\",\n                    \"indication\": \"Type 2 Diabetes Mellitus\",\n                    \"status\": \"active\"\n                },\n                {\n                    \"medication_id\": \"MED_002\",\n                    \"name\": \"Lisinopril\",\n                    \"generic_name\": \"Lisinopril\",\n                    \"strength\": \"10mg\",\n                    \"dosage_form\": \"tablet\",\n                    \"directions\": \"Take 1 tablet by mouth once daily\",\n                    \"quantity\": 30,\n                    \"days_supply\": 30,\n                    \"refills_remaining\": 5,\n                    \"prescriber\": \"Dr. Jane Smith\",\n                    \"pharmacy\": \"CVS Pharmacy #1234\",\n                    \"date_prescribed\": \"2023-11-20\",\n                    \"last_filled\": \"2024-01-05\",\n                    \"next_refill_due\": \"2024-02-04\",\n                    \"indication\": \"Hypertension\",\n                    \"status\": \"active\"\n                }\n            ],\n            \"medication_alerts\": [\n                {\n                    \"alert_type\": \"refill_reminder\",\n                    \"medication\": \"Metformin\",\n                    \"message\": \"Refill due in 5 days\",\n                    \"priority\": \"medium\"\n                },\n                {\n                    \"alert_type\": \"interaction_check\",\n                    \"medications\": [\"Metformin\", \"Lisinopril\"],\n                    \"message\": \"No significant interactions detected\",\n                    \"priority\": \"low\"\n                }\n            ],\n            \"adherence_data\": {\n                \"overall_adherence_score\": 0.85,\n                \"medications_on_schedule\": 4,\n                \"medications_delayed\": 1,\n                \"missed_doses_last_30_days\": 3,\n                \"adherence_trend\": \"improving\"\n            },\n            \"medication_history\": [\n                {\n                    \"action\": \"prescribed\",\n                    \"medication\": \"Metformin 500mg\",\n                    \"date\": \"2023-12-15\",\n                    \"provider\": \"Dr. Jane Smith\",\n                    \"reason\": \"Initial diabetes management\"\n                },\n                {\n                    \"action\": \"dosage_increased\",\n                    \"medication\": \"Lisinopril 5mg to 10mg\",\n                    \"date\": \"2024-01-02\",\n                    \"provider\": \"Dr. Jane Smith\",\n                    \"reason\": \"Blood pressure not at target\"\n                }\n            ]\n        }\n    },\n\n    # HIGH PRIORITY: Core Healthcare Operations Tools\n    \"api_component\": {\n        \"name\": \"Generic API Integration Component\",\n        \"description\": \"Flexible API integration tool for connecting with various healthcare systems and external services\",\n        \"input_schema\": {\n            \"endpoint\": {\"type\": \"string\", \"description\": \"API endpoint URL\"},\n            \"method\": {\"type\": \"string\", \"description\": \"HTTP method\", \"enum\": [\"GET\", \"POST\", \"PUT\", \"DELETE\"]},\n            \"payload\": {\"type\": \"object\", \"description\": \"Request payload data\"},\n            \"headers\": {\"type\": \"object\", \"description\": \"Custom headers for the request\"}\n        },\n        \"mock_response\": {\n            \"request_id\": \"API_REQ_20240115_001\",\n            \"status\": \"success\",\n            \"response_time_ms\": 234,\n            \"data\": {\n                \"operation\": \"healthcare_data_sync\",\n                \"records_processed\": 1247,\n                \"timestamp\": \"2024-01-15T10:30:00Z\",\n                \"sync_status\": \"completed\"\n            },\n            \"metadata\": {\n                \"api_version\": \"v2.1\",\n                \"rate_limit_remaining\": 4756,\n                \"next_allowed_request\": \"2024-01-15T10:30:01Z\"\n            },\n            \"validation\": {\n                \"schema_valid\": True,\n                \"data_integrity_check\": \"passed\",\n                \"security_scan\": \"clean\"\n            }\n        }\n    },\n\n    \"encoder_pro\": {\n        \"name\": \"Medical Coding and Validation Tool\",\n        \"description\": \"Advanced medical coding engine for ICD-10, CPT, and HCPCS code validation and suggestions\",\n        \"input_schema\": {\n            \"service_code\": {\"type\": \"string\", \"description\": \"Medical service or procedure code\"},\n            \"diagnosis_codes\": {\"type\": \"array\", \"description\": \"List of diagnosis codes\"},\n            \"validation_type\": {\"type\": \"string\", \"description\": \"Type of validation\", \"enum\": [\"code_validity\", \"medical_necessity\", \"coverage\", \"all\"]},\n            \"payer_type\": {\"type\": \"string\", \"description\": \"Insurance payer type\", \"enum\": [\"medicare\", \"medicaid\", \"commercial\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"validation_id\": \"VAL_20240115_001\",\n            \"service_code\": \"99213\",\n            \"code_description\": \"Office/outpatient visit, established patient, low complexity\",\n            \"validation_status\": \"valid\",\n            \"medical_necessity\": {\n                \"supported\": True,\n                \"confidence_score\": 0.92,\n                \"supporting_diagnoses\": [\"E11.9\", \"I10\"],\n                \"evidence_level\": \"strong\"\n            },\n            \"coverage_analysis\": {\n                \"medicare_covered\": True,\n                \"medicaid_covered\": True,\n                \"commercial_covered\": True,\n                \"prior_auth_required\": False\n            },\n            \"coding_suggestions\": [\n                {\n                    \"alternative_code\": \"99214\",\n                    \"description\": \"Office visit, moderate complexity\",\n                    \"reason\": \"Better documentation support for complexity level\",\n                    \"reimbursement_impact\": \"+15%\"\n                }\n            ],\n            \"compliance_flags\": [],\n            \"processing_time_ms\": 156\n        }\n    },\n\n    \"pa_lookup\": {\n        \"name\": \"Prior Authorization Lookup Tool\",\n        \"description\": \"Comprehensive prior authorization requirements lookup and status checking system\",\n        \"input_schema\": {\n            \"service_code\": {\"type\": \"string\", \"description\": \"CPT or HCPCS service code\"},\n            \"diagnosis_code\": {\"type\": \"string\", \"description\": \"Primary diagnosis code\"},\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"payer_id\": {\"type\": \"string\", \"description\": \"Insurance payer identifier\"},\n            \"provider_npi\": {\"type\": \"string\", \"description\": \"Provider NPI number\"}\n        },\n        \"mock_response\": {\n            \"lookup_id\": \"PA_LOOKUP_20240115_001\",\n            \"service_code\": \"77058\",\n            \"service_description\": \"Mammography, bilateral\",\n            \"pa_requirement\": {\n                \"required\": True,\n                \"urgency_level\": \"routine\",\n                \"estimated_approval_time_days\": 3,\n                \"submission_method\": \"electronic\"\n            },\n            \"payer_specific_rules\": {\n                \"payer_name\": \"Blue Cross Blue Shield\",\n                \"plan_type\": \"PPO\",\n                \"medical_necessity_criteria\": [\n                    \"Age 40+ for routine screening\",\n                    \"Family history documentation if under 40\",\n                    \"Previous imaging results if follow-up\"\n                ],\n                \"required_documentation\": [\n                    \"Clinical notes supporting indication\",\n                    \"Previous mammography reports (if applicable)\",\n                    \"Family history questionnaire\"\n                ]\n            },\n            \"existing_authorizations\": [\n                {\n                    \"auth_number\": \"AUTH123456789\",\n                    \"status\": \"approved\",\n                    \"valid_from\": \"2024-01-01\",\n                    \"valid_to\": \"2024-12-31\",\n                    \"services_covered\": 1,\n                    \"services_used\": 0\n                }\n            ],\n            \"recommendation\": \"Prior authorization required - existing annual auth available\",\n            \"next_steps\": [\"Verify member eligibility\", \"Submit PA request with clinical documentation\"]\n        }\n    },\n\n    \"eligibility_check\": {\n        \"name\": \"Member Eligibility Validation Tool\",\n        \"description\": \"Real-time insurance eligibility verification and benefits checking system\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"service_date\": {\"type\": \"string\", \"description\": \"Date of service (YYYY-MM-DD)\"},\n            \"service_codes\": {\"type\": \"array\", \"description\": \"List of service codes to check\"},\n            \"provider_npi\": {\"type\": \"string\", \"description\": \"Rendering provider NPI\"}\n        },\n        \"mock_response\": {\n            \"eligibility_id\": \"ELIG_20240115_001\",\n            \"member_id\": \"MEM789012345\",\n            \"eligibility_status\": \"active\",\n            \"effective_date\": \"2024-01-01\",\n            \"termination_date\": \"2024-12-31\",\n            \"plan_details\": {\n                \"plan_name\": \"Health Plus PPO\",\n                \"group_number\": \"GRP001234\",\n                \"plan_type\": \"PPO\",\n                \"network_status\": \"in_network\"\n            },\n            \"benefits_summary\": {\n                \"deductible\": {\n                    \"individual_annual\": 1500,\n                    \"individual_remaining\": 1200,\n                    \"family_annual\": 3000,\n                    \"family_remaining\": 2400\n                },\n                \"out_of_pocket_max\": {\n                    \"individual_annual\": 6000,\n                    \"individual_remaining\": 5100,\n                    \"family_annual\": 12000,\n                    \"family_remaining\": 10200\n                },\n                \"copayments\": {\n                    \"primary_care\": 25,\n                    \"specialist\": 50,\n                    \"emergency_room\": 200,\n                    \"urgent_care\": 75\n                }\n            },\n            \"service_coverage\": [\n                {\n                    \"service_code\": \"99213\",\n                    \"covered\": True,\n                    \"copay\": 25,\n                    \"coinsurance\": 0,\n                    \"prior_auth_required\": False\n                }\n            ],\n            \"verification_source\": \"real_time_270_271\",\n            \"last_updated\": \"2024-01-15T10:30:00Z\"\n        }\n    },\n\n    \"ehr_systems_integration\": {\n        \"name\": \"Multi-EHR Systems Integration\",\n        \"description\": \"Comprehensive EHR integration platform for accessing patient data across multiple healthcare systems\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"ehr_systems\": {\"type\": \"array\", \"description\": \"List of EHR systems to query\"},\n            \"data_types\": {\"type\": \"array\", \"description\": \"Types of data to retrieve\", \"enum\": [\"demographics\", \"medications\", \"allergies\", \"lab_results\", \"visits\", \"all\"]},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for clinical data\"}\n        },\n        \"mock_response\": {\n            \"integration_id\": \"EHR_INT_20240115_001\",\n            \"patient_id\": \"PAT789012\",\n            \"systems_queried\": [\"Epic\", \"Cerner\", \"Allscripts\"],\n            \"data_consolidated\": {\n                \"demographics\": {\n                    \"name\": \"John Smith\",\n                    \"dob\": \"1975-08-15\",\n                    \"gender\": \"Male\",\n                    \"mrn_mappings\": {\n                        \"Epic\": \"EPI123456\",\n                        \"Cerner\": \"CER789012\",\n                        \"Allscripts\": \"ALL345678\"\n                    }\n                },\n                \"medications\": [\n                    {\n                        \"medication\": \"Lisinopril 10mg\",\n                        \"source_system\": \"Epic\",\n                        \"prescriber\": \"Dr. Johnson\",\n                        \"start_date\": \"2023-06-15\",\n                        \"status\": \"active\"\n                    },\n                    {\n                        \"medication\": \"Metformin 500mg\",\n                        \"source_system\": \"Cerner\",\n                        \"prescriber\": \"Dr. Smith\",\n                        \"start_date\": \"2023-08-01\",\n                        \"status\": \"active\"\n                    }\n                ],\n                \"allergies\": [\n                    {\n                        \"allergen\": \"Penicillin\",\n                        \"reaction\": \"Rash\",\n                        \"severity\": \"Moderate\",\n                        \"source_system\": \"Epic\"\n                    }\n                ],\n                \"recent_visits\": [\n                    {\n                        \"date\": \"2024-01-10\",\n                        \"provider\": \"Dr. Johnson\",\n                        \"facility\": \"Metro Medical Center\",\n                        \"diagnosis\": \"Hypertension follow-up\",\n                        \"source_system\": \"Epic\"\n                    }\n                ]\n            },\n            \"data_quality\": {\n                \"completeness_score\": 0.89,\n                \"consistency_score\": 0.94,\n                \"duplicate_records_found\": 2,\n                \"conflicts_resolved\": 1\n            },\n            \"integration_metadata\": {\n                \"systems_available\": 3,\n                \"systems_responded\": 3,\n                \"response_time_seconds\": 2.8,\n                \"last_sync\": \"2024-01-15T10:30:00Z\"\n            }\n        }\n    },\n\n    \"referral_management_systems\": {\n        \"name\": \"Referral Management Platform Integration\",\n        \"description\": \"Comprehensive referral coordination platform for managing specialist referrals and care transitions\",\n        \"input_schema\": {\n            \"referral_id\": {\"type\": \"string\", \"description\": \"Referral identifier (optional for new referrals)\"},\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"specialty_type\": {\"type\": \"string\", \"description\": \"Specialty type for referral\"},\n            \"urgency_level\": {\"type\": \"string\", \"description\": \"Referral urgency\", \"enum\": [\"routine\", \"urgent\", \"stat\"]},\n            \"operation\": {\"type\": \"string\", \"description\": \"Operation type\", \"enum\": [\"create\", \"status_check\", \"update\", \"search\"]}\n        },\n        \"mock_response\": {\n            \"referral_id\": \"REF_20240115_001\",\n            \"patient_id\": \"PAT789012\",\n            \"referral_status\": \"pending_appointment\",\n            \"specialty_requested\": \"Cardiology\",\n            \"referring_provider\": {\n                \"name\": \"Dr. Jane Smith\",\n                \"npi\": \"1234567890\",\n                \"facility\": \"Primary Care Associates\"\n            },\n            \"target_provider\": {\n                \"name\": \"Dr. Michael Chen\",\n                \"npi\": \"0987654321\",\n                \"facility\": \"Heart & Vascular Center\",\n                \"next_available\": \"2024-01-22T14:00:00Z\"\n            },\n            \"referral_details\": {\n                \"reason\": \"Abnormal EKG findings\",\n                \"clinical_summary\": \"Patient presents with irregular rhythm on routine EKG\",\n                \"urgency\": \"routine\",\n                \"requested_services\": [\"Consultation\", \"Echocardiogram\"],\n                \"insurance_verified\": True\n            },\n            \"workflow_status\": {\n                \"authorization_required\": True,\n                \"authorization_status\": \"approved\",\n                \"appointment_scheduled\": False,\n                \"patient_contacted\": True,\n                \"estimated_completion\": \"2024-01-25\"\n            },\n            \"communication_log\": [\n                {\n                    \"date\": \"2024-01-15T09:00:00Z\",\n                    \"action\": \"referral_submitted\",\n                    \"party\": \"referring_provider\"\n                },\n                {\n                    \"date\": \"2024-01-15T10:30:00Z\",\n                    \"action\": \"insurance_verified\",\n                    \"party\": \"referral_coordinator\"\n                }\n            ]\n        }\n    },\n\n    \"hie_integration\": {\n        \"name\": \"Health Information Exchange Integration\",\n        \"description\": \"Health Information Exchange connectivity for cross-provider data sharing and interoperability\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"hie_networks\": {\"type\": \"array\", \"description\": \"HIE networks to query\", \"enum\": [\"CommonWell\", \"Carequality\", \"Regional_HIE\", \"all\"]},\n            \"data_categories\": {\"type\": \"array\", \"description\": \"Categories of data to retrieve\"},\n            \"consent_status\": {\"type\": \"string\", \"description\": \"Patient consent status\", \"enum\": [\"active\", \"verify_required\"]}\n        },\n        \"mock_response\": {\n            \"hie_query_id\": \"HIE_20240115_001\",\n            \"patient_id\": \"PAT789012\",\n            \"networks_queried\": [\"CommonWell\", \"Carequality\", \"Metro Regional HIE\"],\n            \"consent_verified\": True,\n            \"participating_organizations\": [\n                {\n                    \"organization\": \"Metro Hospital System\",\n                    \"network\": \"CommonWell\",\n                    \"data_available\": [\"encounters\", \"medications\", \"allergies\", \"lab_results\"],\n                    \"last_activity\": \"2024-01-10\"\n                },\n                {\n                    \"organization\": \"Regional Medical Center\",\n                    \"network\": \"Carequality\",\n                    \"data_available\": [\"emergency_visits\", \"radiology\", \"discharge_summaries\"],\n                    \"last_activity\": \"2024-01-08\"\n                },\n                {\n                    \"organization\": \"Community Health Partners\",\n                    \"network\": \"Metro Regional HIE\",\n                    \"data_available\": [\"primary_care_visits\", \"preventive_care\", \"immunizations\"],\n                    \"last_activity\": \"2024-01-12\"\n                }\n            ],\n            \"consolidated_data\": {\n                \"encounters_summary\": {\n                    \"total_encounters\": 15,\n                    \"emergency_visits\": 2,\n                    \"inpatient_stays\": 1,\n                    \"outpatient_visits\": 12,\n                    \"date_range\": \"2023-01-01 to 2024-01-15\"\n                },\n                \"medications_reconciled\": 8,\n                \"allergies_consolidated\": 3,\n                \"immunizations_current\": True\n            },\n            \"data_quality_metrics\": {\n                \"completeness\": 0.87,\n                \"timeliness\": 0.92,\n                \"accuracy_score\": 0.89,\n                \"duplicate_entries\": 4\n            },\n            \"privacy_compliance\": {\n                \"consent_documented\": True,\n                \"minimum_necessary_applied\": True,\n                \"audit_trail_complete\": True,\n                \"data_retention_policy\": \"7 years\"\n            }\n        }\n    },\n\n    \"care_management_platforms\": {\n        \"name\": \"Care Management Platform Integration\",\n        \"description\": \"Comprehensive care coordination platform for care plans, team communication, and outcome tracking\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"care_plan_type\": {\"type\": \"string\", \"description\": \"Type of care plan\", \"enum\": [\"chronic_disease\", \"post_acute\", \"transitional\", \"wellness\", \"all\"]},\n            \"team_member_role\": {\"type\": \"string\", \"description\": \"Care team member role filter\"},\n            \"include_outcomes\": {\"type\": \"boolean\", \"description\": \"Include outcome measurements\"}\n        },\n        \"mock_response\": {\n            \"care_management_id\": \"CM_20240115_001\",\n            \"patient_id\": \"PAT789012\",\n            \"active_care_plans\": [\n                {\n                    \"plan_id\": \"CP_DIABETES_001\",\n                    \"plan_type\": \"chronic_disease\",\n                    \"condition\": \"Type 2 Diabetes\",\n                    \"start_date\": \"2023-06-15\",\n                    \"status\": \"active\",\n                    \"care_manager\": \"Sarah Johnson, RN\",\n                    \"next_review\": \"2024-03-15\"\n                },\n                {\n                    \"plan_id\": \"CP_HTN_001\",\n                    \"plan_type\": \"chronic_disease\",\n                    \"condition\": \"Hypertension\",\n                    \"start_date\": \"2023-08-01\",\n                    \"status\": \"active\",\n                    \"care_manager\": \"Mike Chen, PharmD\",\n                    \"next_review\": \"2024-02-01\"\n                }\n            ],\n            \"care_team\": [\n                {\n                    \"role\": \"Primary Care Provider\",\n                    \"name\": \"Dr. Jane Smith\",\n                    \"contact\": \"jsmith@primarycare.com\",\n                    \"last_contact\": \"2024-01-10\"\n                },\n                {\n                    \"role\": \"Care Manager\",\n                    \"name\": \"Sarah Johnson, RN\",\n                    \"contact\": \"sjohnson@caremanagement.com\",\n                    \"last_contact\": \"2024-01-12\"\n                },\n                {\n                    \"role\": \"Pharmacist\",\n                    \"name\": \"Mike Chen, PharmD\",\n                    \"contact\": \"mchen@pharmacy.com\",\n                    \"last_contact\": \"2024-01-08\"\n                }\n            ],\n            \"risk_stratification\": {\n                \"overall_risk_score\": 72,\n                \"risk_category\": \"moderate\",\n                \"primary_risk_factors\": [\"diabetes_control\", \"medication_adherence\", \"social_determinants\"],\n                \"intervention_priority\": \"medium\"\n            },\n            \"outcome_measures\": {\n                \"hba1c_trend\": \"improving\",\n                \"blood_pressure_control\": \"adequate\",\n                \"medication_adherence_score\": 0.78,\n                \"patient_engagement_score\": 0.85,\n                \"quality_measures_met\": 7,\n                \"quality_measures_total\": 10\n            },\n            \"recent_interactions\": [\n                {\n                    \"date\": \"2024-01-12\",\n                    \"type\": \"care_coordination_call\",\n                    \"participant\": \"Sarah Johnson, RN\",\n                    \"summary\": \"Reviewed medication adherence, scheduled lab work\",\n                    \"action_items\": [\"Schedule HbA1c test\", \"Med adherence counseling\"]\n                }\n            ]\n        }\n    },\n\n    # MEDIUM PRIORITY: Claims & Analytics Tools\n    \"qnext_auth_history\": {\n        \"name\": \"QNext Authorization History\",\n        \"description\": \"QNext platform authorization history and prior authorization tracking system\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"auth_number\": {\"type\": \"string\", \"description\": \"Specific authorization number (optional)\"},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for authorization history\"},\n            \"status_filter\": {\"type\": \"string\", \"description\": \"Authorization status filter\", \"enum\": [\"approved\", \"denied\", \"pending\", \"expired\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"member_id\": \"MEM789012345\",\n            \"query_period\": \"2023-01-01 to 2024-01-15\",\n            \"total_authorizations\": 23,\n            \"authorization_summary\": {\n                \"approved\": 18,\n                \"denied\": 3,\n                \"pending\": 1,\n                \"expired\": 1\n            },\n            \"authorization_history\": [\n                {\n                    \"auth_number\": \"QNEXT_AUTH_001234\",\n                    \"service_code\": \"77058\",\n                    \"service_description\": \"Mammography, bilateral\",\n                    \"status\": \"approved\",\n                    \"approved_date\": \"2024-01-10\",\n                    \"valid_from\": \"2024-01-15\",\n                    \"valid_to\": \"2024-07-15\",\n                    \"authorized_units\": 1,\n                    \"units_used\": 0,\n                    \"provider_name\": \"Metro Imaging Center\",\n                    \"medical_necessity\": \"routine_screening\"\n                },\n                {\n                    \"auth_number\": \"QNEXT_AUTH_001235\",\n                    \"service_code\": \"93306\",\n                    \"service_description\": \"Echocardiography\",\n                    \"status\": \"approved\",\n                    \"approved_date\": \"2024-01-05\",\n                    \"valid_from\": \"2024-01-08\",\n                    \"valid_to\": \"2024-04-08\",\n                    \"authorized_units\": 1,\n                    \"units_used\": 1,\n                    \"provider_name\": \"Cardiology Associates\",\n                    \"medical_necessity\": \"abnormal_ekg\"\n                }\n            ],\n            \"utilization_metrics\": {\n                \"authorization_approval_rate\": 0.87,\n                \"average_approval_time_days\": 2.5,\n                \"utilization_rate\": 0.78,\n                \"most_common_services\": [\"imaging\", \"specialty_consultations\", \"procedures\"]\n            },\n            \"recent_trends\": {\n                \"monthly_authorization_volume\": \"stable\",\n                \"approval_rate_trend\": \"improving\",\n                \"denial_reasons\": [\"insufficient_documentation\", \"not_medically_necessary\", \"experimental\"]\n            }\n        }\n    },\n\n    \"claims_history\": {\n        \"name\": \"Claims History Access\",\n        \"description\": \"Comprehensive claims history database for member claims tracking and analysis\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"claim_type\": {\"type\": \"string\", \"description\": \"Type of claim\", \"enum\": [\"medical\", \"pharmacy\", \"dental\", \"vision\", \"all\"]},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for claims history\"},\n            \"status_filter\": {\"type\": \"string\", \"description\": \"Claim status filter\", \"enum\": [\"paid\", \"denied\", \"pending\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"member_id\": \"MEM789012345\",\n            \"claims_period\": \"2023-01-01 to 2024-01-15\",\n            \"total_claims\": 47,\n            \"claims_summary\": {\n                \"medical_claims\": 32,\n                \"pharmacy_claims\": 12,\n                \"dental_claims\": 2,\n                \"vision_claims\": 1\n            },\n            \"financial_summary\": {\n                \"total_billed\": 24567.89,\n                \"total_paid\": 19234.56,\n                \"member_responsibility\": 2890.34,\n                \"savings\": 2442.99\n            },\n            \"recent_claims\": [\n                {\n                    \"claim_number\": \"CLM_20240110_001\",\n                    \"service_date\": \"2024-01-10\",\n                    \"provider\": \"Metro Medical Center\",\n                    \"service_description\": \"Office Visit - Level 3\",\n                    \"procedure_codes\": [\"99213\"],\n                    \"billed_amount\": 245.00,\n                    \"allowed_amount\": 180.00,\n                    \"paid_amount\": 155.00,\n                    \"member_responsibility\": 25.00,\n                    \"status\": \"paid\",\n                    \"payment_date\": \"2024-01-12\"\n                },\n                {\n                    \"claim_number\": \"CLM_20240108_001\",\n                    \"service_date\": \"2024-01-08\",\n                    \"provider\": \"Regional Pharmacy\",\n                    \"service_description\": \"Prescription - Metformin\",\n                    \"ndc_code\": \"00093-0058-01\",\n                    \"billed_amount\": 65.00,\n                    \"allowed_amount\": 45.00,\n                    \"paid_amount\": 35.00,\n                    \"member_responsibility\": 10.00,\n                    \"status\": \"paid\",\n                    \"payment_date\": \"2024-01-09\"\n                }\n            ],\n            \"utilization_patterns\": {\n                \"primary_care_visits\": 8,\n                \"specialist_visits\": 4,\n                \"emergency_visits\": 1,\n                \"prescriptions_filled\": 24,\n                \"preventive_care_compliance\": 0.85\n            },\n            \"cost_analysis\": {\n                \"average_claim_amount\": 522.51,\n                \"highest_cost_categories\": [\"imaging\", \"specialist_procedures\", \"brand_medications\"],\n                \"cost_trend\": \"stable\",\n                \"cost_per_member_per_month\": 1269.45\n            }\n        }\n    },\n\n    \"benefit_calculator\": {\n        \"name\": \"Benefits Calculation Tool\",\n        \"description\": \"Advanced benefits calculation engine for deductibles, coinsurance, and out-of-pocket maximums\",\n        \"input_schema\": {\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"service_codes\": {\"type\": \"array\", \"description\": \"List of service codes for calculation\"},\n            \"service_amounts\": {\"type\": \"array\", \"description\": \"Corresponding billed amounts\"},\n            \"calculation_type\": {\"type\": \"string\", \"description\": \"Type of calculation\", \"enum\": [\"estimate\", \"actual\", \"what_if\"]}\n        },\n        \"mock_response\": {\n            \"calculation_id\": \"CALC_20240115_001\",\n            \"member_id\": \"MEM789012345\",\n            \"plan_year\": \"2024\",\n            \"current_accumulations\": {\n                \"deductible_met\": 1200.00,\n                \"deductible_remaining\": 300.00,\n                \"out_of_pocket_met\": 2450.00,\n                \"out_of_pocket_remaining\": 3550.00\n            },\n            \"service_calculations\": [\n                {\n                    \"service_code\": \"99214\",\n                    \"service_description\": \"Office Visit - Level 4\",\n                    \"billed_amount\": 350.00,\n                    \"allowed_amount\": 280.00,\n                    \"deductible_applied\": 280.00,\n                    \"coinsurance_amount\": 0.00,\n                    \"copay_amount\": 0.00,\n                    \"member_responsibility\": 280.00,\n                    \"plan_pays\": 0.00\n                },\n                {\n                    \"service_code\": \"80053\",\n                    \"service_description\": \"Comprehensive Metabolic Panel\",\n                    \"billed_amount\": 125.00,\n                    \"allowed_amount\": 95.00,\n                    \"deductible_applied\": 20.00,\n                    \"coinsurance_amount\": 15.00,\n                    \"copay_amount\": 0.00,\n                    \"member_responsibility\": 35.00,\n                    \"plan_pays\": 60.00\n                }\n            ],\n            \"total_calculation\": {\n                \"total_billed\": 475.00,\n                \"total_allowed\": 375.00,\n                \"total_member_responsibility\": 315.00,\n                \"total_plan_pays\": 60.00,\n                \"savings_vs_billed\": 100.00\n            },\n            \"updated_accumulations\": {\n                \"new_deductible_met\": 1500.00,\n                \"new_deductible_remaining\": 0.00,\n                \"new_out_of_pocket_met\": 2765.00,\n                \"new_out_of_pocket_remaining\": 3235.00,\n                \"deductible_satisfied\": True\n            },\n            \"benefit_explanations\": [\n                \"Deductible will be satisfied after these services\",\n                \"Future services will be subject to 20% coinsurance\",\n                \"Out-of-pocket maximum is $6,000 for individual coverage\"\n            ]\n        }\n    },\n\n    \"data_transformer\": {\n        \"name\": \"Data Transformation Tool\",\n        \"description\": \"Advanced data transformation and standardization engine for healthcare data processing\",\n        \"input_schema\": {\n            \"input_data\": {\"type\": \"object\", \"description\": \"Raw input data to be transformed\"},\n            \"transformation_type\": {\"type\": \"string\", \"description\": \"Type of transformation\", \"enum\": [\"hl7_to_fhir\", \"claims_to_clinical\", \"standardize\", \"aggregate\", \"custom\"]},\n            \"output_format\": {\"type\": \"string\", \"description\": \"Desired output format\", \"enum\": [\"fhir\", \"hl7\", \"json\", \"xml\", \"csv\"]},\n            \"validation_rules\": {\"type\": \"array\", \"description\": \"Validation rules to apply\"}\n        },\n        \"mock_response\": {\n            \"transformation_id\": \"TRANS_20240115_001\",\n            \"input_records\": 1247,\n            \"output_records\": 1243,\n            \"transformation_summary\": {\n                \"records_processed\": 1247,\n                \"records_transformed\": 1243,\n                \"records_failed\": 4,\n                \"records_skipped\": 0,\n                \"processing_time_seconds\": 8.7\n            },\n            \"data_quality_metrics\": {\n                \"completeness_score\": 0.94,\n                \"accuracy_score\": 0.97,\n                \"consistency_score\": 0.91,\n                \"validity_score\": 0.96\n            },\n            \"transformation_details\": {\n                \"field_mappings_applied\": 47,\n                \"data_type_conversions\": 23,\n                \"value_standardizations\": 156,\n                \"validation_rules_passed\": 12,\n                \"validation_rules_failed\": 2\n            },\n            \"output_sample\": {\n                \"resource_type\": \"Patient\",\n                \"id\": \"patient-123456\",\n                \"identifier\": [\n                    {\n                        \"system\": \"http://hospital.example.org/mrn\",\n                        \"value\": \"MRN123456\"\n                    }\n                ],\n                \"name\": [\n                    {\n                        \"family\": \"Smith\",\n                        \"given\": [\"John\", \"Michael\"]\n                    }\n                ],\n                \"gender\": \"male\",\n                \"birthDate\": \"1975-08-15\"\n            },\n            \"validation_results\": [\n                {\n                    \"rule\": \"required_fields_present\",\n                    \"status\": \"passed\",\n                    \"details\": \"All required fields validated successfully\"\n                },\n                {\n                    \"rule\": \"date_format_validation\",\n                    \"status\": \"failed\",\n                    \"details\": \"4 records had invalid date formats\",\n                    \"affected_records\": [\"REC001\", \"REC045\", \"REC089\", \"REC234\"]\n                }\n            ],\n            \"performance_metrics\": {\n                \"throughput_records_per_second\": 143.4,\n                \"memory_usage_mb\": 256.7,\n                \"cpu_utilization_percent\": 23.5\n            }\n        }\n    },\n\n    \"ml_theme_extraction\": {\n        \"name\": \"ML Theme Extraction Engine\",\n        \"description\": \"Machine learning-powered theme extraction and categorization for patient feedback analysis\",\n        \"input_schema\": {\n            \"text_data\": {\"type\": \"array\", \"description\": \"Array of text content for analysis\"},\n            \"analysis_depth\": {\"type\": \"string\", \"description\": \"Depth of analysis\", \"enum\": [\"basic\", \"detailed\", \"comprehensive\"]},\n            \"domain_focus\": {\"type\": \"string\", \"description\": \"Healthcare domain focus\", \"enum\": [\"patient_experience\", \"clinical_quality\", \"operations\", \"all\"]},\n            \"language\": {\"type\": \"string\", \"description\": \"Primary language of text content\"}\n        },\n        \"mock_response\": {\n            \"analysis_id\": \"ML_THEME_20240115_001\",\n            \"documents_processed\": 2847,\n            \"processing_time_seconds\": 12.4,\n            \"theme_extraction_results\": {\n                \"primary_themes\": [\n                    {\n                        \"theme\": \"wait_times\",\n                        \"frequency\": 0.42,\n                        \"sentiment\": \"negative\",\n                        \"confidence_score\": 0.89,\n                        \"related_keywords\": [\"waiting\", \"delay\", \"appointment\", \"late\", \"schedule\"],\n                        \"impact_score\": \"high\"\n                    },\n                    {\n                        \"theme\": \"staff_communication\",\n                        \"frequency\": 0.38,\n                        \"sentiment\": \"positive\",\n                        \"confidence_score\": 0.91,\n                        \"related_keywords\": [\"friendly\", \"helpful\", \"explained\", \"listened\", \"caring\"],\n                        \"impact_score\": \"high\"\n                    },\n                    {\n                        \"theme\": \"facility_cleanliness\",\n                        \"frequency\": 0.31,\n                        \"sentiment\": \"positive\",\n                        \"confidence_score\": 0.94,\n                        \"related_keywords\": [\"clean\", \"sanitized\", \"hygienic\", \"maintained\", \"organized\"],\n                        \"impact_score\": \"medium\"\n                    }\n                ],\n                \"emerging_themes\": [\n                    {\n                        \"theme\": \"telehealth_experience\",\n                        \"frequency\": 0.15,\n                        \"sentiment\": \"mixed\",\n                        \"confidence_score\": 0.76,\n                        \"trend\": \"increasing\"\n                    },\n                    {\n                        \"theme\": \"parking_availability\",\n                        \"frequency\": 0.12,\n                        \"sentiment\": \"negative\",\n                        \"confidence_score\": 0.82,\n                        \"trend\": \"stable\"\n                    }\n                ]\n            },\n            \"sentiment_analysis\": {\n                \"overall_sentiment\": 0.73,\n                \"sentiment_distribution\": {\n                    \"very_positive\": 0.28,\n                    \"positive\": 0.34,\n                    \"neutral\": 0.23,\n                    \"negative\": 0.12,\n                    \"very_negative\": 0.03\n                },\n                \"sentiment_trends\": {\n                    \"improving_areas\": [\"provider_communication\", \"appointment_scheduling\"],\n                    \"declining_areas\": [\"wait_times\", \"insurance_processes\"]\n                }\n            },\n            \"actionable_insights\": [\n                {\n                    \"insight\": \"Implement real-time wait time notifications\",\n                    \"theme\": \"wait_times\",\n                    \"priority\": \"high\",\n                    \"estimated_impact\": \"25% reduction in wait time complaints\"\n                },\n                {\n                    \"insight\": \"Expand staff communication training program\",\n                    \"theme\": \"staff_communication\",\n                    \"priority\": \"medium\",\n                    \"estimated_impact\": \"15% improvement in satisfaction scores\"\n                }\n            ],\n            \"model_performance\": {\n                \"accuracy\": 0.92,\n                \"precision\": 0.89,\n                \"recall\": 0.91,\n                \"f1_score\": 0.90,\n                \"model_version\": \"healthcare_nlp_v2.3\"\n            }\n        }\n    },\n\n    # LOWER PRIORITY: Specialized Tools\n    \"healthcare_claims_database\": {\n        \"name\": \"Healthcare Claims Database\",\n        \"description\": \"Comprehensive claims database for historical claims analysis and pattern recognition\",\n        \"input_schema\": {\n            \"query_type\": {\"type\": \"string\", \"description\": \"Type of query\", \"enum\": [\"member_history\", \"provider_patterns\", \"service_utilization\", \"cost_analysis\"]},\n            \"filters\": {\"type\": \"object\", \"description\": \"Query filters (member_id, date_range, service_codes, etc.)\"},\n            \"aggregation_level\": {\"type\": \"string\", \"description\": \"Aggregation level\", \"enum\": [\"individual\", \"group\", \"population\"]}\n        },\n        \"mock_response\": {\n            \"query_id\": \"CLAIMS_DB_20240115_001\",\n            \"query_execution_time_ms\": 847,\n            \"records_found\": 15647,\n            \"aggregated_results\": {\n                \"total_claims_analyzed\": 15647,\n                \"total_members\": 3241,\n                \"date_range\": \"2022-01-01 to 2024-01-15\",\n                \"financial_summary\": {\n                    \"total_billed_amount\": 12456789.45,\n                    \"total_paid_amount\": 9234567.89,\n                    \"average_claim_amount\": 795.43\n                }\n            },\n            \"utilization_patterns\": {\n                \"most_common_services\": [\n                    {\"service\": \"Office Visits\", \"frequency\": 0.34, \"avg_cost\": 185.50},\n                    {\"service\": \"Laboratory Tests\", \"frequency\": 0.28, \"avg_cost\": 125.30},\n                    {\"service\": \"Pharmacy\", \"frequency\": 0.22, \"avg_cost\": 89.75}\n                ],\n                \"seasonal_trends\": {\n                    \"peak_months\": [\"January\", \"February\", \"March\"],\n                    \"lowest_months\": [\"July\", \"August\"]\n                },\n                \"geographic_distribution\": {\n                    \"urban\": 0.68,\n                    \"suburban\": 0.24,\n                    \"rural\": 0.08\n                }\n            },\n            \"cost_analysis\": {\n                \"high_cost_members\": 156,\n                \"high_cost_threshold\": 50000,\n                \"cost_drivers\": [\"chronic_conditions\", \"specialty_drugs\", \"emergency_visits\"],\n                \"cost_trend\": \"increasing_moderate\"\n            },\n            \"quality_indicators\": {\n                \"preventive_care_compliance\": 0.76,\n                \"chronic_disease_management\": 0.82,\n                \"emergency_department_utilization\": 0.23\n            }\n        }\n    },\n\n    \"insurance_plan_rules\": {\n        \"name\": \"Insurance Plan Rules Engine\",\n        \"description\": \"Comprehensive insurance plan rules and coverage determination engine\",\n        \"input_schema\": {\n            \"plan_id\": {\"type\": \"string\", \"description\": \"Insurance plan identifier\"},\n            \"service_codes\": {\"type\": \"array\", \"description\": \"Service codes to evaluate\"},\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"rule_category\": {\"type\": \"string\", \"description\": \"Rule category\", \"enum\": [\"coverage\", \"prior_auth\", \"quantity_limits\", \"step_therapy\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"plan_id\": \"PLAN_PPO_2024\",\n            \"plan_name\": \"Health Plus PPO\",\n            \"effective_date\": \"2024-01-01\",\n            \"rule_evaluation_results\": [\n                {\n                    \"service_code\": \"99214\",\n                    \"service_description\": \"Office Visit - Level 4\",\n                    \"coverage_determination\": \"covered\",\n                    \"coverage_percentage\": 80,\n                    \"prior_authorization_required\": False,\n                    \"quantity_limits\": {\n                        \"limit_applies\": False,\n                        \"limit_description\": \"No limit on office visits\"\n                    },\n                    \"member_cost_share\": {\n                        \"copay\": 0,\n                        \"coinsurance\": 20,\n                        \"applies_to_deductible\": True\n                    }\n                },\n                {\n                    \"service_code\": \"J0585\",\n                    \"service_description\": \"Botulinum Toxin Injection\",\n                    \"coverage_determination\": \"covered_with_conditions\",\n                    \"coverage_percentage\": 80,\n                    \"prior_authorization_required\": True,\n                    \"conditions\": [\n                        \"Medical necessity documentation required\",\n                        \"Failure of conservative therapy\",\n                        \"Specific diagnosis codes required\"\n                    ],\n                    \"quantity_limits\": {\n                        \"limit_applies\": True,\n                        \"limit_description\": \"Maximum 4 treatments per year\",\n                        \"current_usage\": 1,\n                        \"remaining_allowance\": 3\n                    }\n                }\n            ],\n            \"plan_benefits_summary\": {\n                \"deductible\": {\n                    \"individual\": 1500,\n                    \"family\": 3000\n                },\n                \"out_of_pocket_maximum\": {\n                    \"individual\": 6000,\n                    \"family\": 12000\n                },\n                \"coinsurance\": 20,\n                \"network_type\": \"PPO\"\n            },\n            \"special_programs\": {\n                \"wellness_incentives\": True,\n                \"disease_management\": [\"diabetes\", \"hypertension\", \"asthma\"],\n                \"preventive_care_covered\": True,\n                \"telemedicine_coverage\": True\n            }\n        }\n    },\n\n    \"healthcare_facility_directory\": {\n        \"name\": \"Healthcare Facility Directory\",\n        \"description\": \"Comprehensive healthcare facility and provider directory with specialties and network status\",\n        \"input_schema\": {\n            \"search_criteria\": {\"type\": \"object\", \"description\": \"Search criteria (location, specialty, network, etc.)\"},\n            \"search_radius_miles\": {\"type\": \"integer\", \"description\": \"Search radius in miles\"},\n            \"include_availability\": {\"type\": \"boolean\", \"description\": \"Include real-time availability\"},\n            \"network_filter\": {\"type\": \"string\", \"description\": \"Network filter\", \"enum\": [\"in_network\", \"out_of_network\", \"all\"]}\n        },\n        \"mock_response\": {\n            \"search_id\": \"DIR_SEARCH_20240115_001\",\n            \"search_criteria\": {\n                \"specialty\": \"Cardiology\",\n                \"location\": \"Metro City\",\n                \"radius_miles\": 25,\n                \"network_status\": \"in_network\"\n            },\n            \"total_results\": 23,\n            \"facilities\": [\n                {\n                    \"facility_id\": \"FAC_001\",\n                    \"name\": \"Metro Heart & Vascular Center\",\n                    \"address\": \"123 Medical Plaza Dr, Metro City, ST 12345\",\n                    \"phone\": \"555-123-4567\",\n                    \"network_status\": \"in_network\",\n                    \"distance_miles\": 3.2,\n                    \"specialties\": [\"Cardiology\", \"Cardiac Surgery\", \"Interventional Cardiology\"],\n                    \"providers\": [\n                        {\n                            \"name\": \"Dr. Michael Chen\",\n                            \"npi\": \"1234567890\",\n                            \"specialty\": \"Interventional Cardiology\",\n                            \"accepting_new_patients\": True,\n                            \"next_available\": \"2024-01-22T09:00:00Z\"\n                        },\n                        {\n                            \"name\": \"Dr. Sarah Williams\",\n                            \"npi\": \"0987654321\",\n                            \"specialty\": \"Cardiology\",\n                            \"accepting_new_patients\": True,\n                            \"next_available\": \"2024-01-25T14:30:00Z\"\n                        }\n                    ],\n                    \"facility_features\": {\n                        \"parking_available\": True,\n                        \"wheelchair_accessible\": True,\n                        \"languages_supported\": [\"English\", \"Spanish\", \"Mandarin\"],\n                        \"imaging_services\": True,\n                        \"lab_services\": True\n                    },\n                    \"quality_ratings\": {\n                        \"cms_star_rating\": 4.5,\n                        \"patient_satisfaction\": 4.3,\n                        \"safety_rating\": \"A\"\n                    }\n                }\n            ],\n            \"search_suggestions\": [\n                \"Consider expanding search radius to 50 miles for more options\",\n                \"Alternative specialties: Internal Medicine with cardiology subspecialty\",\n                \"Telehealth options available for some consultations\"\n            ],\n            \"network_coverage_info\": {\n                \"in_network_facilities\": 18,\n                \"out_of_network_facilities\": 5,\n                \"coverage_gaps\": \"Limited interventional cardiology options in rural areas\"\n            }\n        }\n    },\n\n    \"navigation_ml_analytics\": {\n        \"name\": \"Navigation ML Analytics Platform\",\n        \"description\": \"Machine learning analytics platform for healthcare navigation patterns and optimization insights\",\n        \"input_schema\": {\n            \"analytics_type\": {\"type\": \"string\", \"description\": \"Type of analytics\", \"enum\": [\"patient_journeys\", \"navigation_patterns\", \"bottleneck_analysis\", \"outcome_prediction\"]},\n            \"time_period\": {\"type\": \"string\", \"description\": \"Analysis time period\"},\n            \"patient_cohort\": {\"type\": \"string\", \"description\": \"Patient cohort filter\"},\n            \"include_predictions\": {\"type\": \"boolean\", \"description\": \"Include predictive analytics\"}\n        },\n        \"mock_response\": {\n            \"analytics_id\": \"NAV_ML_20240115_001\",\n            \"analysis_period\": \"2023-07-01 to 2024-01-15\",\n            \"patient_journeys_analyzed\": 8734,\n            \"navigation_insights\": {\n                \"common_pathways\": [\n                    {\n                        \"pathway\": \"PCP → Specialist → Procedure → Follow-up\",\n                        \"frequency\": 0.34,\n                        \"average_time_to_completion_days\": 45,\n                        \"success_rate\": 0.87\n                    },\n                    {\n                        \"pathway\": \"Emergency → Admission → Discharge → PCP\",\n                        \"frequency\": 0.18,\n                        \"average_time_to_completion_days\": 21,\n                        \"success_rate\": 0.76\n                    }\n                ],\n                \"bottleneck_analysis\": {\n                    \"appointment_scheduling\": {\n                        \"average_wait_time_days\": 12.5,\n                        \"impact_on_outcomes\": \"moderate\",\n                        \"improvement_potential\": \"high\"\n                    },\n                    \"insurance_authorization\": {\n                        \"average_processing_time_days\": 3.8,\n                        \"impact_on_outcomes\": \"low\",\n                        \"improvement_potential\": \"medium\"\n                    },\n                    \"test_result_communication\": {\n                        \"average_delay_days\": 2.1,\n                        \"impact_on_outcomes\": \"high\",\n                        \"improvement_potential\": \"high\"\n                    }\n                }\n            },\n            \"predictive_analytics\": {\n                \"care_gap_predictions\": [\n                    {\n                        \"gap_type\": \"missed_preventive_care\",\n                        \"predicted_patients\": 234,\n                        \"confidence\": 0.89,\n                        \"intervention_window_days\": 30\n                    },\n                    {\n                        \"gap_type\": \"medication_adherence_decline\",\n                        \"predicted_patients\": 156,\n                        \"confidence\": 0.82,\n                        \"intervention_window_days\": 14\n                    }\n                ],\n                \"outcome_predictions\": {\n                    \"readmission_risk\": {\n                        \"high_risk_patients\": 67,\n                        \"prediction_accuracy\": 0.84,\n                        \"primary_risk_factors\": [\"multiple_comorbidities\", \"social_determinants\", \"medication_complexity\"]\n                    },\n                    \"navigation_success\": {\n                        \"completion_probability\": 0.78,\n                        \"key_success_factors\": [\"care_coordination\", \"patient_engagement\", \"provider_communication\"]\n                    }\n                }\n            },\n            \"optimization_recommendations\": [\n                {\n                    \"recommendation\": \"Implement proactive appointment scheduling for high-risk patients\",\n                    \"impact_area\": \"appointment_scheduling\",\n                    \"estimated_improvement\": \"25% reduction in wait times\",\n                    \"implementation_priority\": \"high\"\n                },\n                {\n                    \"recommendation\": \"Deploy automated test result notifications\",\n                    \"impact_area\": \"communication\",\n                    \"estimated_improvement\": \"60% faster result delivery\",\n                    \"implementation_priority\": \"medium\"\n                }\n            ],\n            \"model_performance\": {\n                \"prediction_accuracy\": 0.86,\n                \"data_quality_score\": 0.91,\n                \"model_confidence\": 0.83,\n                \"last_training_date\": \"2024-01-01\"\n            }\n        }\n    },\n\n    # NEW MCP TOOLS FOR PROVIDER ENABLEMENT & UTILIZATION MANAGEMENT\n\n    # Provider Enablement - Compliance Documentation Tools\n    \"provider_notes_api\": {\n        \"name\": \"Provider Notes API Access\",\n        \"description\": \"Access provider clinical notes and documentation from EHR systems for compliance auditing\",\n        \"input_schema\": {\n            \"provider_id\": {\"type\": \"string\", \"description\": \"Provider identifier or NPI\"},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for notes retrieval\"},\n            \"note_type\": {\"type\": \"string\", \"description\": \"Type of clinical notes\", \"enum\": [\"progress\", \"assessment\", \"procedure\", \"discharge\", \"all\"]},\n            \"compliance_scope\": {\"type\": \"string\", \"description\": \"Compliance scope\", \"enum\": [\"full\", \"attestation_only\", \"template_check\"]}\n        },\n        \"mock_response\": {\n            \"provider_id\": \"NPI_1234567890\",\n            \"provider_name\": \"Dr. Sarah Johnson, MD\",\n            \"notes_retrieved\": 234,\n            \"date_range\": \"2024-09-11 to 2024-10-11\",\n            \"clinical_notes\": [\n                {\n                    \"note_id\": \"NOTE_20241011_001\",\n                    \"note_type\": \"progress\",\n                    \"patient_id\": \"PAT123456\",\n                    \"date_created\": \"2024-10-11T09:30:00Z\",\n                    \"content\": \"Patient continues to show improvement with current treatment plan. Vital signs stable.\",\n                    \"attestation_status\": \"complete\",\n                    \"template_compliance\": 0.92,\n                    \"required_elements\": [\"assessment\", \"plan\", \"signature\", \"date\"],\n                    \"missing_elements\": []\n                },\n                {\n                    \"note_id\": \"NOTE_20241010_003\",\n                    \"note_type\": \"assessment\",\n                    \"patient_id\": \"PAT123457\",\n                    \"date_created\": \"2024-10-10T14:15:00Z\",\n                    \"content\": \"Initial assessment reveals acute condition requiring immediate intervention.\",\n                    \"attestation_status\": \"incomplete\",\n                    \"template_compliance\": 0.67,\n                    \"required_elements\": [\"assessment\", \"plan\", \"signature\", \"date\", \"medical_necessity\"],\n                    \"missing_elements\": [\"medical_necessity\", \"signature\"]\n                }\n            ],\n            \"compliance_summary\": {\n                \"total_notes\": 234,\n                \"compliant_notes\": 198,\n                \"compliance_rate\": 0.846,\n                \"common_missing_elements\": [\"signature\", \"medical_necessity\", \"follow_up_plan\"]\n            }\n        }\n    },\n\n    \"audit_database_connector\": {\n        \"name\": \"Audit Database Connector\",\n        \"description\": \"Access historical audit data and compliance templates for comparison analysis\",\n        \"input_schema\": {\n            \"provider_id\": {\"type\": \"string\", \"description\": \"Provider identifier\"},\n            \"audit_type\": {\"type\": \"string\", \"description\": \"Type of audit\", \"enum\": [\"compliance\", \"quality\", \"utilization\", \"all\"]},\n            \"time_period\": {\"type\": \"string\", \"description\": \"Time period for audit history\"},\n            \"template_category\": {\"type\": \"string\", \"description\": \"Template category filter\"}\n        },\n        \"mock_response\": {\n            \"provider_id\": \"NPI_1234567890\",\n            \"audit_history\": [\n                {\n                    \"audit_id\": \"AUDIT_20241001_001\",\n                    \"audit_type\": \"compliance\",\n                    \"audit_date\": \"2024-10-01\",\n                    \"compliance_score\": 0.88,\n                    \"findings\": 12,\n                    \"critical_issues\": 2,\n                    \"status\": \"resolved\",\n                    \"follow_up_required\": False\n                },\n                {\n                    \"audit_id\": \"AUDIT_20240901_001\",\n                    \"audit_type\": \"quality\",\n                    \"audit_date\": \"2024-09-01\",\n                    \"compliance_score\": 0.92,\n                    \"findings\": 8,\n                    \"critical_issues\": 0,\n                    \"status\": \"closed\",\n                    \"follow_up_required\": False\n                }\n            ],\n            \"compliance_templates\": [\n                {\n                    \"template_id\": \"TEMP_CMS_001\",\n                    \"template_name\": \"CMS Documentation Requirements\",\n                    \"version\": \"2024.1\",\n                    \"required_elements\": [\"patient_id\", \"diagnosis\", \"treatment_plan\", \"provider_signature\", \"date\"],\n                    \"optional_elements\": [\"family_history\", \"social_history\"],\n                    \"compliance_criteria\": {\n                        \"minimum_score\": 0.85,\n                        \"required_element_weight\": 0.7,\n                        \"documentation_quality_weight\": 0.3\n                    }\n                }\n            ],\n            \"audit_trends\": {\n                \"compliance_trend\": \"improving\",\n                \"average_score_last_6_months\": 0.89,\n                \"most_common_issues\": [\"missing_signatures\", \"incomplete_assessment\", \"inadequate_documentation\"]\n            }\n        }\n    },\n\n    \"healthcare_compliance_nlp\": {\n        \"name\": \"Healthcare Compliance NLP Processor\",\n        \"description\": \"Advanced NLP engine specialized for healthcare compliance analysis and attestation element identification\",\n        \"input_schema\": {\n            \"document_text\": {\"type\": \"string\", \"description\": \"Clinical document text for analysis\"},\n            \"analysis_type\": {\"type\": \"string\", \"description\": \"Type of analysis\", \"enum\": [\"attestation\", \"compliance\", \"template_match\", \"all\"]},\n            \"regulatory_standard\": {\"type\": \"string\", \"description\": \"Regulatory standard\", \"enum\": [\"CMS\", \"Joint_Commission\", \"HIPAA\", \"all\"]},\n            \"confidence_threshold\": {\"type\": \"float\", \"description\": \"Minimum confidence for element identification\"}\n        },\n        \"mock_response\": {\n            \"analysis_id\": \"NLP_COMP_20241011_001\",\n            \"document_length\": 1247,\n            \"processing_time_ms\": 892,\n            \"attestation_elements\": {\n                \"identified_elements\": [\n                    {\"element\": \"patient_identification\", \"confidence\": 0.98, \"location\": \"header\"},\n                    {\"element\": \"chief_complaint\", \"confidence\": 0.94, \"location\": \"paragraph_1\"},\n                    {\"element\": \"assessment\", \"confidence\": 0.92, \"location\": \"paragraph_3\"},\n                    {\"element\": \"treatment_plan\", \"confidence\": 0.89, \"location\": \"paragraph_4\"}\n                ],\n                \"missing_elements\": [\n                    {\"element\": \"provider_signature\", \"required\": True, \"criticality\": \"high\"},\n                    {\"element\": \"medical_necessity\", \"required\": True, \"criticality\": \"medium\"}\n                ]\n            },\n            \"compliance_analysis\": {\n                \"overall_compliance_score\": 0.76,\n                \"regulatory_adherence\": {\n                    \"CMS\": 0.78,\n                    \"Joint_Commission\": 0.82,\n                    \"HIPAA\": 0.95\n                },\n                \"documentation_quality\": {\n                    \"completeness\": 0.74,\n                    \"clarity\": 0.88,\n                    \"medical_terminology_accuracy\": 0.96\n                }\n            },\n            \"recommendations\": [\n                \"Add provider electronic signature to meet CMS requirements\",\n                \"Include explicit medical necessity statement\",\n                \"Improve documentation completeness for better compliance scores\"\n            ]\n        }\n    },\n\n    \"template_matching_engine\": {\n        \"name\": \"Template Matching Engine\",\n        \"description\": \"Machine learning-powered template matching for compliance standards verification\",\n        \"input_schema\": {\n            \"document_content\": {\"type\": \"string\", \"description\": \"Document content for template matching\"},\n            \"template_library\": {\"type\": \"array\", \"description\": \"Template library to match against\"},\n            \"matching_algorithm\": {\"type\": \"string\", \"description\": \"Matching algorithm\", \"enum\": [\"semantic\", \"structural\", \"hybrid\"]},\n            \"match_threshold\": {\"type\": \"float\", \"description\": \"Minimum match score threshold\"}\n        },\n        \"mock_response\": {\n            \"matching_id\": \"MATCH_20241011_001\",\n            \"document_id\": \"DOC_12345\",\n            \"template_matches\": [\n                {\n                    \"template_id\": \"TEMP_PROGRESS_NOTE_001\",\n                    \"template_name\": \"Standard Progress Note Template\",\n                    \"match_score\": 0.94,\n                    \"confidence\": 0.91,\n                    \"matched_sections\": [\n                        {\"section\": \"subjective\", \"match_score\": 0.96},\n                        {\"section\": \"objective\", \"match_score\": 0.93},\n                        {\"section\": \"assessment\", \"match_score\": 0.92},\n                        {\"section\": \"plan\", \"match_score\": 0.95}\n                    ],\n                    \"missing_sections\": [],\n                    \"compliance_rating\": \"excellent\"\n                },\n                {\n                    \"template_id\": \"TEMP_CMS_EVAL_001\",\n                    \"template_name\": \"CMS Evaluation Template\",\n                    \"match_score\": 0.87,\n                    \"confidence\": 0.84,\n                    \"matched_sections\": [\n                        {\"section\": \"history\", \"match_score\": 0.89},\n                        {\"section\": \"examination\", \"match_score\": 0.91},\n                        {\"section\": \"decision_making\", \"match_score\": 0.81}\n                    ],\n                    \"missing_sections\": [\"medical_necessity_statement\"],\n                    \"compliance_rating\": \"good\"\n                }\n            ],\n            \"best_match\": {\n                \"template_id\": \"TEMP_PROGRESS_NOTE_001\",\n                \"overall_score\": 0.94,\n                \"recommendation\": \"Document follows standard progress note format well\"\n            },\n            \"improvement_suggestions\": [\n                \"Consider adding medical necessity statement for CMS compliance\",\n                \"Enhance objective findings documentation\",\n                \"Include specific follow-up timeline\"\n            ]\n        }\n    },\n\n    # Utilization Management - Healthcare System Integration Tools\n    \"his_integration\": {\n        \"name\": \"Hospital Information System Integration\",\n        \"description\": \"Access comprehensive hospital information system data for patient records and clinical information\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"admission_id\": {\"type\": \"string\", \"description\": \"Hospital admission identifier\"},\n            \"data_scope\": {\"type\": \"string\", \"description\": \"Scope of data\", \"enum\": [\"admission\", \"clinical\", \"financial\", \"all\"]},\n            \"include_realtime\": {\"type\": \"boolean\", \"description\": \"Include real-time data updates\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT789012\",\n            \"admission_id\": \"ADM_20241005_001\",\n            \"admission_details\": {\n                \"admission_date\": \"2024-10-05T08:30:00Z\",\n                \"admission_type\": \"emergency\",\n                \"attending_physician\": \"Dr. Michael Chen\",\n                \"primary_diagnosis\": \"Community-acquired pneumonia\",\n                \"secondary_diagnoses\": [\"Hypertension\", \"Type 2 diabetes\"],\n                \"current_location\": \"Medical Floor - Room 234B\",\n                \"length_of_stay_days\": 6\n            },\n            \"clinical_status\": {\n                \"current_condition\": \"stable\",\n                \"activity_level\": \"ambulating_with_assistance\",\n                \"diet_orders\": \"regular_diet\",\n                \"oxygen_requirement\": \"room_air\",\n                \"iv_access\": \"saline_lock\",\n                \"isolation_precautions\": \"standard\"\n            },\n            \"care_team\": [\n                {\"role\": \"attending_physician\", \"name\": \"Dr. Michael Chen\", \"service\": \"internal_medicine\"},\n                {\"role\": \"resident\", \"name\": \"Dr. Sarah Kim\", \"service\": \"internal_medicine\"},\n                {\"role\": \"nurse\", \"name\": \"Jennifer Lopez, RN\", \"unit\": \"4_west\"},\n                {\"role\": \"case_manager\", \"name\": \"Maria Santos, MSW\", \"department\": \"utilization_management\"}\n            ],\n            \"utilization_metrics\": {\n                \"expected_los\": 4,\n                \"current_los\": 6,\n                \"variance_days\": 2,\n                \"acuity_score\": 65,\n                \"discharge_barriers\": [\"awaiting_skilled_nursing_placement\"],\n                \"estimated_discharge_date\": \"2024-10-12\"\n            }\n        }\n    },\n\n    \"ehr_clinical_data\": {\n        \"name\": \"EHR Clinical Data Access\",\n        \"description\": \"Access electronic health record systems for detailed clinical information and patient history\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"data_categories\": {\"type\": \"array\", \"description\": \"Clinical data categories to retrieve\"},\n            \"time_range\": {\"type\": \"string\", \"description\": \"Time range for clinical data\"},\n            \"include_trends\": {\"type\": \"boolean\", \"description\": \"Include trending data analysis\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT789012\",\n            \"medical_history\": {\n                \"allergies\": [\n                    {\"allergen\": \"Penicillin\", \"reaction\": \"Rash\", \"severity\": \"moderate\"},\n                    {\"allergen\": \"Shellfish\", \"reaction\": \"Anaphylaxis\", \"severity\": \"severe\"}\n                ],\n                \"chronic_conditions\": [\n                    {\"condition\": \"Hypertension\", \"onset_date\": \"2018-03-15\", \"status\": \"controlled\"},\n                    {\"condition\": \"Type 2 Diabetes\", \"onset_date\": \"2020-07-22\", \"status\": \"controlled\"},\n                    {\"condition\": \"Hyperlipidemia\", \"onset_date\": \"2019-11-08\", \"status\": \"controlled\"}\n                ],\n                \"surgical_history\": [\n                    {\"procedure\": \"Cholecystectomy\", \"date\": \"2021-05-14\", \"surgeon\": \"Dr. Williams\"}\n                ]\n            },\n            \"current_medications\": [\n                {\"medication\": \"Lisinopril 10mg\", \"frequency\": \"daily\", \"start_date\": \"2024-01-15\"},\n                {\"medication\": \"Metformin 500mg\", \"frequency\": \"twice_daily\", \"start_date\": \"2024-01-15\"},\n                {\"medication\": \"Atorvastatin 20mg\", \"frequency\": \"daily\", \"start_date\": \"2024-01-15\"}\n            ],\n            \"recent_vitals\": {\n                \"blood_pressure\": {\"systolic\": 128, \"diastolic\": 82, \"timestamp\": \"2024-10-11T08:00:00Z\"},\n                \"heart_rate\": {\"value\": 76, \"rhythm\": \"regular\", \"timestamp\": \"2024-10-11T08:00:00Z\"},\n                \"temperature\": {\"value\": 98.6, \"route\": \"oral\", \"timestamp\": \"2024-10-11T08:00:00Z\"},\n                \"oxygen_saturation\": {\"value\": 98, \"room_air\": True, \"timestamp\": \"2024-10-11T08:00:00Z\"}\n            },\n            \"clinical_trends\": {\n                \"vital_signs_stability\": \"stable_last_24h\",\n                \"pain_score_trend\": \"decreasing\",\n                \"functional_status\": \"improving\",\n                \"laboratory_trends\": \"normalizing\"\n            }\n        }\n    },\n\n    \"lis_integration\": {\n        \"name\": \"Laboratory Information System Integration\",\n        \"description\": \"Access laboratory information systems for lab results and diagnostic data analysis\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"test_categories\": {\"type\": \"array\", \"description\": \"Laboratory test categories\"},\n            \"date_range\": {\"type\": \"string\", \"description\": \"Date range for lab results\"},\n            \"include_critical_values\": {\"type\": \"boolean\", \"description\": \"Include critical value alerts\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT789012\",\n            \"lab_results\": [\n                {\n                    \"test_name\": \"Complete Blood Count\",\n                    \"collection_date\": \"2024-10-11T06:00:00Z\",\n                    \"resulted_date\": \"2024-10-11T08:30:00Z\",\n                    \"results\": {\n                        \"wbc\": {\"value\": 8.2, \"units\": \"K/uL\", \"reference_range\": \"4.0-11.0\", \"status\": \"normal\"},\n                        \"hemoglobin\": {\"value\": 12.8, \"units\": \"g/dL\", \"reference_range\": \"12.0-16.0\", \"status\": \"normal\"},\n                        \"platelets\": {\"value\": 285, \"units\": \"K/uL\", \"reference_range\": \"150-450\", \"status\": \"normal\"}\n                    },\n                    \"interpretation\": \"Normal complete blood count\"\n                },\n                {\n                    \"test_name\": \"Basic Metabolic Panel\",\n                    \"collection_date\": \"2024-10-11T06:00:00Z\",\n                    \"resulted_date\": \"2024-10-11T07:45:00Z\",\n                    \"results\": {\n                        \"glucose\": {\"value\": 145, \"units\": \"mg/dL\", \"reference_range\": \"70-100\", \"status\": \"high\"},\n                        \"creatinine\": {\"value\": 1.1, \"units\": \"mg/dL\", \"reference_range\": \"0.7-1.3\", \"status\": \"normal\"},\n                        \"sodium\": {\"value\": 138, \"units\": \"mEq/L\", \"reference_range\": \"136-145\", \"status\": \"normal\"}\n                    },\n                    \"interpretation\": \"Mild hyperglycemia, otherwise normal\"\n                }\n            ],\n            \"critical_values\": [],\n            \"trending_data\": {\n                \"glucose_trend\": \"stable_elevated\",\n                \"kidney_function\": \"stable\",\n                \"inflammatory_markers\": \"improving\"\n            },\n            \"pending_results\": [\n                {\"test_name\": \"Blood Culture\", \"expected_result_time\": \"2024-10-12T06:00:00Z\"}\n            ]\n        }\n    },\n\n    \"vitals_monitoring_system\": {\n        \"name\": \"Vitals Monitoring System Access\",\n        \"description\": \"Access patient monitoring systems for real-time and historical vital signs data\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"monitoring_type\": {\"type\": \"string\", \"description\": \"Type of monitoring\", \"enum\": [\"continuous\", \"spot_check\", \"trending\", \"all\"]},\n            \"time_window\": {\"type\": \"string\", \"description\": \"Time window for vital signs data\"},\n            \"include_alerts\": {\"type\": \"boolean\", \"description\": \"Include clinical alerts and alarms\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT789012\",\n            \"monitoring_status\": \"continuous\",\n            \"current_vitals\": {\n                \"blood_pressure\": {\n                    \"systolic\": 126,\n                    \"diastolic\": 78,\n                    \"mean_arterial_pressure\": 94,\n                    \"timestamp\": \"2024-10-11T10:30:00Z\",\n                    \"method\": \"automated_cuff\"\n                },\n                \"heart_rate\": {\n                    \"rate\": 74,\n                    \"rhythm\": \"sinus_rhythm\",\n                    \"quality\": \"good\",\n                    \"timestamp\": \"2024-10-11T10:30:00Z\"\n                },\n                \"respiratory_rate\": {\n                    \"rate\": 16,\n                    \"pattern\": \"regular\",\n                    \"effort\": \"unlabored\",\n                    \"timestamp\": \"2024-10-11T10:30:00Z\"\n                },\n                \"oxygen_saturation\": {\n                    \"spo2\": 98,\n                    \"oxygen_delivery\": \"room_air\",\n                    \"perfusion_index\": 2.1,\n                    \"timestamp\": \"2024-10-11T10:30:00Z\"\n                },\n                \"temperature\": {\n                    \"value\": 98.4,\n                    \"route\": \"oral\",\n                    \"timestamp\": \"2024-10-11T10:30:00Z\"\n                }\n            },\n            \"vital_trends\": {\n                \"blood_pressure_trend\": \"stable\",\n                \"heart_rate_variability\": \"normal\",\n                \"respiratory_pattern\": \"stable\",\n                \"temperature_trend\": \"afebrile\"\n            },\n            \"alerts\": [],\n            \"clinical_assessment\": {\n                \"hemodynamic_stability\": \"stable\",\n                \"respiratory_status\": \"adequate\",\n                \"neurological_status\": \"alert_oriented\",\n                \"overall_acuity\": \"low\"\n            }\n        }\n    },\n\n    \"medical_necessity_engine\": {\n        \"name\": \"Medical Necessity Assessment Engine\",\n        \"description\": \"Advanced clinical decision support engine for medical necessity determination and level of care assessment\",\n        \"input_schema\": {\n            \"patient_data\": {\"type\": \"object\", \"description\": \"Comprehensive patient clinical data\"},\n            \"assessment_type\": {\"type\": \"string\", \"description\": \"Type of assessment\", \"enum\": [\"admission\", \"continued_stay\", \"discharge_planning\"]},\n            \"clinical_criteria\": {\"type\": \"string\", \"description\": \"Clinical criteria set to apply\"},\n            \"payer_guidelines\": {\"type\": \"string\", \"description\": \"Specific payer guidelines\"}\n        },\n        \"mock_response\": {\n            \"assessment_id\": \"MN_20241011_001\",\n            \"patient_id\": \"PAT789012\",\n            \"assessment_type\": \"continued_stay\",\n            \"medical_necessity_score\": 0.68,\n            \"recommendation\": \"discharge_planning_appropriate\",\n            \"level_of_care_analysis\": {\n                \"current_level\": \"acute_inpatient\",\n                \"appropriate_level\": \"skilled_nursing_facility\",\n                \"rationale\": \"Patient clinically stable, ambulating, no longer requires acute level monitoring\",\n                \"alternative_settings\": [\n                    {\"setting\": \"skilled_nursing_facility\", \"appropriateness\": 0.92},\n                    {\"setting\": \"home_health\", \"appropriateness\": 0.76},\n                    {\"setting\": \"outpatient_follow_up\", \"appropriateness\": 0.84}\n                ]\n            },\n            \"clinical_indicators\": {\n                \"stability_indicators\": [\n                    {\"indicator\": \"vital_signs_stable\", \"status\": True, \"weight\": 0.3},\n                    {\"indicator\": \"laboratory_values_stable\", \"status\": True, \"weight\": 0.2},\n                    {\"indicator\": \"no_acute_deterioration\", \"status\": True, \"weight\": 0.4}\n                ],\n                \"functional_status\": {\n                    \"mobility\": \"ambulatory_with_assistance\",\n                    \"activities_of_daily_living\": \"modified_independent\",\n                    \"cognitive_status\": \"alert_oriented\"\n                },\n                \"discharge_barriers\": [\n                    {\"barrier\": \"placement_coordination\", \"severity\": \"moderate\", \"estimated_resolution\": \"24-48_hours\"}\n                ]\n            },\n            \"cost_benefit_analysis\": {\n                \"current_daily_cost\": 2340.50,\n                \"alternative_setting_cost\": 485.75,\n                \"potential_daily_savings\": 1854.75,\n                \"quality_impact\": \"maintained_or_improved\"\n            }\n        }\n    },\n\n    \"healthcare_data_exchange\": {\n        \"name\": \"Healthcare Data Exchange Platform\",\n        \"description\": \"Healthcare interoperability platform for accessing multi-source clinical data and care coordination\",\n        \"input_schema\": {\n            \"patient_id\": {\"type\": \"string\", \"description\": \"Patient identifier\"},\n            \"data_sources\": {\"type\": \"array\", \"description\": \"Healthcare data sources to query\"},\n            \"exchange_networks\": {\"type\": \"array\", \"description\": \"HIE networks to access\"},\n            \"care_coordination_scope\": {\"type\": \"string\", \"description\": \"Scope of care coordination data\"}\n        },\n        \"mock_response\": {\n            \"patient_id\": \"PAT789012\",\n            \"exchange_query_id\": \"HIE_20241011_001\",\n            \"participating_organizations\": [\n                {\n                    \"organization\": \"Metro Regional Medical Center\",\n                    \"network\": \"CommonWell\",\n                    \"data_available\": [\"encounters\", \"medications\", \"allergies\", \"lab_results\"],\n                    \"last_encounter\": \"2024-10-05\"\n                },\n                {\n                    \"organization\": \"Community Health Partners\",\n                    \"network\": \"Carequality\",\n                    \"data_available\": [\"primary_care_visits\", \"immunizations\", \"care_plans\"],\n                    \"last_encounter\": \"2024-09-15\"\n                }\n            ],\n            \"care_coordination_data\": {\n                \"care_transitions\": [\n                    {\n                        \"transition_date\": \"2024-10-05\",\n                        \"from_setting\": \"emergency_department\",\n                        \"to_setting\": \"inpatient_acute_care\",\n                        \"transition_reason\": \"admission_for_pneumonia\",\n                        \"care_team_communication\": \"complete\"\n                    }\n                ],\n                \"care_gaps\": [\n                    {\n                        \"gap_type\": \"preventive_care\",\n                        \"description\": \"Mammography screening overdue\",\n                        \"priority\": \"medium\",\n                        \"due_date\": \"2024-08-15\"\n                    }\n                ],\n                \"medication_reconciliation\": {\n                    \"discrepancies_found\": 1,\n                    \"home_medications\": 8,\n                    \"hospital_medications\": 6,\n                    \"discontinued_medications\": 2,\n                    \"new_medications\": 1\n                }\n            },\n            \"quality_metrics\": {\n                \"data_completeness\": 0.91,\n                \"data_freshness\": 0.88,\n                \"interoperability_score\": 0.94\n            }\n        }\n    },\n\n    # Utilization Management - Appeals Processing Tools\n    \"appeal_letters_api\": {\n        \"name\": \"Appeal Letters API Access\",\n        \"description\": \"Access member and provider appeal letters from appeals management systems\",\n        \"input_schema\": {\n            \"appeal_id\": {\"type\": \"string\", \"description\": \"Appeal identifier\"},\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier (optional)\"},\n            \"appeal_type\": {\"type\": \"string\", \"description\": \"Type of appeal\", \"enum\": [\"medical_pa\", \"pharmacy_pa\", \"claim_denial\", \"coverage_determination\"]},\n            \"include_attachments\": {\"type\": \"boolean\", \"description\": \"Include supporting documentation\"}\n        },\n        \"mock_response\": {\n            \"appeal_id\": \"APP_20241011_001\",\n            \"member_id\": \"MEM123456\",\n            \"appeal_type\": \"medical_pa\",\n            \"submission_details\": {\n                \"submission_date\": \"2024-10-11T09:00:00Z\",\n                \"submission_method\": \"online_portal\",\n                \"submitter_type\": \"member\",\n                \"urgency_level\": \"standard\"\n            },\n            \"appeal_content\": {\n                \"primary_letter\": {\n                    \"content\": \"I am writing to appeal the denial of my MRI scan of the lumbar spine. My physician Dr. Smith has recommended this imaging due to persistent lower back pain that has not responded to 6 weeks of conservative treatment including physical therapy and medication. The pain is affecting my ability to work and perform daily activities. I believe this scan is medically necessary to determine the cause of my ongoing symptoms and guide appropriate treatment.\",\n                    \"word_count\": 67,\n                    \"language\": \"English\",\n                    \"sentiment\": \"formal_concerned\"\n                },\n                \"supporting_arguments\": [\n                    \"Failed conservative treatment for 6 weeks\",\n                    \"Physician recommendation for imaging\",\n                    \"Impact on daily functioning and work\",\n                    \"Medical necessity for diagnosis and treatment planning\"\n                ],\n                \"clinical_references\": [\n                    \"Dr. Smith's referral letter dated 2024-09-15\",\n                    \"Physical therapy progress notes\",\n                    \"Medication trial documentation\"\n                ]\n            },\n            \"attachments\": [\n                {\n                    \"attachment_id\": \"ATT_001\",\n                    \"type\": \"physician_letter\",\n                    \"description\": \"Dr. Smith's clinical justification letter\",\n                    \"date\": \"2024-09-15\"\n                },\n                {\n                    \"attachment_id\": \"ATT_002\",\n                    \"type\": \"treatment_records\",\n                    \"description\": \"Physical therapy progress notes\",\n                    \"date\": \"2024-09-01\"\n                }\n            ],\n            \"processing_status\": {\n                \"current_status\": \"received\",\n                \"assigned_reviewer\": \"Review Team A\",\n                \"target_completion_date\": \"2024-10-25\",\n                \"priority_level\": \"standard\"\n            }\n        }\n    },\n\n    \"denial_reasons_database\": {\n        \"name\": \"Denial Reasons Database Access\",\n        \"description\": \"Access original denial reasons and decision documentation for linkage analysis\",\n        \"input_schema\": {\n            \"denial_id\": {\"type\": \"string\", \"description\": \"Original denial identifier\"},\n            \"member_id\": {\"type\": \"string\", \"description\": \"Member identifier\"},\n            \"service_type\": {\"type\": \"string\", \"description\": \"Type of denied service\"},\n            \"denial_date_range\": {\"type\": \"string\", \"description\": \"Date range for denial search\"}\n        },\n        \"mock_response\": {\n            \"denial_id\": \"DENY_20241001_001\",\n            \"member_id\": \"MEM123456\",\n            \"denial_details\": {\n                \"denial_date\": \"2024-10-01T14:30:00Z\",\n                \"service_denied\": \"MRI Lumbar Spine without contrast\",\n                \"service_code\": \"72148\",\n                \"requesting_provider\": \"Dr. Smith, MD\",\n                \"denial_category\": \"medical_necessity\"\n            },\n            \"denial_reasoning\": {\n                \"primary_reason\": \"Insufficient documentation of medical necessity\",\n                \"secondary_reasons\": [\n                    \"Conservative treatment duration not adequately documented\",\n                    \"Clinical indication not clearly established\"\n                ],\n                \"clinical_criteria_not_met\": [\n                    \"6 weeks of documented conservative treatment\",\n                    \"Red flag symptoms requiring urgent imaging\",\n                    \"Neurological deficits documented\"\n                ],\n                \"policy_references\": [\n                    \"Medical Policy MP-IMG-001: Lumbar Spine MRI Coverage Criteria\",\n                    \"Clinical Guidelines CG-MSK-003: Conservative Treatment Requirements\"\n                ]\n            },\n            \"review_details\": {\n                \"reviewing_physician\": \"Dr. Johnson, MD\",\n                \"review_date\": \"2024-10-01T14:30:00Z\",\n                \"review_type\": \"clinical_review\",\n                \"peer_review_required\": False,\n                \"decision_confidence\": 0.87\n            },\n            \"denial_codes\": [\n                {\"code\": \"MN001\", \"description\": \"Medical necessity not established\"},\n                {\"code\": \"CT002\", \"description\": \"Conservative treatment requirements not met\"}\n            ],\n            \"member_notification\": {\n                \"notification_date\": \"2024-10-01T16:00:00Z\",\n                \"notification_method\": \"mail_and_portal\",\n                \"appeal_deadline\": \"2024-11-01\",\n                \"appeal_instructions_provided\": True\n            }\n        }\n    },\n\n    \"policies_database\": {\n        \"name\": \"Policies Database Access\",\n        \"description\": \"Access comprehensive healthcare policies and guidelines for relevant policy identification and matching\",\n        \"input_schema\": {\n            \"service_code\": {\"type\": \"string\", \"description\": \"Medical service or procedure code\"},\n            \"policy_category\": {\"type\": \"string\", \"description\": \"Policy category\", \"enum\": [\"medical\", \"pharmacy\", \"coverage\", \"clinical\"]},\n            \"search_terms\": {\"type\": \"array\", \"description\": \"Keywords for policy search\"},\n            \"include_archived\": {\"type\": \"boolean\", \"description\": \"Include archived policies\"}\n        },\n        \"mock_response\": {\n            \"search_query\": \"MRI lumbar spine medical necessity\",\n            \"policies_found\": 3,\n            \"relevant_policies\": [\n                {\n                    \"policy_id\": \"MP-IMG-001\",\n                    \"policy_title\": \"Lumbar Spine MRI Coverage Criteria\",\n                    \"version\": \"2024.2\",\n                    \"effective_date\": \"2024-07-01\",\n                    \"policy_type\": \"medical_necessity\",\n                    \"relevance_score\": 0.96,\n                    \"coverage_criteria\": {\n                        \"covered_indications\": [\n                            \"Red flag symptoms (fever, neurological deficits, bowel/bladder dysfunction)\",\n                            \"Failed conservative treatment for 6+ weeks\",\n                            \"Persistent or worsening symptoms despite appropriate treatment\",\n                            \"Suspected serious underlying pathology\"\n                        ],\n                        \"documentation_requirements\": [\n                            \"Clinical history and physical examination findings\",\n                            \"Documentation of conservative treatment trials\",\n                            \"Symptom severity and functional impact assessment\",\n                            \"Provider clinical justification\"\n                        ],\n                        \"exclusions\": [\n                            \"Routine screening without clinical indication\",\n                            \"Imaging for chronic stable conditions without change\",\n                            \"Repeat imaging without clinical progression\"\n                        ]\n                    }\n                },\n                {\n                    \"policy_id\": \"CG-MSK-003\",\n                    \"policy_title\": \"Musculoskeletal Conservative Treatment Requirements\",\n                    \"version\": \"2024.1\",\n                    \"effective_date\": \"2024-06-15\",\n                    \"policy_type\": \"clinical_guideline\",\n                    \"relevance_score\": 0.89,\n                    \"treatment_requirements\": {\n                        \"first_line_treatments\": [\n                            \"NSAIDs or acetaminophen for pain management\",\n                            \"Activity modification and ergonomic assessment\",\n                            \"Physical therapy evaluation and treatment\"\n                        ],\n                        \"duration_requirements\": {\n                            \"minimum_conservative_trial\": \"6_weeks\",\n                            \"documentation_frequency\": \"weekly_progress_notes\",\n                            \"outcome_measures\": \"pain_scales_functional_assessment\"\n                        }\n                    }\n                }\n            ],\n            \"policy_updates\": {\n                \"recent_changes\": [\n                    {\n                        \"policy_id\": \"MP-IMG-001\",\n                        \"change_date\": \"2024-07-01\",\n                        \"change_description\": \"Updated conservative treatment duration from 4 to 6 weeks\"\n                    }\n                ],\n                \"upcoming_changes\": []\n            }\n        }\n    },\n\n    \"evidence_database\": {\n        \"name\": \"Referenced Evidence Database\",\n        \"description\": \"Access clinical evidence and supporting documentation for comprehensive analysis\",\n        \"input_schema\": {\n            \"evidence_type\": {\"type\": \"string\", \"description\": \"Type of evidence\", \"enum\": [\"clinical_studies\", \"guidelines\", \"protocols\", \"literature\"]},\n            \"medical_condition\": {\"type\": \"string\", \"description\": \"Medical condition or clinical topic\"},\n            \"search_terms\": {\"type\": \"array\", \"description\": \"Evidence search terms\"},\n            \"evidence_level\": {\"type\": \"string\", \"description\": \"Level of evidence\", \"enum\": [\"systematic_review\", \"rct\", \"cohort\", \"case_series\", \"expert_opinion\"]}\n        },\n        \"mock_response\": {\n            \"search_query\": \"lumbar spine MRI diagnostic accuracy low back pain\",\n            \"evidence_results\": [\n                {\n                    \"evidence_id\": \"EV_20241011_001\",\n                    \"title\": \"Diagnostic Accuracy of MRI for Lumbar Spine Pathology in Chronic Low Back Pain\",\n                    \"source\": \"Journal of Spine Medicine\",\n                    \"publication_date\": \"2024-08-15\",\n                    \"evidence_level\": \"systematic_review\",\n                    \"relevance_score\": 0.94,\n                    \"key_findings\": [\n                        \"MRI sensitivity 87% for disc herniation detection\",\n                        \"Specificity 92% for nerve root compression\",\n                        \"Clinical correlation essential for treatment planning\",\n                        \"Conservative treatment trial recommended before imaging\"\n                    ],\n                    \"clinical_implications\": \"MRI most beneficial after failed conservative treatment to guide surgical planning\"\n                },\n                {\n                    \"evidence_id\": \"EV_20241011_002\",\n                    \"title\": \"Conservative Treatment Effectiveness in Acute Low Back Pain\",\n                    \"source\": \"Physical Medicine & Rehabilitation Journal\",\n                    \"publication_date\": \"2024-06-20\",\n                    \"evidence_level\": \"rct\",\n                    \"relevance_score\": 0.88,\n                    \"key_findings\": [\n                        \"Physical therapy effective in 68% of patients within 6 weeks\",\n                        \"Combined therapy (PT + medication) superior to single modality\",\n                        \"Early imaging not associated with improved outcomes\",\n                        \"Patient education improves treatment adherence\"\n                    ],\n                    \"clinical_implications\": \"Six-week conservative trial is evidence-based standard of care\"\n                }\n            ],\n            \"clinical_guidelines\": [\n                {\n                    \"guideline_id\": \"GL_SPINE_001\",\n                    \"organization\": \"American College of Radiology\",\n                    \"title\": \"ACR Appropriateness Criteria for Low Back Pain\",\n                    \"recommendation_strength\": \"strong\",\n                    \"relevant_recommendations\": [\n                        \"Conservative treatment trial of 6+ weeks before imaging\",\n                        \"MRI appropriate for persistent symptoms after conservative care\",\n                        \"Clinical correlation required for imaging interpretation\"\n                    ]\n                }\n            ],\n            \"evidence_quality\": {\n                \"overall_strength\": \"high\",\n                \"consistency_across_studies\": 0.91,\n                \"clinical_applicability\": 0.94,\n                \"recency_score\": 0.89\n            }\n        }\n    },\n\n    \"healthcare_appeals_nlp\": {\n        \"name\": \"Healthcare Appeals NLP Processing Engine\",\n        \"description\": \"Advanced NLP engine specialized for healthcare appeals processing and medical terminology analysis\",\n        \"input_schema\": {\n            \"appeal_text\": {\"type\": \"string\", \"description\": \"Appeal letter text content\"},\n            \"processing_mode\": {\"type\": \"string\", \"description\": \"Processing mode\", \"enum\": [\"summarization\", \"argument_extraction\", \"sentiment_analysis\", \"comprehensive\"]},\n            \"medical_domain\": {\"type\": \"string\", \"description\": \"Medical domain focus\"},\n            \"output_length\": {\"type\": \"string\", \"description\": \"Desired output length\", \"enum\": [\"brief\", \"standard\", \"detailed\"]}\n        },\n        \"mock_response\": {\n            \"processing_id\": \"NLP_APP_20241011_001\",\n            \"appeal_id\": \"APP_20241011_001\",\n            \"text_analysis\": {\n                \"word_count\": 247,\n                \"reading_level\": \"12th_grade\",\n                \"sentiment_score\": 0.72,\n                \"urgency_indicators\": [\"persistent_pain\", \"affecting_work\", \"daily_activities\"],\n                \"medical_terminology_density\": 0.34\n            },\n            \"key_arguments_extracted\": [\n                {\n                    \"argument\": \"Failed conservative treatment\",\n                    \"supporting_evidence\": \"6 weeks of physical therapy and medication\",\n                    \"strength\": 0.89,\n                    \"medical_relevance\": 0.94\n                },\n                {\n                    \"argument\": \"Physician recommendation\",\n                    \"supporting_evidence\": \"Dr. Smith has recommended this imaging\",\n                    \"strength\": 0.87,\n                    \"medical_relevance\": 0.91\n                },\n                {\n                    \"argument\": \"Functional impact\",\n                    \"supporting_evidence\": \"affecting my ability to work and perform daily activities\",\n                    \"strength\": 0.83,\n                    \"medical_relevance\": 0.78\n                }\n            ],\n            \"medical_entities\": [\n                {\"entity\": \"MRI lumbar spine\", \"type\": \"procedure\", \"confidence\": 0.98},\n                {\"entity\": \"lower back pain\", \"type\": \"symptom\", \"confidence\": 0.96},\n                {\"entity\": \"physical therapy\", \"type\": \"treatment\", \"confidence\": 0.94},\n                {\"entity\": \"Dr. Smith\", \"type\": \"provider\", \"confidence\": 0.92}\n            ],\n            \"summary\": {\n                \"executive_summary\": \"Member appeals denial of lumbar spine MRI, citing 6 weeks of failed conservative treatment including physical therapy and medication. Physician has recommended imaging for persistent pain affecting work and daily activities.\",\n                \"key_points\": [\n                    \"Conservative treatment trial completed\",\n                    \"Physician support for imaging request\",\n                    \"Documented functional impairment\",\n                    \"Seeking diagnostic clarification\"\n                ],\n                \"clinical_context\": \"Chronic low back pain with failed conservative management\"\n            }\n        }\n    },\n\n    \"intelligent_linking_engine\": {\n        \"name\": \"Intelligent Linking Engine\",\n        \"description\": \"Machine learning engine for intelligent linking between appeals, denials, policies, and evidence\",\n        \"input_schema\": {\n            \"source_content\": {\"type\": \"string\", \"description\": \"Source content for linking analysis\"},\n            \"target_databases\": {\"type\": \"array\", \"description\": \"Target databases to link against\"},\n            \"linking_algorithms\": {\"type\": \"array\", \"description\": \"Linking algorithms to apply\"},\n            \"confidence_threshold\": {\"type\": \"float\", \"description\": \"Minimum confidence for automated linking\"}\n        },\n        \"mock_response\": {\n            \"linking_session_id\": \"LINK_20241011_001\",\n            \"source_document_id\": \"APP_20241011_001\",\n            \"linking_results\": {\n                \"denial_linkages\": [\n                    {\n                        \"denial_id\": \"DENY_20241001_001\",\n                        \"confidence_score\": 0.96,\n                        \"match_factors\": [\n                            {\"factor\": \"member_id_match\", \"weight\": 0.3, \"score\": 1.0},\n                            {\"factor\": \"service_code_match\", \"weight\": 0.25, \"score\": 1.0},\n                            {\"factor\": \"temporal_proximity\", \"weight\": 0.2, \"score\": 0.91},\n                            {\"factor\": \"clinical_context_similarity\", \"weight\": 0.25, \"score\": 0.94}\n                        ],\n                        \"linkage_rationale\": \"Perfect match on member ID and service code with high clinical similarity\"\n                    }\n                ],\n                \"policy_linkages\": [\n                    {\n                        \"policy_id\": \"MP-IMG-001\",\n                        \"policy_title\": \"Lumbar Spine MRI Coverage Criteria\",\n                        \"confidence_score\": 0.93,\n                        \"relevance_factors\": [\n                            {\"factor\": \"service_type_match\", \"score\": 1.0},\n                            {\"factor\": \"clinical_criteria_alignment\", \"score\": 0.89},\n                            {\"factor\": \"coverage_context_match\", \"score\": 0.91}\n                        ],\n                        \"applicable_criteria\": [\n                            \"Conservative treatment requirements\",\n                            \"Medical necessity documentation\",\n                            \"Clinical indication standards\"\n                        ]\n                    },\n                    {\n                        \"policy_id\": \"CG-MSK-003\",\n                        \"policy_title\": \"Conservative Treatment Requirements\",\n                        \"confidence_score\": 0.87,\n                        \"relevance_factors\": [\n                            {\"factor\": \"treatment_pathway_match\", \"score\": 0.94},\n                            {\"factor\": \"duration_requirements_match\", \"score\": 0.83}\n                        ]\n                    }\n                ],\n                \"evidence_linkages\": [\n                    {\n                        \"evidence_id\": \"EV_20241011_001\",\n                        \"title\": \"Diagnostic Accuracy of MRI for Lumbar Spine Pathology\",\n                        \"confidence_score\": 0.89,\n                        \"relevance_type\": \"diagnostic_utility\",\n                        \"supporting_points\": [\n                            \"Validates clinical appropriateness of requested imaging\",\n                            \"Supports medical necessity argument\",\n                            \"Demonstrates evidence-based practice\"\n                        ]\n                    }\n                ]\n            },\n            \"linking_quality_metrics\": {\n                \"overall_confidence\": 0.92,\n                \"cross_reference_completeness\": 0.94,\n                \"temporal_consistency\": 0.96,\n                \"clinical_coherence\": 0.91\n            },\n            \"automated_summary\": {\n                \"primary_connections\": \"Appeal directly relates to denial DENY_20241001_001 for same service and member\",\n                \"policy_alignment\": \"Appeal arguments align with MP-IMG-001 coverage criteria requirements\",\n                \"evidence_support\": \"Clinical evidence supports appropriateness of requested imaging after conservative treatment\"\n            }\n        }\n    }\n}\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    # Mock mode capabilities\n    mock_mode: bool = False\n    mock_tools: list[StructuredTool] = []\n    _mock_tool_cache: dict = {}\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        self._ensure_cache_structure()\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n        # Initialize mock mode\n        self.mock_mode = False\n        self.mock_tools = []\n        self._mock_tool_cache = {}\n\n    def _ensure_cache_structure(self):\n        \"\"\"Ensure the cache has the required structure.\"\"\"\n        # Check if servers key exists and is not CacheMiss\n        servers_value = safe_cache_get(self._shared_component_cache, \"servers\")\n        if servers_value is None:\n            safe_cache_set(self._shared_component_cache, \"servers\", {})\n\n        # Check if last_selected_server key exists and is not CacheMiss\n        last_server_value = safe_cache_get(self._shared_component_cache, \"last_selected_server\")\n        if last_server_value is None:\n            safe_cache_set(self._shared_component_cache, \"last_selected_server\", \"\")\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                await logger.awarning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            await logger.aexception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    def _has_valid_server_connection(self, server_config=None) -> bool:\n        \"\"\"Check if we have a valid MCP server connection available.\"\"\"\n        if not server_config:\n            return False\n\n        # Check if we have connection details (command for STDIO or url for SSE)\n        has_command = server_config.get(\"command\") and server_config[\"command\"].strip()\n        has_url = server_config.get(\"url\") and server_config[\"url\"].strip()\n\n        # If we only have the default placeholder command, it's not a real server\n        if has_command and \"echo\" in server_config[\"command\"] and \"tools\" in server_config[\"command\"]:\n            return False\n\n        return has_command or has_url\n\n    def _generate_mock_tool_from_config(self, tool_name: str, description: str = \"\") -> StructuredTool:\n        \"\"\"Generate a mock tool based on tool_name and description from Genesis config.\"\"\"\n        from pydantic import BaseModel, Field\n\n        # Get template if available, otherwise create generic\n        template = MOCK_TOOL_TEMPLATES.get(tool_name, {\n            \"name\": tool_name.replace(\"_\", \" \").title(),\n            \"description\": description or f\"Mock tool for {tool_name}\",\n            \"input_schema\": {\n                \"input_data\": {\"type\": \"string\", \"description\": \"Input data for the tool\"}\n            },\n            \"mock_response\": {\n                \"tool_name\": tool_name,\n                \"status\": \"success\",\n                \"data\": \"Mock response data\",\n                \"timestamp\": \"2024-01-15T10:00:00Z\"\n            }\n        })\n\n        # Create Pydantic model for input schema\n        schema_fields = {}\n        for field_name, field_info in template[\"input_schema\"].items():\n            field_type = str  # Default to string\n            if field_info[\"type\"] == \"integer\":\n                field_type = int\n            elif field_info[\"type\"] == \"array\":\n                field_type = list\n\n            schema_fields[field_name] = (field_type, Field(description=field_info[\"description\"]))\n\n        InputSchema = type(f\"{tool_name}_Schema\", (BaseModel,), schema_fields)\n\n        # Create mock function\n        def mock_function(**kwargs) -> dict:\n            \"\"\"Mock function that returns predefined response.\"\"\"\n            response = template[\"mock_response\"].copy()\n            # Include input parameters in response for traceability\n            response[\"input_parameters\"] = kwargs\n            response[\"mock_mode\"] = True\n            return response\n\n        # Create StructuredTool\n        return StructuredTool(\n            name=tool_name,\n            description=template[\"description\"],\n            func=mock_function,\n            args_schema=InputSchema\n        )\n\n    async def _generate_mock_tools_from_component_config(self) -> list[StructuredTool]:\n        \"\"\"Generate mock tools based on component configuration.\"\"\"\n        tools = []\n\n        # Check if we have tool_name in our configuration\n        # This comes from Genesis specification config merged with mapper defaults\n        config = getattr(self, '_component_config', {})\n\n        tool_name = config.get('tool_name')\n        description = config.get('description', '')\n\n        if tool_name:\n            await logger.ainfo(f\"Generating mock tool for: {tool_name}\")\n            mock_tool = self._generate_mock_tool_from_config(tool_name, description)\n            tools.append(mock_tool)\n\n            # Cache the mock tool\n            self._mock_tool_cache[tool_name] = mock_tool\n        else:\n            await logger.awarning(\"No tool_name found in component config for mock generation\")\n\n        return tools\n\n    async def _try_mock_mode_fallback(self, server_name: str, server_config: dict = None) -> tuple[list, dict]:\n        \"\"\"Fallback to mock mode when no real server is available.\"\"\"\n        await logger.ainfo(f\"Falling back to mock mode for server: {server_name}\")\n\n        self.mock_mode = True\n\n        # Generate mock tools based on component configuration\n        mock_tools = self._generate_mock_tools_from_component_config()\n\n        if mock_tools:\n            self.tools = mock_tools\n            self.tool_names = [tool.name for tool in mock_tools]\n            self._tool_cache = {tool.name: tool for tool in mock_tools}\n\n            # Create mock server config for caching\n            mock_server_config = {\n                \"mock_mode\": True,\n                \"tool_name\": getattr(self, '_component_config', {}).get('tool_name', 'unknown'),\n                \"description\": getattr(self, '_component_config', {}).get('description', '')\n            }\n\n            await logger.ainfo(f\"Generated {len(mock_tools)} mock tools: {self.tool_names}\")\n            return mock_tools, {\"name\": server_name, \"config\": mock_server_config}\n        else:\n            await logger.awarning(\"No mock tools could be generated\")\n            return [], {\"name\": server_name, \"config\": server_config}\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n        cached = servers_cache.get(server_name) if isinstance(servers_cache, dict) else None\n\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async with session_scope() as db:\n                if not self.user_id:\n                    msg = \"User ID is required for fetching MCP tools.\"\n                    raise ValueError(msg)\n                current_user = await get_user_by_id(db, self.user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n            # If get_server returns empty but we have a config, use it\n            if not server_config and server_config_from_value:\n                server_config = server_config_from_value\n\n            # Check if we have a valid server connection or should fall back to mock mode\n            if not server_config or not self._has_valid_server_connection(server_config):\n                await logger.ainfo(f\"No valid server connection found for {server_name}, attempting mock mode fallback\")\n\n                # Store component config for mock tool generation\n                if server_config_from_value:\n                    self._component_config = server_config_from_value\n                elif hasattr(self, 'template') and self.template:\n                    # Extract config from component template if available\n                    template_config = {}\n                    for key, value in self.template.items():\n                        if isinstance(value, dict) and 'value' in value:\n                            template_config[key] = value['value']\n                    self._component_config = template_config\n                else:\n                    self._component_config = {}\n\n                return await self._try_mock_mode_fallback(server_name, server_config)\n\n            # Try real MCP server connection\n            _, tool_list, tool_cache = await update_tools(\n                server_name=server_name,\n                server_config=server_config,\n                mcp_stdio_client=self.stdio_client,\n                mcp_sse_client=self.sse_client,\n            )\n\n            self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n            self._tool_cache = tool_cache\n            self.tools = tool_list\n            # Cache the result using shared cache\n            cache_data = {\n                \"tools\": tool_list,\n                \"tool_names\": self.tool_names,\n                \"tool_cache\": tool_cache,\n                \"config\": server_config,\n            }\n\n            # Safely update the servers cache\n            current_servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n            if isinstance(current_servers_cache, dict):\n                current_servers_cache[server_name] = cache_data\n                safe_cache_set(self._shared_component_cache, \"servers\", current_servers_cache)\n\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            await logger.aexception(msg)\n            # Try mock mode as fallback for timeout\n            await logger.ainfo(\"Attempting mock mode fallback due to timeout\")\n            return await self._try_mock_mode_fallback(server_name, server_config)\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            await logger.aexception(msg)\n            # Try mock mode as fallback for any other error\n            await logger.ainfo(\"Attempting mock mode fallback due to error\")\n            return await self._try_mock_mode_fallback(server_name, server_config)\n        else:\n            return tool_list, {\"name\": server_name, \"config\": server_config}\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            await logger.aexception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        await logger.awarning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = safe_cache_get(self._shared_component_cache, \"last_selected_server\", \"\")\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    if current_server_name:\n                        servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                        if isinstance(servers_cache, dict):\n                            cached = servers_cache.get(current_server_name)\n                            if cached is not None and cached.get(\"tool_names\"):\n                                cached_tools = cached[\"tool_names\"]\n                                current_tools = build_config[\"tool\"][\"options\"]\n                                if current_tools == cached_tools:\n                                    return build_config\n                    else:\n                        return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                safe_cache_set(self._shared_component_cache, \"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                    if isinstance(servers_cache, dict):\n                        cached = servers_cache.get(current_server_name)\n                        if cached is not None:\n                            cached_tools = cached[\"tools\"]\n                            self.tools = cached_tools\n                            self.tool_names = cached[\"tool_names\"]\n                            self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            await logger.aexception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            await logger.awarning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                await logger.ainfo(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    await logger.awarning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    await logger.aexception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            await logger.aexception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            await logger.aexception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value is not None:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            await logger.aexception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {}
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "remix_lock_layer"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {},
                    "description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_name": "remix__status_status_get",
                    "name": "remix__status_status_get",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "remix__status_status_get"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_name": "remix__status_health_get",
                    "name": "remix__status_health_get",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "remix__status_health_get"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_name": "remix__status_ready_get",
                    "name": "remix__status_ready_get",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "remix__status_ready_get"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_description": "Returns the current status of the service.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`",
                    "display_name": "remix__status_startup_get",
                    "name": "remix__status_startup_get",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "remix__status_startup_get"
                    ]
                  },
                  {
                    "args": {
                      "app_name": {
                        "title": "App Name",
                        "type": "string"
                      }
                    },
                    "description": " Async App Docs Endpoint\n\n\n**Query Parameters:**\n\n- **app_name** (Required): No description.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": " Async App Docs Endpoint\n\n\n**Query Parameters:**\n\n- **app_name** (Required): No description.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix__async_app_docs_endpoint_asyncapi_docs_get",
                    "name": "remix__async_app_docs_endpoint_asyncapi_docs_g",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "remix__async_app_docs_endpoint_asyncapi_docs_get"
                    ]
                  },
                  {
                    "args": {
                      "app_name": {
                        "title": "App Name",
                        "type": "string"
                      }
                    },
                    "description": " Async App Schema Endpoint\n\n\n**Query Parameters:**\n\n- **app_name** (Required): No description.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": " Async App Schema Endpoint\n\n\n**Query Parameters:**\n\n- **app_name** (Required): No description.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/json`\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix__async_app_schema_endpoint_asyncapi_schema_get",
                    "name": "remix__async_app_schema_endpoint_asyncapi_sche",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix__async_app_schema_endpoint_asyncapi_schema_get"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the currently loaded project if one is loaded.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layer_id**: The layer identifier (layer path for non-anonymous layers)\n\n  - **Example:**\n```json\n{\n  \"layer_id\": \"string\"\n}\n```",
                    "display_description": "Get the currently loaded project if one is loaded.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layer_id**: The layer identifier (layer path for non-anonymous layers)\n\n  - **Example:**\n```json\n{\n  \"layer_id\": \"string\"\n}\n```",
                    "display_name": "remix_get_loaded_project",
                    "name": "remix_get_loaded_project",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_loaded_project"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Project identifier for the project to open as project",
                        "title": "Layer Id",
                        "type": "string"
                      }
                    },
                    "description": "Open a project.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Project identifier for the project to open as project\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Open a project.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Project identifier for the project to open as project\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_open_project",
                    "name": "remix_open_project",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_open_project"
                    ]
                  },
                  {
                    "args": {
                      "layer_count": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": -1,
                        "description": "The number of layers to get per `layer_type`. If `layer_type` is not set this parameter will have no effect. Use -1 to get all the layers.",
                        "title": "Layer Count"
                      },
                      "layer_types": {
                        "anyOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "The type of layer to get. Filtering by layer type will ignore layer children.",
                        "title": "Layer Types"
                      }
                    },
                    "description": "Get the layer tree in the current stage.\n\n\n**Query Parameters:**\n\n- **layer_types**: The type of layer to get. Filtering by layer type will ignore layer children.\n\n- **layer_count**: The number of layers to get per `layer_type`. If `layer_type` is not set this parameter will have no effect. Use -1 to get all the layers.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layers**: The list of layers in the layer stack\n\n  - **Example:**\n```json\n{\n  \"layers\": [\n    \"unknown_type\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the layer tree in the current stage.\n\n\n**Query Parameters:**\n\n- **layer_types**: The type of layer to get. Filtering by layer type will ignore layer children.\n\n- **layer_count**: The number of layers to get per `layer_type`. If `layer_type` is not set this parameter will have no effect. Use -1 to get all the layers.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layers**: The list of layers in the layer stack\n\n  - **Example:**\n```json\n{\n  \"layers\": [\n    \"unknown_type\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_layers",
                    "name": "remix_get_layers",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_layers"
                    ]
                  },
                  {
                    "args": {
                      "create_or_insert": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "description": "Whether to create a new layer or insert a sublayer",
                        "title": "Create Or Insert"
                      },
                      "layer_path": {
                        "description": "The path to the layer to create",
                        "title": "Layer Path",
                        "type": "string"
                      },
                      "layer_type": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "If used, will set custom metadata for the layer type",
                        "title": "Layer Type"
                      },
                      "parent_layer_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Layer identifier (layer path for non-anonymous layers) for the layer to insert the sublayer into. If none, the root layer will be used",
                        "title": "Parent Layer Id"
                      },
                      "replace_existing": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Remove existing layers of type layer_type if set",
                        "title": "Replace Existing"
                      },
                      "set_edit_target": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Whether to set the layer as the edit target",
                        "title": "Set Edit Target"
                      },
                      "sublayer_position": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": -1,
                        "description": "The position to insert the new layer at. Use -1 to insert at the end.",
                        "title": "Sublayer Position"
                      }
                    },
                    "description": "Create a layer in the current stage.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Create a layer in the current stage.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_create_layer",
                    "name": "remix_create_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_create_layer"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Layer identifier for the layer to get the sublayers from",
                        "title": "Layer Id",
                        "type": "string"
                      },
                      "layer_types": {
                        "anyOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "The type of layer to get. Filtering by layer type will ignore layer children.",
                        "title": "Layer Types"
                      }
                    },
                    "description": "Get the immediate sublayers of the given layer.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to get the sublayers from\n\n\n**Query Parameters:**\n\n- **layer_types**: The type of layer to get. Filtering by layer type will ignore layer children.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layers**: The list of layers in the layer stack\n\n  - **Example:**\n```json\n{\n  \"layers\": [\n    \"unknown_type\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the immediate sublayers of the given layer.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to get the sublayers from\n\n\n**Query Parameters:**\n\n- **layer_types**: The type of layer to get. Filtering by layer type will ignore layer children.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layers**: The list of layers in the layer stack\n\n  - **Example:**\n```json\n{\n  \"layers\": [\n    \"unknown_type\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_sublayers",
                    "name": "remix_get_sublayers",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_sublayers"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Layer identifier for the layer to remove",
                        "title": "Layer Id",
                        "type": "string"
                      },
                      "parent_layer_id": {
                        "description": "Layer identifier (layer path for non-anonymous layers) for the parent layer of the layer to delete. If none, the root layer will be used",
                        "title": "Parent Layer Id",
                        "type": "string"
                      }
                    },
                    "description": "Remove a layer from the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to remove\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Remove a layer from the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to remove\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_remove_layer",
                    "name": "remix_remove_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_remove_layer"
                    ]
                  },
                  {
                    "args": {
                      "current_parent_layer_id": {
                        "description": "Layer identifier (layer path for non-anonymous layers) for the layer to move",
                        "title": "Current Parent Layer Id",
                        "type": "string"
                      },
                      "layer_id": {
                        "description": "Layer identifier for the layer to move",
                        "title": "Layer Id",
                        "type": "string"
                      },
                      "layer_index": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": -1,
                        "description": "The position to insert the layer at. Use -1 to insert at the end.",
                        "title": "Layer Index"
                      },
                      "new_parent_layer_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Layer identifier (layer path for non-anonymous layers) for the new parent layer. If none, the layer will be moved to the root layer",
                        "title": "New Parent Layer Id"
                      }
                    },
                    "description": "Move a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to move\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Move a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to move\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_move_layer",
                    "name": "remix_move_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_move_layer"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Layer identifier for the layer to lock/unlock",
                        "title": "Layer Id",
                        "type": "string"
                      },
                      "value": {
                        "description": "Whether to lock the layer",
                        "title": "Value",
                        "type": "boolean"
                      }
                    },
                    "description": "Lock or unlock a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to lock/unlock\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Lock or unlock a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to lock/unlock\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_lock_layer",
                    "name": "remix_lock_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_lock_layer"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Layer identifier for the layer to lock/unlock",
                        "title": "Layer Id",
                        "type": "string"
                      },
                      "value": {
                        "description": "Whether to mute the layer",
                        "title": "Value",
                        "type": "boolean"
                      }
                    },
                    "description": "Mute or unmute a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to lock/unlock\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Mute or unmute a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to lock/unlock\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_mute_layer",
                    "name": "remix_mute_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_mute_layer"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Layer identifier for the layer to save",
                        "title": "Layer Id",
                        "type": "string"
                      }
                    },
                    "description": "Save a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to save\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Save a layer in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to save\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_save_layer",
                    "name": "remix_save_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_save_layer"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the active edit target in the current stage.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layer_id**: The layer identifier (layer path for non-anonymous layers)\n\n  - **Example:**\n```json\n{\n  \"layer_id\": \"string\"\n}\n```",
                    "display_description": "Get the active edit target in the current stage.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layer_id**: The layer identifier (layer path for non-anonymous layers)\n\n  - **Example:**\n```json\n{\n  \"layer_id\": \"string\"\n}\n```",
                    "display_name": "remix_get_edit_target_layer",
                    "name": "remix_get_edit_target_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_edit_target_layer"
                    ]
                  },
                  {
                    "args": {
                      "layer_id": {
                        "description": "Layer identifier for the layer to set as edit target",
                        "title": "Layer Id",
                        "type": "string"
                      }
                    },
                    "description": "Set the active edit target in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to set as edit target\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Set the active edit target in the current stage.\n\n\n**Path Parameters:**\n\n- **layer_id** (Required): Layer identifier for the layer to set as edit target\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_set_edit_target_layer",
                    "name": "remix_set_edit_target_layer",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_set_edit_target_layer"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the available layer types.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layer_types**: The types of layers available\n\n  - **Example:**\n```json\n{\n  \"layer_types\": [\n    \"string\"\n  ]\n}\n```",
                    "display_description": "Get the available layer types.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **layer_types**: The types of layers available\n\n  - **Example:**\n```json\n{\n  \"layer_types\": [\n    \"string\"\n  ]\n}\n```",
                    "display_name": "remix_get_layer_types",
                    "name": "remix_get_layer_types",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_layer_types"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the list of available non-ingested model assets. This will use the default output directory for non-ingested model assets to list the available assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **file_paths**: List of paths pointing to files\n\n  - **Example:**\n```json\n{\n  \"file_paths\": [\n    \"string\"\n  ]\n}\n```",
                    "display_description": "Get the list of available non-ingested model assets. This will use the default output directory for non-ingested model assets to list the available assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **file_paths**: List of paths pointing to files\n\n  - **Example:**\n```json\n{\n  \"file_paths\": [\n    \"string\"\n  ]\n}\n```",
                    "display_name": "remix_get_available_model_assets",
                    "name": "remix_get_available_model_assets",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_available_model_assets"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the list of available non-ingested texture assets. This will use the default output directory for non-ingested texture assets to list the available assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **file_paths**: List of paths pointing to files\n\n  - **Example:**\n```json\n{\n  \"file_paths\": [\n    \"string\"\n  ]\n}\n```",
                    "display_description": "Get the list of available non-ingested texture assets. This will use the default output directory for non-ingested texture assets to list the available assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **file_paths**: List of paths pointing to files\n\n  - **Example:**\n```json\n{\n  \"file_paths\": [\n    \"string\"\n  ]\n}\n```",
                    "display_name": "remix_get_available_texture_assets",
                    "name": "remix_get_available_texture_assets",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_available_texture_assets"
                    ]
                  },
                  {
                    "args": {
                      "asset_type": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "A type of asset to filter the results by ('textures' or 'models')",
                        "title": "Asset Type"
                      }
                    },
                    "description": "Get the list of available ingested assets. This will use the default output directory for ingested assets to list the available assets.\n\n\n**Query Parameters:**\n\n- **asset_type**: A type of asset to filter the results by ('textures' or 'models')\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **file_paths**: List of paths pointing to files\n\n  - **Example:**\n```json\n{\n  \"file_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the list of available ingested assets. This will use the default output directory for ingested assets to list the available assets.\n\n\n**Query Parameters:**\n\n- **asset_type**: A type of asset to filter the results by ('textures' or 'models')\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **file_paths**: List of paths pointing to files\n\n  - **Example:**\n```json\n{\n  \"file_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_available_ingested_assets",
                    "name": "remix_get_available_ingested_assets",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_available_ingested_assets"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the default output directory for non-ingested model assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **directory_path**: Path pointing to a directory\n\n  - **Example:**\n```json\n{\n  \"directory_path\": \"string\"\n}\n```",
                    "display_description": "Get the default output directory for non-ingested model assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **directory_path**: Path pointing to a directory\n\n  - **Example:**\n```json\n{\n  \"directory_path\": \"string\"\n}\n```",
                    "display_name": "remix_get_default_model_asset_directory",
                    "name": "remix_get_default_model_asset_directory",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_default_model_asset_directory"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the default output directory for non-ingested texture assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **directory_path**: Path pointing to a directory\n\n  - **Example:**\n```json\n{\n  \"directory_path\": \"string\"\n}\n```",
                    "display_description": "Get the default output directory for non-ingested texture assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **directory_path**: Path pointing to a directory\n\n  - **Example:**\n```json\n{\n  \"directory_path\": \"string\"\n}\n```",
                    "display_name": "remix_get_default_texture_asset_directory",
                    "name": "remix_get_default_texture_asset_directory",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_default_texture_asset_directory"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get the default output directory for ingested assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **directory_path**: Path pointing to a directory\n\n  - **Example:**\n```json\n{\n  \"directory_path\": \"string\"\n}\n```",
                    "display_description": "Get the default output directory for ingested assets.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **directory_path**: Path pointing to a directory\n\n  - **Example:**\n```json\n{\n  \"directory_path\": \"string\"\n}\n```",
                    "display_name": "remix_get_default_ingested_asset_directory",
                    "name": "remix_get_default_ingested_asset_directory",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_default_ingested_asset_directory"
                    ]
                  },
                  {
                    "args": {
                      "exists": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "description": "Filter an prim if it exists or not on a given layer. Use in conjunction with `layer_identifier` to filter on a given layer, otherwise this parameter will be ignored.",
                        "title": "Exists"
                      },
                      "filter_session_prims": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Filter out the prims that exist on the session layer or not",
                        "title": "Filter Session Prims"
                      },
                      "layer_identifier": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Look for prims that exists or not on a given layer. Use the `exists` query parameter to set whether existing or non-existing prims should be returned.",
                        "title": "Layer Identifier"
                      },
                      "prim_hashes": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Filter prim paths to keep specific hashes",
                        "title": "Prim Hashes"
                      },
                      "prim_types": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Filter prim paths to keep specific types of prims",
                        "title": "Prim Types"
                      },
                      "selection": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Select all prims (False) or the prims currently selected in the viewport (True)",
                        "title": "Selection"
                      }
                    },
                    "description": "Get the the prim paths in the current stage.\n\n\n**Query Parameters:**\n\n- **prim_hashes**: Filter prim paths to keep specific hashes\n\n- **prim_types**: Filter prim paths to keep specific types of prims\n\n- **selection**: Select all prims (False) or the prims currently selected in the viewport (True)\n\n- **filter_session_prims**: Filter out the prims that exist on the session layer or not\n\n- **layer_identifier**: Look for prims that exists or not on a given layer. Use the `exists` query parameter to set whether existing or non-existing prims should be returned.\n\n- **exists**: Filter an prim if it exists or not on a given layer. Use in conjunction with `layer_identifier` to filter on a given layer, otherwise this parameter will be ignored.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the the prim paths in the current stage.\n\n\n**Query Parameters:**\n\n- **prim_hashes**: Filter prim paths to keep specific hashes\n\n- **prim_types**: Filter prim paths to keep specific types of prims\n\n- **selection**: Select all prims (False) or the prims currently selected in the viewport (True)\n\n- **filter_session_prims**: Filter out the prims that exist on the session layer or not\n\n- **layer_identifier**: Look for prims that exists or not on a given layer. Use the `exists` query parameter to set whether existing or non-existing prims should be returned.\n\n- **exists**: Filter an prim if it exists or not on a given layer. Use in conjunction with `layer_identifier` to filter on a given layer, otherwise this parameter will be ignored.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_prim_paths",
                    "name": "remix_get_prim_paths",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_prim_paths"
                    ]
                  },
                  {
                    "args": {
                      "prim_path": {
                        "description": "The prim path to the asset that will be inspected for instances",
                        "title": "Prim Path",
                        "type": "string"
                      }
                    },
                    "description": "Get a given model's instances. The prim must be a model.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to the asset that will be inspected for instances\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get a given model's instances. The prim must be a model.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to the asset that will be inspected for instances\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_model_instances",
                    "name": "remix_get_model_instances",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_model_instances"
                    ]
                  },
                  {
                    "args": {
                      "prim_path": {
                        "description": "The prim path to the asset that will be inspected for textures",
                        "title": "Prim Path",
                        "type": "string"
                      },
                      "texture_types": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "The type of textures to look for in the given material.",
                        "title": "Texture Types"
                      }
                    },
                    "description": "Get a given material's textures. The prim must be a material.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to the asset that will be inspected for textures\n\n\n**Query Parameters:**\n\n- **texture_types**: The type of textures to look for in the given material.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **textures**: A list of prim paths (shader input paths) and their corresponding texture paths\n\n  - **Example:**\n```json\n{\n  \"textures\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get a given material's textures. The prim must be a material.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to the asset that will be inspected for textures\n\n\n**Query Parameters:**\n\n- **texture_types**: The type of textures to look for in the given material.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **textures**: A list of prim paths (shader input paths) and their corresponding texture paths\n\n  - **Example:**\n```json\n{\n  \"textures\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_material_textures",
                    "name": "remix_get_material_textures",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_material_textures"
                    ]
                  },
                  {
                    "args": {
                      "prim_path": {
                        "description": "The prim path to the asset that will be inspected for file paths",
                        "title": "Prim Path",
                        "type": "string"
                      }
                    },
                    "description": "Get a given prim's reference file paths.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to the asset that will be inspected for file paths\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **reference_paths**: A list of prim paths and their corresponding reference relative paths and layer identifiers. Combine the reference path's relative path with the layer identifier to get the absolute reference path.\n\n  - **Example:**\n```json\n{\n  \"reference_paths\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get a given prim's reference file paths.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to the asset that will be inspected for file paths\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **reference_paths**: A list of prim paths and their corresponding reference relative paths and layer identifiers. Combine the reference path's relative path with the layer identifier to get the absolute reference path.\n\n  - **Example:**\n```json\n{\n  \"reference_paths\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_prim_reference_file_paths",
                    "name": "remix_get_prim_reference_file_paths",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_prim_reference_file_paths"
                    ]
                  },
                  {
                    "args": {
                      "asset_file_path": {
                        "description": "The path to the asset to use as a reference",
                        "title": "Asset File Path",
                        "type": "string"
                      },
                      "existing_asset_file_path": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "The relative path of the asset reference to replace",
                        "title": "Existing Asset File Path"
                      },
                      "existing_asset_layer_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "The layer identifier where the existing reference is located",
                        "title": "Existing Asset Layer Id"
                      },
                      "force": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Whether to force use the reference or validate the ingestion status",
                        "title": "Force"
                      },
                      "prim_path": {
                        "description": "The prim path for which to replace a reference",
                        "title": "Prim Path",
                        "type": "string"
                      }
                    },
                    "description": "Replace a prim's reference file path. If no existing file path is provided, the first reference will be replaced.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path for which to replace a reference\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **reference_paths**: A list of prim paths and their corresponding reference relative paths and layer identifiers. Combine the reference path's relative path with the layer identifier to get the absolute reference path.\n\n  - **Example:**\n```json\n{\n  \"reference_paths\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Replace a prim's reference file path. If no existing file path is provided, the first reference will be replaced.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path for which to replace a reference\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **reference_paths**: A list of prim paths and their corresponding reference relative paths and layer identifiers. Combine the reference path's relative path with the layer identifier to get the absolute reference path.\n\n  - **Example:**\n```json\n{\n  \"reference_paths\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_replace_prim_reference_file_path",
                    "name": "remix_replace_prim_reference_file_path",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_replace_prim_reference_file_path"
                    ]
                  },
                  {
                    "args": {
                      "asset_file_path": {
                        "description": "The path to the asset to use as a reference",
                        "title": "Asset File Path",
                        "type": "string"
                      },
                      "force": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Whether to force use the reference or validate the ingestion status",
                        "title": "Force"
                      },
                      "prim_path": {
                        "description": "The prim path to append a reference to",
                        "title": "Prim Path",
                        "type": "string"
                      }
                    },
                    "description": "Append a new reference to a given prim.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to append a reference to\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **reference_paths**: A list of prim paths and their corresponding reference relative paths and layer identifiers. Combine the reference path's relative path with the layer identifier to get the absolute reference path.\n\n  - **Example:**\n```json\n{\n  \"reference_paths\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Append a new reference to a given prim.\n\n\n**Path Parameters:**\n\n- **prim_path** (Required): The prim path to append a reference to\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **reference_paths**: A list of prim paths and their corresponding reference relative paths and layer identifiers. Combine the reference path's relative path with the layer identifier to get the absolute reference path.\n\n  - **Example:**\n```json\n{\n  \"reference_paths\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_append_prim_reference_file_path",
                    "name": "remix_append_prim_reference_file_path",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_append_prim_reference_file_path"
                    ]
                  },
                  {
                    "args": {
                      "prim_paths": {
                        "description": "Comma-separated list of prim paths to select",
                        "title": "Prim Paths",
                        "type": "string"
                      }
                    },
                    "description": "Set the selection in the current stage.\n\n\n**Path Parameters:**\n\n- **prim_paths** (Required): Comma-separated list of prim paths to select\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Set the selection in the current stage.\n\n\n**Path Parameters:**\n\n- **prim_paths** (Required): Comma-separated list of prim paths to select\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_set_selection",
                    "name": "remix_set_selection",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_set_selection"
                    ]
                  },
                  {
                    "args": {
                      "exists": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "description": "Filter an texture if it exists or not on a given layer. Use in conjunction with `layer_identifier` to filter on a given layer, otherwise this parameter will be ignored.",
                        "title": "Exists"
                      },
                      "filter_session_prims": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Filter out prims that exist on the session layer or not",
                        "title": "Filter Session Prims"
                      },
                      "layer_identifier": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Look for textures that exist or not on a given layer. Use the `exists` query parameter to set whether existing or non-existing textures should be returned.",
                        "title": "Layer Identifier"
                      },
                      "prim_hashes": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Filter textures to keep textures from specific material hashes",
                        "title": "Prim Hashes"
                      },
                      "selection": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Select all prims (False) or the stage selection (True)",
                        "title": "Selection"
                      },
                      "texture_types": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "The types of textures to look for",
                        "title": "Texture Types"
                      }
                    },
                    "description": "Get the texture properties and associated asset paths in the current stage.\n\n\n**Query Parameters:**\n\n- **prim_hashes**: Filter textures to keep textures from specific material hashes\n\n- **texture_types**: The types of textures to look for\n\n- **selection**: Select all prims (False) or the stage selection (True)\n\n- **filter_session_prims**: Filter out prims that exist on the session layer or not\n\n- **layer_identifier**: Look for textures that exist or not on a given layer. Use the `exists` query parameter to set whether existing or non-existing textures should be returned.\n\n- **exists**: Filter an texture if it exists or not on a given layer. Use in conjunction with `layer_identifier` to filter on a given layer, otherwise this parameter will be ignored.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **textures**: A list of prim paths (shader input paths) and their corresponding texture paths\n\n  - **Example:**\n```json\n{\n  \"textures\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the texture properties and associated asset paths in the current stage.\n\n\n**Query Parameters:**\n\n- **prim_hashes**: Filter textures to keep textures from specific material hashes\n\n- **texture_types**: The types of textures to look for\n\n- **selection**: Select all prims (False) or the stage selection (True)\n\n- **filter_session_prims**: Filter out prims that exist on the session layer or not\n\n- **layer_identifier**: Look for textures that exist or not on a given layer. Use the `exists` query parameter to set whether existing or non-existing textures should be returned.\n\n- **exists**: Filter an texture if it exists or not on a given layer. Use in conjunction with `layer_identifier` to filter on a given layer, otherwise this parameter will be ignored.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **textures**: A list of prim paths (shader input paths) and their corresponding texture paths\n\n  - **Example:**\n```json\n{\n  \"textures\": [\n    [\n      \"example_item\"\n    ]\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_textures",
                    "name": "remix_get_textures",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_textures"
                    ]
                  },
                  {
                    "args": {
                      "force": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Whether to replace a non-ingested asset or fail the validation instead",
                        "title": "Force"
                      },
                      "textures": {
                        "description": "A list of prim paths (shader input paths) and their corresponding texture paths",
                        "items": {
                          "items": {},
                          "type": "array"
                        },
                        "title": "Textures",
                        "type": "array"
                      }
                    },
                    "description": "Override the given textures on the current edit target in the current stage.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Override the given textures on the current edit target in the current stage.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_override_textures",
                    "name": "remix_override_textures",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_override_textures"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get a list of the available texture types.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **texture_types**: A list of texture types\n\n  - **Example:**\n```json\n{\n  \"texture_types\": [\n    \"string\"\n  ]\n}\n```",
                    "display_description": "Get a list of the available texture types.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **texture_types**: A list of texture types\n\n  - **Example:**\n```json\n{\n  \"texture_types\": [\n    \"string\"\n  ]\n}\n```",
                    "display_name": "remix_get_valid_texture_types",
                    "name": "remix_get_valid_texture_types",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_valid_texture_types"
                    ]
                  },
                  {
                    "args": {
                      "texture_prim_path": {
                        "description": "The prim path of a given texture",
                        "title": "Texture Prim Path",
                        "type": "string"
                      }
                    },
                    "description": "Get the parent material for a given texture prim path.\n\n\n**Path Parameters:**\n\n- **texture_prim_path** (Required): The prim path of a given texture\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the parent material for a given texture prim path.\n\n\n**Path Parameters:**\n\n- **texture_prim_path** (Required): The prim path of a given texture\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_texture_material",
                    "name": "remix_get_texture_material",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_texture_material"
                    ]
                  },
                  {
                    "args": {
                      "texture_prim_path": {
                        "description": "The prim path of a given texture",
                        "title": "Texture Prim Path",
                        "type": "string"
                      },
                      "texture_type": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "Get the expected input for a given texture type or based on an ingested texture's file name.",
                        "title": "Texture Type"
                      }
                    },
                    "description": "Get the parent material inputs for a given texture prim path.\n\n\n**Path Parameters:**\n\n- **texture_prim_path** (Required): The prim path of a given texture\n\n\n**Query Parameters:**\n\n- **texture_type**: Get the expected input for a given texture type or based on an ingested texture's file name.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Get the parent material inputs for a given texture prim path.\n\n\n**Path Parameters:**\n\n- **texture_prim_path** (Required): The prim path of a given texture\n\n\n**Query Parameters:**\n\n- **texture_type**: Get the expected input for a given texture type or based on an ingested texture's file name.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n    - **prim_paths**: A list of prim paths\n\n  - **Example:**\n```json\n{\n  \"prim_paths\": [\n    \"string\"\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_get_texture_material_inputs",
                    "name": "remix_get_texture_material_inputs",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_get_texture_material_inputs"
                    ]
                  },
                  {
                    "args": {
                      "queue_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "ID to describe which queue should be updated",
                        "title": "Queue Id"
                      }
                    },
                    "description": "Update the mass validation schema. Can be used to update the validation progress from an external process.\n\n\n**Query Parameters:**\n\n- **queue_id**: ID to describe which queue should be updated\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Update the mass validation schema. Can be used to update the validation progress from an external process.\n\n\n**Query Parameters:**\n\n- **queue_id**: ID to describe which queue should be updated\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Example:**\n```json\n\"string\"\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_update_ingestion_schema",
                    "name": "remix_update_ingestion_schema",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "remix_update_ingestion_schema"
                    ]
                  },
                  {
                    "args": {
                      "check_plugins": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": [
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true
                            },
                            "name": "ClearUnassignedMaterial",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "include_geom_subset": true,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllMeshes"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "context_name": "",
                              "cook_mass_template": false,
                              "default_material_mdl_name": "OmniPBR",
                              "default_material_mdl_url": "OmniPBR.mdl",
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true
                            },
                            "name": "DefaultMaterial",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "include_geom_subset": false,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllMeshes"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "ignore_not_convertable_shaders": false,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true,
                              "shader_subidentifiers": {
                                "AperturePBR_Opacity": ".*",
                                "AperturePBR_Translucent": "translucent|glass|trans"
                              }
                            },
                            "name": "MaterialShaders",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllMaterials"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "attributes": {
                                "inputs:emissive_intensity": [
                                  {
                                    "input_value": 10000,
                                    "operator": "=",
                                    "output_value": 1
                                  }
                                ]
                              },
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true
                            },
                            "name": "ValueMapping",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllShaders"
                              }
                            ]
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "conversion_args": {
                                "inputs:normalmap_texture": {
                                  "encoding_attr": "inputs:encoding",
                                  "replace_suffix": "_Normal",
                                  "suffix": "_OTH_Normal"
                                }
                              },
                              "cook_mass_template": false,
                              "data_flows": [
                                {
                                  "channel": "cleanup_files",
                                  "name": "InOutData",
                                  "push_input_data": true,
                                  "push_output_data": true
                                }
                              ],
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "replace_udim_textures_by_empty": true,
                              "save_on_fix_failure": true
                            },
                            "name": "ConvertToOctahedral",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllShaders"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "conversion_args": {
                                "inputs:diffuse_texture": {
                                  "args": [
                                    "--format",
                                    "bc7",
                                    "--mip-gamma-correct"
                                  ]
                                },
                                "inputs:emissive_mask_texture": {
                                  "args": [
                                    "--format",
                                    "bc7",
                                    "--mip-gamma-correct"
                                  ]
                                },
                                "inputs:height_texture": {
                                  "args": [
                                    "--format",
                                    "bc4",
                                    "--no-mip-gamma-correct",
                                    "--mip-filter",
                                    "max"
                                  ]
                                },
                                "inputs:metallic_texture": {
                                  "args": [
                                    "--format",
                                    "bc4",
                                    "--no-mip-gamma-correct"
                                  ]
                                },
                                "inputs:normalmap_texture": {
                                  "args": [
                                    "--format",
                                    "bc5",
                                    "--no-mip-gamma-correct"
                                  ]
                                },
                                "inputs:reflectionroughness_texture": {
                                  "args": [
                                    "--format",
                                    "bc4",
                                    "--no-mip-gamma-correct"
                                  ]
                                },
                                "inputs:transmittance_texture": {
                                  "args": [
                                    "--format",
                                    "bc7",
                                    "--mip-gamma-correct"
                                  ]
                                }
                              },
                              "cook_mass_template": false,
                              "data_flows": [
                                {
                                  "channel": "cleanup_files",
                                  "name": "InOutData",
                                  "push_input_data": true,
                                  "push_output_data": true
                                },
                                {
                                  "channel": "write_metadata",
                                  "name": "InOutData",
                                  "push_input_data": false,
                                  "push_output_data": true
                                }
                              ],
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "replace_udim_textures_by_empty": true,
                              "save_on_fix_failure": true,
                              "suffix": ".rtex.dds"
                            },
                            "name": "ConvertToDDS",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllShaders"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true
                            },
                            "name": "RelativeAssetPaths",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllPrims"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_dependency_between_round": true,
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_all_layers_on_exit": true
                              },
                              "name": "DependencyIterator"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true
                            },
                            "name": "RelativeReferences",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllPrims"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": true
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true,
                              "set_default_prim": true,
                              "wrap_prim_name": "XForms"
                            },
                            "name": "WrapRootPrims",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "Nothing"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": true
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": true,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true,
                              "scale_target": 1
                            },
                            "name": "ApplyUnitScale",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false,
                                  "select_session_layer_prims": false
                                },
                                "name": "RootPrims"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": true
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true,
                              "set_default_prim": true,
                              "wrap_prim_name": "ReferenceTarget"
                            },
                            "name": "WrapRootPrims",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "Nothing"
                              }
                            ],
                            "stop_if_fix_failed": true
                          }
                        ],
                        "title": "Check Plugins"
                      },
                      "context_plugin": {
                        "anyOf": [
                          {
                            "$ref": "#/$defs/AnonModel0"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": {
                          "data": {
                            "allow_empty_input_files_list": true,
                            "bake_material": false,
                            "baking_scales": false,
                            "channel": "Default",
                            "close_stage_on_exit": true,
                            "context_name": "ingestcraft",
                            "convert_fbx_to_y_up": false,
                            "convert_fbx_to_z_up": false,
                            "convert_stage_up_y": false,
                            "convert_stage_up_z": false,
                            "cook_mass_template": true,
                            "create_context_if_not_exist": true,
                            "create_output_directory_if_missing": true,
                            "create_world_as_default_root_prim": true,
                            "data_flows": [
                              {
                                "channel": "write_metadata",
                                "name": "InOutData",
                                "push_input_data": true,
                                "push_output_data": true
                              },
                              {
                                "channel": "ingestion_output",
                                "name": "InOutData",
                                "push_input_data": false,
                                "push_output_data": true
                              }
                            ],
                            "default_output_endpoint": "/stagecraft/assets/default-directory",
                            "disabling_instancing": false,
                            "embed_mdl_in_usd": true,
                            "embed_textures": true,
                            "export_hidden_props": false,
                            "export_mdl_gltf_extension": false,
                            "export_preview_surface": false,
                            "export_separate_gltf": false,
                            "expose_mass_queue_action_ui": true,
                            "expose_mass_ui": true,
                            "full_path_keep": false,
                            "global_progress_value": 0,
                            "hide_context_ui": true,
                            "ignore_animations": false,
                            "ignore_camera": false,
                            "ignore_flip_rotations": false,
                            "ignore_light": false,
                            "ignore_materials": false,
                            "ignore_pivots": false,
                            "ignore_unbound_bones": false,
                            "input_files": [],
                            "keep_all_materials": false,
                            "merge_all_meshes": false,
                            "output_directory": "",
                            "output_usd_extension": "usd",
                            "progress": [
                              0,
                              "Initializing",
                              true
                            ],
                            "single_mesh": false,
                            "smooth_normals": true,
                            "support_point_instancer": false,
                            "use_double_precision_to_usd_transform_op": false,
                            "use_meter_as_world_unit": false
                          },
                          "name": "AssetImporter"
                        }
                      },
                      "executor": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 1,
                        "title": "Executor"
                      },
                      "name": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "Model(s)",
                        "title": "Name"
                      },
                      "resultor_plugins": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": [
                          {
                            "data": {
                              "channel": "cleanup_files",
                              "cleanup_input": true,
                              "cleanup_output": false,
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ]
                            },
                            "name": "FileCleanup"
                          },
                          {
                            "data": {
                              "channel": "write_metadata",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ]
                            },
                            "name": "FileMetadataWritter"
                          }
                        ],
                        "title": "Resultor Plugins"
                      }
                    },
                    "description": "Add an item to the mass validation queue.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"completed_schemas\": [\n    {\n      \"key\": \"value\"\n    }\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Add an item to the mass validation queue.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"completed_schemas\": [\n    {\n      \"key\": \"value\"\n    }\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_ingest_model_asset",
                    "name": "remix_ingest_model_asset",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_ingest_model_asset"
                    ]
                  },
                  {
                    "args": {
                      "check_plugins": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": [
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": false
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "ignore_not_convertable_shaders": false,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true,
                              "shader_subidentifiers": {
                                "AperturePBR_Opacity": ".*"
                              }
                            },
                            "name": "MaterialShaders",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllMaterials"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": false
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "conversion_args": {
                                "inputs:normalmap_texture": {
                                  "encoding_attr": "inputs:encoding",
                                  "replace_suffix": "_Normal",
                                  "suffix": "_OTH_Normal"
                                }
                              },
                              "cook_mass_template": false,
                              "data_flows": [
                                {
                                  "channel": "cleanup_files_normal",
                                  "name": "InOutData",
                                  "push_input_data": true,
                                  "push_output_data": true
                                }
                              ],
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "replace_udim_textures_by_empty": false,
                              "save_on_fix_failure": true
                            },
                            "name": "ConvertToOctahedral",
                            "resultor_plugins": [
                              {
                                "data": {
                                  "channel": "cleanup_files_normal",
                                  "cleanup_input": true,
                                  "cleanup_output": false,
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ]
                                },
                                "name": "FileCleanup"
                              }
                            ],
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllShaders"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": false
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "conversion_args": {
                                "inputs:diffuse_texture": {
                                  "args": [
                                    "--format",
                                    "bc7",
                                    "--mip-gamma-correct"
                                  ]
                                },
                                "inputs:emissive_mask_texture": {
                                  "args": [
                                    "--format",
                                    "bc7",
                                    "--mip-gamma-correct"
                                  ]
                                },
                                "inputs:height_texture": {
                                  "args": [
                                    "--format",
                                    "bc4",
                                    "--no-mip-gamma-correct",
                                    "--mip-filter",
                                    "max"
                                  ]
                                },
                                "inputs:metallic_texture": {
                                  "args": [
                                    "--format",
                                    "bc4",
                                    "--no-mip-gamma-correct"
                                  ]
                                },
                                "inputs:normalmap_texture": {
                                  "args": [
                                    "--format",
                                    "bc5",
                                    "--no-mip-gamma-correct"
                                  ]
                                },
                                "inputs:reflectionroughness_texture": {
                                  "args": [
                                    "--format",
                                    "bc4",
                                    "--no-mip-gamma-correct"
                                  ]
                                },
                                "inputs:transmittance_texture": {
                                  "args": [
                                    "--format",
                                    "bc7",
                                    "--mip-gamma-correct"
                                  ]
                                }
                              },
                              "cook_mass_template": false,
                              "data_flows": [
                                {
                                  "channel": "cleanup_files",
                                  "name": "InOutData",
                                  "push_input_data": true,
                                  "push_output_data": true
                                },
                                {
                                  "channel": "write_metadata",
                                  "name": "InOutData",
                                  "push_input_data": false,
                                  "push_output_data": true
                                },
                                {
                                  "channel": "ingestion_output",
                                  "name": "InOutData",
                                  "push_input_data": false,
                                  "push_output_data": true
                                }
                              ],
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "replace_udim_textures_by_empty": false,
                              "save_on_fix_failure": true,
                              "suffix": ".rtex.dds"
                            },
                            "name": "ConvertToDDS",
                            "resultor_plugins": [
                              {
                                "data": {
                                  "channel": "cleanup_files",
                                  "cleanup_input": true,
                                  "cleanup_output": false,
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ]
                                },
                                "name": "FileCleanup"
                              }
                            ],
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "AllShaders"
                              }
                            ],
                            "stop_if_fix_failed": true
                          },
                          {
                            "context_plugin": {
                              "data": {
                                "channel": "Default",
                                "close_stage_on_exit": false,
                                "cook_mass_template": false,
                                "create_context_if_not_exist": false,
                                "expose_mass_queue_action_ui": false,
                                "expose_mass_ui": false,
                                "global_progress_value": 0,
                                "hide_context_ui": false,
                                "progress": [
                                  0,
                                  "Initializing",
                                  true
                                ],
                                "save_on_exit": false
                              },
                              "name": "CurrentStage"
                            },
                            "data": {
                              "channel": "Default",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": true,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ],
                              "save_on_fix_failure": true
                            },
                            "name": "MassTexturePreview",
                            "selector_plugins": [
                              {
                                "data": {
                                  "channel": "Default",
                                  "cook_mass_template": false,
                                  "expose_mass_queue_action_ui": false,
                                  "expose_mass_ui": false,
                                  "global_progress_value": 0,
                                  "progress": [
                                    0,
                                    "Initializing",
                                    true
                                  ],
                                  "select_from_root_layer_only": false
                                },
                                "name": "Nothing"
                              }
                            ],
                            "stop_if_fix_failed": true
                          }
                        ],
                        "title": "Check Plugins"
                      },
                      "context_plugin": {
                        "anyOf": [
                          {
                            "$ref": "#/$defs/AnonModel0"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": {
                          "data": {
                            "allow_empty_input_files_list": true,
                            "channel": "Default",
                            "context_name": "ingestcraft",
                            "cook_mass_template": true,
                            "create_context_if_not_exist": true,
                            "create_output_directory_if_missing": true,
                            "data_flows": [
                              {
                                "channel": "Default",
                                "name": "InOutData",
                                "push_input_data": true,
                                "push_output_data": false
                              }
                            ],
                            "default_output_endpoint": "/stagecraft/assets/default-directory",
                            "expose_mass_queue_action_ui": false,
                            "expose_mass_ui": true,
                            "global_progress_value": 0,
                            "hide_context_ui": true,
                            "input_files": [],
                            "output_directory": "",
                            "progress": [
                              0,
                              "Initializing",
                              true
                            ]
                          },
                          "name": "TextureImporter"
                        }
                      },
                      "executor": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 1,
                        "title": "Executor"
                      },
                      "name": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "Material(s)",
                        "title": "Name"
                      },
                      "resultor_plugins": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": [
                          {
                            "data": {
                              "channel": "write_metadata",
                              "cook_mass_template": false,
                              "expose_mass_queue_action_ui": false,
                              "expose_mass_ui": false,
                              "global_progress_value": 0,
                              "progress": [
                                0,
                                "Initializing",
                                true
                              ]
                            },
                            "name": "FileMetadataWritter"
                          }
                        ],
                        "title": "Resultor Plugins"
                      }
                    },
                    "description": "Add an item to the mass validation queue.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"completed_schemas\": [\n    {\n      \"key\": \"value\"\n    }\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_description": "Add an item to the mass validation queue.\n\n\n**Responses:**\n\n- **200** (Success): Successful Response\n  - Content-Type: `application/lightspeed.remix.service+json; version=1.0`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"completed_schemas\": [\n    {\n      \"key\": \"value\"\n    }\n  ]\n}\n```\n\n- **422**: Validation Error\n  - Content-Type: `application/json`\n\n  - **Response Properties:**\n\n  - **Example:**\n```json\n{\n  \"detail\": [\n    \"unknown_type\"\n  ]\n}\n```",
                    "display_name": "remix_ingest_material_asset",
                    "name": "remix_ingest_material_asset",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remix_ingest_material_asset"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "dragging": false,
        "id": "MCPTools-beHVJ",
        "measured": {
          "height": 455,
          "width": 320
        },
        "position": {
          "x": -350.67957241638305,
          "y": 418.18424520697226
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1262.8270031092698,
      "y": 533.860647282749,
      "zoom": 0.639257691715369
    }
  },
  "description": "Agent to integrate the NVIDIA RTX Remix Toolkit REST API and RTX Remix Documentation",
  "endpoint_name": null,
  "id": "faac3377-a15b-459b-a6bd-c47c318dcc78",
  "is_component": false,
  "last_tested_version": "1.4.2",
  "name": "NVIDIA RTX Remix",
  "tags": [
    "agents"
  ]
}