"""Add category column to variable table, to support models.

Revision ID: 50bdbf646c1c
Revises: 182e5471b900
Create Date: 2025-10-21 13:36:47.517609

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "50bdbf646c1c"
down_revision: str | None = "182e5471b900"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)  # type: ignore[arg-type]
    column_names = [column["name"] for column in inspector.get_columns("variable")]
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("variable", schema=None) as batch_op:
        if "category" not in column_names:
            batch_op.add_column(
                sa.Column(
                    "category",
                    sqlmodel.sql.sqltypes.AutoString(),
                    nullable=True,
                    server_default="Global",
                )
            )

    # Migrate existing model provider credentials to LLM category
    provider_keys = [
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "GOOGLE_API_KEY",
        "WATSONX_APIKEY",
        "OLLAMA_BASE_URL",
    ]
    
    for key in provider_keys:
        op.execute(
            sa.text(
                "UPDATE variable "
                "SET category = 'LLM' "
                "WHERE name = :key "
                "AND (category = 'Global' OR category IS NULL) "
                "AND type = 'Credential'"
            ).bindparams(key=key)
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # Revert model provider credentials back to Global category
    provider_keys = [
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "GOOGLE_API_KEY",
        "WATSONX_APIKEY",
        "OLLAMA_BASE_URL",
    ]
    
    for key in provider_keys:
        op.execute(
            sa.text(
                "UPDATE variable "
                "SET category = 'Global' "
                "WHERE name = :key "
                "AND category = 'LLM' "
                "AND type = 'Credential'"
            ).bindparams(key=key)
        )
    
    conn = op.get_bind()
    inspector = sa.inspect(conn)  # type: ignore[arg-type]
    column_names = [column["name"] for column in inspector.get_columns("variable")]
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("variable", schema=None) as batch_op:
        if "category" in column_names:
            batch_op.drop_column("category")

    # ### end Alembic commands ###
