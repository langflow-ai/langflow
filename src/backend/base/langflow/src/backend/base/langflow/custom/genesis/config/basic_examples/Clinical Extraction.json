{
  "data": {
    "nodes": [
      {
        "id": "BlobStorage-kUMrZ",
        "type": "genericNode",
        "position": {
          "x": 124.34565217391304,
          "y": 92.36739130434783
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "\"\"\"Blob Storage Component for loading files from Azure Blob Storage.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.services.manager import service_manager\nfrom loguru import logger\n\n\nclass BlobStorageComponent(Component):\n    display_name = \"Blob Storage\"\n    description = \"Load files from Azure Blob Storage\"\n    documentation = \"http://docs.langflow.org/components/storage\"\n    icon = \"Autonomize\"\n    name = \"BlobStorage\"\n\n    # Match the property name expected by FileComponent\n    FILE_PATH_FIELD = \"file_path\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._container_list: list[str] = []\n        self._file_list: list[str] = []\n\n    inputs = [\n        StrInput(\n            name=\"storage_account\",\n            display_name=\"Storage Account\",\n            required=False,\n            info=\"Storage Account name\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"container_name\",\n            display_name=\"Container\",\n            info=\"Select a container from the storage account\",\n            required=True,\n            refresh_button=True,\n        ),\n        DropdownInput(\n            name=\"file_name\",\n            display_name=\"File\",\n            info=\"Select a file from the container\",\n            required=True,\n            refresh_button=True,\n        ),\n        BoolInput(\n            name=\"return_all_files\",\n            display_name=\"Return All Files\",\n            info=\"If true and no specific file is selected, returns all files in the container\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"file_path\",  # Match the property name expected by FileComponent\n            display_name=\"File Path\",\n            method=\"get_file_paths\",\n        ),\n    ]\n\n    async def update_build_config(\n        self, build_config: dict, field_value: Any, field_name: str | None = None\n    ):\n        \"\"\"Update the build configuration based on field changes.\"\"\"\n        logger.info(f\"update_build_config called with field_name: {field_name}\")\n\n        storage_account = getattr(self, \"storage_account\", None)\n        container_name = getattr(self, \"container_name\", None)\n\n        if field_name == \"container_name\":\n            try:\n                # Load the container options when the field is refreshed\n                service = service_manager.get(\"flexstore_service\")\n                self._container_list = await service.get_containers(storage_account)\n\n                build_config[\"container_name\"][\"options\"] = self._container_list\n                return build_config\n\n            except Exception as e:\n                logger.exception(f\"Error updating container list: {e!s}\")\n                raise\n\n        elif field_name == \"file_name\" and container_name:\n            try:\n                # Load the file options when the field is refreshed\n                service = service_manager.get(\"flexstore_service\")\n                self._file_list = await service.get_files(\n                    storage_account, container_name\n                )\n\n                build_config[\"file_name\"][\"options\"] = self._file_list\n                return build_config\n\n            except Exception as e:\n                logger.exception(f\"Error updating file list: {e!s}\")\n                raise\n\n        return build_config\n\n    async def get_file_paths(self) -> list[Data]:\n        \"\"\"Get file paths for the FileComponent to process.\"\"\"\n        try:\n            if not self.container_name:\n                logger.warning(\"Container name is required.\")\n                return []\n\n            service = service_manager.get(\"flexstore_service\")\n            file_paths = []\n\n            # If a specific file is selected\n            if self.file_name:\n                signed_url = await service.get_signed_url(\n                    self.storage_account, self.container_name, self.file_name\n                )\n                if signed_url:\n                    file_paths = [Data(data={self.FILE_PATH_FIELD: signed_url})]\n            # If no specific file is selected and return_all_files is True\n            elif self.return_all_files:\n                files = await service.get_files(\n                    self.storage_account, self.container_name\n                )\n                for file in files:\n                    signed_url = await service.get_signed_url(\n                        self.storage_account, self.container_name, file\n                    )\n                    if signed_url:\n                        file_paths.append(Data(data={self.FILE_PATH_FIELD: signed_url}))\n\n            if file_paths:\n                self.status = file_paths\n                logger.info(f\"Generated {len(file_paths)} file paths\")\n                for path in file_paths:\n                    logger.debug(f\"File path: {path.data.get(self.FILE_PATH_FIELD)}\")\n            else:\n                logger.warning(\"No file paths generated\")\n\n            return file_paths\n\n        except Exception as e:\n            logger.error(f\"Error in get_file_paths: {e!s}\")\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "container_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "a-and-g-case-summary",
                  "a-and-g-case-summary-for-client",
                  "a-and-g-input",
                  "a-and-g-ocr-cache",
                  "a-and-g-ocr-post-processed-cache",
                  "a-and-g-page-images",
                  "aircare-dev-4002",
                  "aml-environment-image-build",
                  "ang-images",
                  "anywhere-200-files-input",
                  "anywhere-200-files-output",
                  "anywhere-input-docs-test",
                  "anywhere-output-docs-test",
                  "argo-flow-artifacts",
                  "athena-data",
                  "autonomize-mlflow-artifacts",
                  "azure-webjobs-hosts",
                  "azure-webjobs-secrets",
                  "azureml",
                  "azureml-blobstore-3894b54e-0ee2-4e07-9b73-c3b30dc36b53",
                  "azureml-environments",
                  "backup-of-aws-instance",
                  "benefit-accumulator-guidelines",
                  "benefit-check-eoc",
                  "benefit-eoc-guidelines",
                  "benefit-eoc-output",
                  "benefit-eoc-payload",
                  "carelon-guidelines-v2",
                  "claims-docs",
                  "claims-qnext-response",
                  "cllm-v2-data",
                  "cms",
                  "datavant-storage-container",
                  "etf-images",
                  "fax-images",
                  "fax-images-2",
                  "fax-insights",
                  "fax-ocr-cache",
                  "fax-processor-validation-datasets",
                  "genesis-container",
                  "genesis-correspondence-automation-copilot",
                  "genesis-cph-demo-v2",
                  "genesis-dev-test-3012",
                  "genesis-dev-v2",
                  "genesis-platform-3010",
                  "genesis-platform-anywhere-prod",
                  "genesis-platform-cigna-dev",
                  "genesis-platform-demo",
                  "genesis-platform-demo-v2",
                  "genesis-platform-dev",
                  "genesis-platform-molina-uat",
                  "genesis-platform-qa",
                  "genesis-platform-v2-lab",
                  "hedis-page-images",
                  "hedis-page-ocr",
                  "indexbackup",
                  "insights-logs-auditevent",
                  "insights-metrics-pt1m",
                  "issue-test-1",
                  "job-test",
                  "k-hub-container",
                  "knowledgehubembeddings",
                  "load-testing-files-hedis",
                  "mail-images",
                  "mlflow",
                  "mlflow-dev-v2",
                  "mlflow-mssql",
                  "mlflow-qa",
                  "mlflowmssql",
                  "mlserver-artifacts",
                  "mlworkspace-backup",
                  "modelcards",
                  "modelhub",
                  "modelhub-demo-v2",
                  "modelhub-v2-lab",
                  "models",
                  "molina-refactor-temporary",
                  "molina-refactor-test",
                  "mosaic-models",
                  "mosaic-provider-contracts",
                  "mosaic-provider-contracts-temp",
                  "mosaic-testing",
                  "ner-container",
                  "nestedcontainer",
                  "pcp-docs",
                  "pcp-extraction-docs",
                  "pcp-ocr-cache",
                  "pharmacy-auth",
                  "prior-auth",
                  "prior-authorization",
                  "projectx-files",
                  "projectx-temp-files",
                  "revisions",
                  "snapshots",
                  "snapshotzips",
                  "spog-output",
                  "spog-qnext",
                  "string",
                  "temp-directory-genesis-studio",
                  "temp-studio",
                  "temp-studio-v2",
                  "temporal-poc",
                  "test-cms",
                  "test-storage-container",
                  "test1",
                  "tester-fax",
                  "umk2dev",
                  "weaviate-backups"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "toggle": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "container_name",
                "value": "genesis-container",
                "display_name": "Container",
                "advanced": false,
                "dynamic": false,
                "info": "Select a container from the storage account",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "file_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "0108_Subject199.pdf",
                  "2222222_Subject2.pdf",
                  "457889_Jane_foster.pdf",
                  "93451_Matt_Damon.pdf",
                  "PriorAuthSample1 (1).pdf",
                  "PriorAuthSample3 (1).pdf",
                  "PriorAuthSample5_1 (1).pdf",
                  "pre-authorization-sample.pdf",
                  "prior_auth.png"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "toggle": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "file_name",
                "value": "0108_Subject199.pdf",
                "display_name": "File",
                "advanced": false,
                "dynamic": false,
                "info": "Select a file from the container",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "return_all_files": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "return_all_files",
                "value": true,
                "display_name": "Return All Files",
                "advanced": false,
                "dynamic": false,
                "info": "If true and no specific file is selected, returns all files in the container",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "storage_account": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "storage_account",
                "value": "",
                "display_name": "Storage Account",
                "advanced": true,
                "dynamic": false,
                "info": "Storage Account name",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Load files from Azure Blob Storage",
            "icon": "Autonomize",
            "base_classes": [
              "Data"
            ],
            "display_name": "Blob Storage",
            "documentation": "http://docs.langflow.org/components/storage",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "file_path",
                "hidden": null,
                "display_name": "File Path",
                "method": "get_file_paths",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "options": null,
                "tool_mode": true
              }
            ],
            "field_order": [
              "storage_account",
              "container_name",
              "file_name",
              "return_all_files"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "inputs",
            "key": "BlobStorage",
            "score": 0.007568328950209746,
            "lf_version": "1.4.3"
          },
          "showNode": true,
          "type": "BlobStorage",
          "id": "BlobStorage-kUMrZ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 367
        },
        "dragging": false
      },
      {
        "id": "ClinicalLLM-mCYk2",
        "type": "genericNode",
        "position": {
          "x": 1696.7955134725305,
          "y": 495.2448343201257
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import logging\n\nfrom langflow.inputs.input_mixin import FieldTypes\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema import Data\nfrom pydantic import BaseModel\n\nfrom app.base.modelhub import ATModelComponent\nfrom app.services.modelhub.model_endpoint import ModelEndpoint\n\nlogger = logging.getLogger(__name__)\n\n\nclass Trait(BaseModel):\n    Name: str\n    Score: float\n\n\nclass Attribute(BaseModel):\n    Id: int\n    BeginOffset: int\n    EndOffset: int\n    Text: str\n    Score: float\n    Category: str\n    Type: str\n    Traits: list[Trait]\n\n\nclass Entity(BaseModel):\n    Category: str\n    Type: str\n    Text: str\n    BeginOffset: int\n    EndOffset: int\n    Score: float\n    Traits: list[Trait]\n    Id: int\n    Attributes: list[Attribute] | None = None\n\n\nclass ClinicalPrediction(BaseModel):\n    prediction: list[Entity]\n\n\nclass ClinicalLLMComponent(ATModelComponent):\n    \"\"\"Component for the Clinical LLM model\"\"\"\n\n    display_name: str = \"Clinical LLM\"\n    description: str = \"Extract clinical entities from text using Clinical LLM.\"\n    documentation: str = \"https://docs.example.com/clinical-llm\"\n    icon: str = \"Autonomize\"\n    name: str = \"ClinicalLLM\"\n    _model_name = ModelEndpoint.CLINICAL_LLM\n\n    inputs = [\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search query\",\n            field_type=FieldTypes.TEXT,\n            multiline=True,\n        )\n    ]\n\n    outputs = [\n        Output(\n            name=\"prediction\", display_name=\"Clinical Entities\", method=\"build_output\"\n        ),\n    ]\n\n    async def extract_entities(self, text) -> ClinicalPrediction:\n        \"\"\"Extract clinical entities from the input text\"\"\"\n        # Handle the case where input is a JSON string\n        if isinstance(text, str) and text.strip().startswith(\"{\"):\n            try:\n                import json\n\n                text_dict = json.loads(text)\n                text = text_dict\n            except json.JSONDecodeError as e:\n                logger.error(f\"Failed to parse JSON string: {e}\")\n                # If JSON parsing fails, use the original text\n\n        # Handle the case where input is a dictionary with result structure\n        if isinstance(text, dict) and \"result\" in text:\n            result = text[\"result\"]\n            if isinstance(result, list) and len(result) > 0:\n                # Extract text from the first result item\n                first_result = result[0]\n                if isinstance(first_result, dict) and \"text\" in first_result:\n                    extracted_text = first_result[\"text\"]\n                    text = extracted_text\n                else:\n                    raise ValueError(\"First result item does not contain 'text' key\")\n            else:\n                raise ValueError(\"Result list is empty or not a list\")\n        elif isinstance(text, dict) and \"text\" in text:\n            text = text[\"text\"]\n        elif hasattr(text, \"text\"):\n            text = text.text\n\n        try:\n            response = await self.predict(text=text)\n            return ClinicalPrediction(**response)\n        except Exception as e:\n            msg = f\"Error extracting clinical entities: {e!s}\"\n            logger.error(f\"API call failed: {msg}\")\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> Data:\n        \"\"\"Generate the output based on selected knowledgehub hubs.\"\"\"\n        query_results = await self.extract_entities(self.search_query)\n        data = Data(value={\"data\": query_results})\n        self.status = data\n        return data\n\n    def build(self):\n        \"\"\"Return the main build function for Langflow framework.\"\"\"\n        return self.build_output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "search_query": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "copy_field": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Extract clinical entities from text using Clinical LLM.",
            "icon": "Autonomize",
            "base_classes": [
              "Data"
            ],
            "display_name": "Clinical LLM",
            "documentation": "https://docs.example.com/clinical-llm",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "prediction",
                "display_name": "Clinical Entities",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "search_query"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "autonomize_models",
            "key": "ClinicalLLM",
            "score": 0.18224241177399383
          },
          "showNode": true,
          "type": "ClinicalLLM",
          "id": "ClinicalLLM-mCYk2"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 254
        },
        "dragging": false
      },
      {
        "id": "azure_ocr-vkDRw",
        "type": "genericNode",
        "position": {
          "x": 855.8865587971402,
          "y": 453.6298860512069
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "file_path": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "file_path",
                "value": "",
                "display_name": "Server File Path",
                "advanced": true,
                "input_types": [
                  "Data",
                  "Message"
                ],
                "dynamic": false,
                "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "url": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "",
                "display_name": "URL",
                "advanced": false,
                "input_types": [
                  "str",
                  "Data",
                  "Message",
                  "list"
                ],
                "dynamic": false,
                "info": "URL to the document to process",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "\"\"\"Form Recognizer Component for processing and analyzing form data.\"\"\"\n\nimport asyncio\nimport concurrent.futures\nimport mimetypes\nimport os\nimport tempfile\nfrom pathlib import Path\nfrom urllib.parse import unquote, urlparse\n\nimport aiohttp\nimport requests\nfrom langflow.base.data import BaseFileComponent\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, Output\nfrom langflow.schema import Data\nfrom loguru import logger\n\n\nclass FormRecognizerComponent(BaseFileComponent):\n    \"\"\"Component for recognizing and processing form data.\"\"\"\n\n    display_name = \"Form Recognizer\"\n    description = \"Process documents using Azure Form Recognizer OCR capabilities\"\n    icon = \"Azure\"\n    name = \"azure_ocr\"\n    # legacy = True\n\n    VALID_EXTENSIONS = [\"pdf\", \"jpg\", \"jpeg\", \"png\", \"bmp\", \"tiff\", \"tif\"]\n\n    inputs = [\n        HandleInput(\n            name=\"url\",\n            display_name=\"URL\",\n            info=\"URL to the document to process\",\n            input_types=[\"str\", \"Data\", \"Message\", \"list\"],\n            required=False,\n        ),\n        # Include only the HandleInput and BoolInputs from base_inputs\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"file_path\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"silent_errors\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"delete_server_file_after_processing\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"ignore_unsupported_extensions\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"ignore_unspecified_files\"\n        ),\n        DropdownInput(\n            name=\"model_type\",\n            display_name=\"Model Type\",\n            options=[\"prebuilt-document\", \"prebuilt-read\", \"prebuilt-layout\"],\n            value=\"prebuilt-document\",\n            info=\"Choose the Form Recognizer model to use\",\n        ),\n        BoolInput(\n            name=\"extract_tables\",\n            display_name=\"Extract Tables\",\n            value=True,\n            info=\"Extract and format tables from the document\",\n        ),\n        BoolInput(\n            name=\"include_confidence\",\n            display_name=\"Include Confidence Scores\",\n            value=False,\n            advanced=True,\n            info=\"Include confidence scores in the extracted text\",\n        ),\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"Use Concurrent Processing\",\n            value=True,\n            info=\"Enable concurrent processing of multiple files\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"Number of files to process concurrently\",\n            value=2,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Structured Data\", name=\"structured_data\", method=\"load_files\"\n        ),\n    ]\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.temp_dir = tempfile.mkdtemp()\n        self._downloaded_files = {}\n        self._text_content = \"\"\n\n    def get_text_content(self) -> str:\n        \"\"\"Return the concatenated text content from all processed pages.\"\"\"\n        return self._text_content\n\n    def _extract_filename_from_url(self, url: str) -> str:\n        \"\"\"Extract filename from URL or generate a default one.\"\"\"\n        try:\n            logger.debug(f\"Extracting filename from URL: {url}\")\n            parsed_url = urlparse(url)\n            path = unquote(parsed_url.path)\n            filename = os.path.basename(path)\n\n            if filename and \".\" in filename:\n                logger.debug(f\"Found filename in URL path: {filename}\")\n                return filename\n\n            response = requests.head(url, allow_redirects=True)\n            if \"content-disposition\" in response.headers:\n                content_disp = response.headers[\"content-disposition\"]\n                if \"filename=\" in content_disp:\n                    filename = content_disp.split(\"filename=\")[1].strip(\"\\\"'\")\n                    logger.debug(f\"Found filename in content-disposition: {filename}\")\n                    return filename\n\n            if \"content-type\" in response.headers:\n                ext = mimetypes.guess_extension(response.headers[\"content-type\"])\n                if ext:\n                    filename = f\"downloaded{ext}\"\n                    logger.debug(f\"Generated filename from content-type: {filename}\")\n                    return filename\n\n            logger.debug(\"Using default filename: downloaded.pdf\")\n            return \"downloaded.pdf\"\n        except Exception as e:\n            logger.error(f\"Error extracting filename from URL: {e!s}\")\n            return \"downloaded.pdf\"\n\n    async def _download_file_from_url(self, url: str) -> str | None:\n        \"\"\"Download a file from a URL.\"\"\"\n        try:\n            logger.debug(f\"Attempting to download file from URL: {url}\")\n            filename = self._extract_filename_from_url(url)\n            local_path = os.path.join(self.temp_dir, filename)\n            logger.debug(f\"Local path for download: {local_path}\")\n\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url) as response:\n                    response.raise_for_status()\n                    with open(local_path, \"wb\") as f:\n                        while True:\n                            chunk = await response.content.read(8192)\n                            if not chunk:\n                                break\n                            f.write(chunk)\n\n            self._downloaded_files[url] = local_path\n            logger.info(f\"Successfully downloaded file to {local_path}\")\n            return local_path\n\n        except Exception as e:\n            logger.error(f\"Error downloading file from URL: {e!s}\")\n            if not self.silent_errors:\n                raise\n            return None\n\n    def _extract_url_from_input(self, input_data) -> str | None:\n        \"\"\"Extract URL string from various input types.\"\"\"\n        logger.debug(f\"Extracting URL from input data type: {type(input_data)}\")\n\n        # Handle list of Data objects (from blob storage)\n        if isinstance(input_data, list):\n            logger.debug(f\"Processing list input with {len(input_data)} items\")\n            if input_data and isinstance(input_data[0], Data):\n                url = input_data[0].data.get(\"file_path\")\n                logger.debug(f\"Extracted URL from first Data object in list: {url}\")\n                return url\n            return None\n\n        if isinstance(input_data, str):\n            logger.debug(f\"Input is string: {input_data}\")\n            return input_data\n        elif isinstance(input_data, Data):\n            url = (\n                input_data.data.get(\"file_path\")\n                or input_data.data.get(\"url\")\n                or input_data.text\n            )\n            logger.debug(f\"Extracted URL from Data object: {url}\")\n            return url\n        elif hasattr(input_data, \"text\"):\n            logger.debug(f\"Extracted URL from text attribute: {input_data.text}\")\n            return input_data.text\n        elif hasattr(input_data, \"data\"):\n            url = (\n                input_data.data.get(\"file_path\")\n                or input_data.data.get(\"url\")\n                or input_data.text\n            )\n            logger.debug(f\"Extracted URL from data attribute: {url}\")\n            return url\n        logger.debug(\"No URL found in input data\")\n        return None\n\n    def _validate_and_resolve_paths(self) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Handle URLs and local paths.\"\"\"\n        resolved_files = []\n        logger.debug(\"Starting path validation and resolution\")\n\n        # Handle URL input if provided\n        if hasattr(self, \"url\") and self.url:\n            try:\n                logger.debug(f\"Processing URL input: {self.url}\")\n                # Extract URL from different input types\n                url = self._extract_url_from_input(self.url)\n                if not url:\n                    logger.warning(\"No valid URL found in input\")\n                    return resolved_files\n\n                # Create event loop for async download\n                loop = asyncio.new_event_loop()\n                asyncio.set_event_loop(loop)\n                try:\n                    local_path = loop.run_until_complete(\n                        self._download_file_from_url(url)\n                    )\n                finally:\n                    loop.close()\n\n                if local_path:\n                    # Create a new Data object with both the original URL and local path\n                    new_data = Data(\n                        data={\n                            self.SERVER_FILE_PATH_FIELDNAME: local_path,\n                            \"original_url\": url,\n                        }\n                    )\n                    logger.debug(\n                        f\"Created new Data object with local path: {local_path}\"\n                    )\n\n                    resolved_files.append(\n                        BaseFileComponent.BaseFile(\n                            new_data,\n                            Path(local_path),\n                            delete_after_processing=self.delete_server_file_after_processing,\n                        )\n                    )\n            except Exception as e:\n                logger.error(f\"Error processing URL {url}: {e!s}\")\n                if not self.silent_errors:\n                    raise\n\n        # Handle file_path input\n        file_path = self._file_path_as_list()\n        logger.debug(f\"Processing file_path input: {file_path}\")\n        for obj in file_path:\n            server_file_path = obj.data.get(self.SERVER_FILE_PATH_FIELDNAME)\n            logger.debug(f\"Processing server file path: {server_file_path}\")\n\n            if not server_file_path:\n                if not self.ignore_unspecified_files:\n                    msg = f\"Data object missing '{self.SERVER_FILE_PATH_FIELDNAME}' property.\"\n                    if not self.silent_errors:\n                        raise ValueError(msg)\n                continue\n\n            try:\n                # Check if it's a URL\n                if isinstance(server_file_path, str) and server_file_path.startswith(\n                    (\"http://\", \"https://\")\n                ):\n                    logger.debug(f\"Processing URL from file_path: {server_file_path}\")\n                    # Create event loop for async download\n                    loop = asyncio.new_event_loop()\n                    asyncio.set_event_loop(loop)\n                    try:\n                        local_path = loop.run_until_complete(\n                            self._download_file_from_url(server_file_path)\n                        )\n                    finally:\n                        loop.close()\n\n                    if not local_path:\n                        continue\n\n                    # Create a new Data object with both the original URL and local path\n                    new_data = Data(\n                        data={\n                            self.SERVER_FILE_PATH_FIELDNAME: local_path,\n                            \"original_url\": server_file_path,\n                        }\n                    )\n                    logger.debug(\n                        f\"Created new Data object with local path: {local_path}\"\n                    )\n\n                    resolved_files.append(\n                        BaseFileComponent.BaseFile(\n                            new_data,\n                            Path(local_path),\n                            delete_after_processing=self.delete_server_file_after_processing,\n                        )\n                    )\n                else:\n                    # Handle local files\n                    resolved_path = Path(self.resolve_path(str(server_file_path)))\n                    logger.debug(f\"Resolved local file path: {resolved_path}\")\n                    if not resolved_path.exists():\n                        msg = f\"File not found: {server_file_path}\"\n                        if not self.silent_errors:\n                            raise ValueError(msg)\n                        continue\n\n                    resolved_files.append(\n                        BaseFileComponent.BaseFile(\n                            obj,\n                            resolved_path,\n                            delete_after_processing=self.delete_server_file_after_processing,\n                        )\n                    )\n\n            except Exception as e:\n                logger.error(f\"Error processing path {server_file_path}: {e!s}\")\n                if not self.silent_errors:\n                    raise\n                continue\n\n        logger.debug(f\"Resolved {len(resolved_files)} files\")\n        return resolved_files\n\n    async def process_file(\n        self, file_path: str, *, silent_errors: bool = False\n    ) -> tuple[Data, str]:\n        \"\"\"Process a single file using the OCR service.\"\"\"\n        try:\n            from langflow.services.manager import service_manager\n\n            ocr_service = service_manager.get(\"ocr_service\")\n\n            with open(file_path, \"rb\") as file:\n                file_content = file.read()\n\n            extracted_content, plain_text = await ocr_service.process_document(\n                file_content=file_content,\n                model_type=self.model_type,\n                include_confidence=self.include_confidence,\n                extract_tables=self.extract_tables,\n            )\n\n            structured_data = Data(\n                text=plain_text,\n                data={\n                    self.SERVER_FILE_PATH_FIELDNAME: str(file_path),\n                    \"result\": extracted_content,\n                },\n            )\n\n            return structured_data, plain_text\n\n        except Exception as e:\n            logger.error(f\"Error processing file {file_path}: {e!s}\")\n            if not silent_errors:\n                raise\n            return None, \"\"\n\n    def process_files(\n        self, file_list: list[BaseFileComponent.BaseFile]\n    ) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Process multiple files with concurrent processing.\"\"\"\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = (\n            1\n            if not self.use_multithreading\n            else max(1, self.concurrency_multithreading)\n        )\n        file_count = len(file_list)\n\n        logger.info(f\"Processing {file_count} files with concurrency: {concurrency}\")\n\n        all_plain_text = []\n        processed_data = []\n\n        if concurrency > 1 and file_count > 1:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            try:\n                with concurrent.futures.ThreadPoolExecutor(\n                    max_workers=concurrency\n                ) as executor:\n                    future_to_file = {\n                        executor.submit(\n                            lambda path: loop.run_until_complete(\n                                self.process_file(\n                                    str(path), silent_errors=self.silent_errors\n                                )\n                            ),\n                            file.path,\n                        ): file\n                        for file in file_list\n                    }\n                    for future in concurrent.futures.as_completed(future_to_file):\n                        try:\n                            structured_data, plain_text = future.result()\n                            processed_data.append(structured_data)\n                            all_plain_text.append(plain_text)\n                        except Exception as e:\n                            logger.error(f\"Error in concurrent processing: {e!s}\")\n                            if not self.silent_errors:\n                                raise\n                            processed_data.append(None)\n                            all_plain_text.append(\"\")\n            finally:\n                loop.close()\n        else:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            try:\n                for file in file_list:\n                    try:\n                        structured_data, plain_text = loop.run_until_complete(\n                            self.process_file(\n                                str(file.path), silent_errors=self.silent_errors\n                            )\n                        )\n                        processed_data.append(structured_data)\n                        all_plain_text.append(plain_text)\n                    except Exception as e:\n                        logger.error(f\"Error processing file {file.path}: {e!s}\")\n                        if not self.silent_errors:\n                            raise\n                        processed_data.append(None)\n                        all_plain_text.append(\"\")\n            finally:\n                loop.close()\n\n        # Store concatenated text content\n        self._text_content = \"\\n\\n=== NEW DOCUMENT ===\\n\\n\".join(all_plain_text)\n\n        return self.rollup_data(file_list, processed_data)\n\n    def __del__(self):\n        \"\"\"Cleanup temporary files and directory.\"\"\"\n        try:\n            if hasattr(self, \"temp_dir\") and os.path.exists(self.temp_dir):\n                # Remove downloaded files\n                for file_path in self._downloaded_files.values():\n                    if os.path.exists(file_path):\n                        os.unlink(file_path)\n                # Remove the temporary directory\n                os.rmdir(self.temp_dir)\n        except Exception as e:\n            logger.error(f\"Error cleaning up temporary files: {e!s}\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "concurrency_multithreading": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "concurrency_multithreading",
                "value": 2,
                "display_name": "Processing Concurrency",
                "advanced": true,
                "dynamic": false,
                "info": "Number of files to process concurrently",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "delete_server_file_after_processing": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "delete_server_file_after_processing",
                "value": true,
                "display_name": "Delete Server File After Processing",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the Server File Path will be deleted after processing.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "extract_tables": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "extract_tables",
                "value": true,
                "display_name": "Extract Tables",
                "advanced": false,
                "dynamic": false,
                "info": "Extract and format tables from the document",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "ignore_unspecified_files": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ignore_unspecified_files",
                "value": false,
                "display_name": "Ignore Unspecified Files",
                "advanced": true,
                "dynamic": false,
                "info": "If true, Data with no 'file_path' property will be ignored.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "ignore_unsupported_extensions": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ignore_unsupported_extensions",
                "value": true,
                "display_name": "Ignore Unsupported Extensions",
                "advanced": true,
                "dynamic": false,
                "info": "If true, files with unsupported extensions will not be processed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "include_confidence": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "include_confidence",
                "value": false,
                "display_name": "Include Confidence Scores",
                "advanced": true,
                "dynamic": false,
                "info": "Include confidence scores in the extracted text",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "model_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "prebuilt-document",
                  "prebuilt-read",
                  "prebuilt-layout"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "toggle": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_type",
                "value": "prebuilt-document",
                "display_name": "Model Type",
                "advanced": false,
                "dynamic": false,
                "info": "Choose the Form Recognizer model to use",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "silent_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "use_multithreading": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "use_multithreading",
                "value": true,
                "display_name": "Use Concurrent Processing",
                "advanced": false,
                "dynamic": false,
                "info": "Enable concurrent processing of multiple files",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Process documents using Azure Form Recognizer OCR capabilities",
            "icon": "Azure",
            "base_classes": [
              "Data"
            ],
            "display_name": "Form Recognizer",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_data",
                "display_name": "Structured Data",
                "method": "load_files",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "file_path",
              "silent_errors",
              "delete_server_file_after_processing",
              "ignore_unsupported_extensions",
              "ignore_unspecified_files",
              "model_type",
              "extract_tables",
              "include_confidence",
              "use_multithreading",
              "concurrency_multithreading"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "models",
            "key": "azure_ocr",
            "score": 0.007568328950209746,
            "lf_version": "1.4.3"
          },
          "showNode": true,
          "type": "azure_ocr",
          "id": "azure_ocr-vkDRw"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 395
        },
        "dragging": false
      },
      {
        "id": "JSONOutput-Vjdlt",
        "type": "genericNode",
        "position": {
          "x": 2214.8298695097587,
          "y": 630.1346666400685
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to JSON.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.inputs import DataInput\nfrom langflow.io import BoolInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass JSONOutputComponent(TextComponent):\n    display_name = \"JSON Output\"\n    description = \"Display input data as JSON in the Playground.\"\n    icon = \"Braces\"\n    name = \"JSONOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to JSON.\",\n            is_list=True,\n        ),\n        BoolInput(\n            name=\"pretty_print\",\n            display_name=\"Pretty Print\",\n            info=\"Format JSON with proper indentation\",\n            value=True,\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"JSON\", name=\"json\", method=\"json_response\"),\n    ]\n\n    def _process_data(self, data: Data | list[Data]) -> dict | list:\n        \"\"\"Convert Data object(s) to dictionary/list format.\"\"\"\n        if isinstance(data, list):\n            return [item.dict() for item in data]\n        return data.dict()\n\n    def json_response(self) -> Message:\n        try:\n            # Process the Data input\n            processed_data = self._process_data(self.data)\n\n            # Convert to JSON string with optional pretty printing\n            if self.pretty_print:\n                formatted_json = json.dumps(\n                    processed_data, indent=2, ensure_ascii=False\n                )\n            else:\n                formatted_json = json.dumps(processed_data, ensure_ascii=False)\n\n            message = Message(text=formatted_json)\n            self.status = formatted_json\n            return message\n\n        except Exception as e:\n            error_message = f\"Error processing data to JSON: {e!s}\"\n            message = Message(text=error_message)\n            self.status = error_message\n            return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pretty_print": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "pretty_print",
                "value": true,
                "display_name": "Pretty Print",
                "advanced": true,
                "dynamic": false,
                "info": "Format JSON with proper indentation",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display input data as JSON in the Playground.",
            "icon": "Braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "JSON Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "json",
                "display_name": "JSON",
                "method": "json_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "pretty_print"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "outputs",
            "key": "JSONOutput",
            "score": 0.007568328950209746
          },
          "showNode": true,
          "type": "JSONOutput",
          "id": "JSONOutput-Vjdlt"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 196
        },
        "dragging": false
      },
      {
        "id": "ParseData-lMDVb",
        "type": "genericNode",
        "position": {
          "x": 1301.383430151301,
          "y": 336.48206670672533
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text. Should be a list of dicts.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict, List\n\nfrom langflow.custom import Component\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert a list of dicts (data) into plain text using a template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text. Should be a list of dicts.\",\n            is_list=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. Use {key} for keys in the data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of dicts, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n        Output(\n            display_name=\"Data Object List\",\n            name=\"data_object_list\",\n            info=\"Data as a list of Data objects, each having `text` formatted by Template (for compatibility)\",\n            method=\"parse_data_as_data_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[List[Dict[str, Any]], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = self.data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> List[Dict[str, Any]]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = self.data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item[\"text\"] = text\n        self.status = data_list\n        return data_list\n\n    def parse_data_as_data_list(self) -> List[\"Data\"]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = self.data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item[\"text\"] = text\n        self.status = data_list\n        return [Data(value=item) for item in data_list]\n\n    @staticmethod\n    def data_to_text(template: str, data: List[Dict[str, Any]], sep: str) -> str:\n        formatted = []\n        for item in data:\n            try:\n                formatted.append(template.format(**item))\n            except Exception:\n                formatted.append(str(item))\n        return sep.join(formatted)\n\n    @staticmethod\n    def data_to_text_list(template: str, data: List[Dict[str, Any]]):\n        text_list = []\n        data_list = []\n        for item in data:\n            try:\n                text = template.format(**item)\n            except Exception:\n                text = str(item)\n            text_list.append(text)\n            data_list.append(dict(item))\n        return text_list, data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. Use {key} for keys in the data.",
                "title_case": false,
                "copy_field": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert a list of dicts (data) into plain text using a template.",
            "icon": "braces",
            "base_classes": [
              "Data",
              "Dict",
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Dict"
                ],
                "selected": "Dict",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_object_list",
                "display_name": "Data Object List",
                "method": "parse_data_as_data_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "utils",
            "key": "ParseData",
            "score": 0.007568328950209746
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-lMDVb"
        },
        "selected": true,
        "measured": {
          "width": 320,
          "height": 398
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "BlobStorage-kUMrZ",
        "sourceHandle": "{œdataTypeœ:œBlobStorageœ,œidœ:œBlobStorage-kUMrZœ,œnameœ:œfile_pathœ,œoutput_typesœ:[œDataœ]}",
        "target": "azure_ocr-vkDRw",
        "targetHandle": "{œfieldNameœ:œurlœ,œidœ:œazure_ocr-vkDRwœ,œinputTypesœ:[œstrœ,œDataœ,œMessageœ,œlistœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "url",
            "id": "azure_ocr-vkDRw",
            "inputTypes": [
              "str",
              "Data",
              "Message",
              "list"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "BlobStorage",
            "id": "BlobStorage-kUMrZ",
            "name": "file_path",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__BlobStorage-kUMrZ{œdataTypeœ:œBlobStorageœ,œidœ:œBlobStorage-kUMrZœ,œnameœ:œfile_pathœ,œoutput_typesœ:[œDataœ]}-azure_ocr-vkDRw{œfieldNameœ:œurlœ,œidœ:œazure_ocr-vkDRwœ,œinputTypesœ:[œstrœ,œDataœ,œMessageœ,œlistœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ClinicalLLM-mCYk2",
        "sourceHandle": "{œdataTypeœ:œClinicalLLMœ,œidœ:œClinicalLLM-mCYk2œ,œnameœ:œpredictionœ,œoutput_typesœ:[œDataœ]}",
        "target": "JSONOutput-Vjdlt",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œJSONOutput-Vjdltœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "JSONOutput-Vjdlt",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ClinicalLLM",
            "id": "ClinicalLLM-mCYk2",
            "name": "prediction",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__ClinicalLLM-mCYk2{œdataTypeœ:œClinicalLLMœ,œidœ:œClinicalLLM-mCYk2œ,œnameœ:œpredictionœ,œoutput_typesœ:[œDataœ]}-JSONOutput-Vjdlt{œfieldNameœ:œdataœ,œidœ:œJSONOutput-Vjdltœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "azure_ocr-vkDRw",
        "sourceHandle": "{œdataTypeœ:œazure_ocrœ,œidœ:œazure_ocr-vkDRwœ,œnameœ:œstructured_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-lMDVb",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-lMDVbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-lMDVb",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "azure_ocr",
            "id": "azure_ocr-vkDRw",
            "name": "structured_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__azure_ocr-vkDRw{œdataTypeœ:œazure_ocrœ,œidœ:œazure_ocr-vkDRwœ,œnameœ:œstructured_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-lMDVb{œfieldNameœ:œdataœ,œidœ:œParseData-lMDVbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "source": "ParseData-lMDVb",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-lMDVbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ClinicalLLM-mCYk2",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œClinicalLLM-mCYk2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query",
            "id": "ClinicalLLM-mCYk2",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-lMDVb",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-lMDVb{œdataTypeœ:œParseDataœ,œidœ:œParseData-lMDVbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ClinicalLLM-mCYk2{œfieldNameœ:œsearch_queryœ,œidœ:œClinicalLLM-mCYk2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 11.937430545723942,
      "y": 192.0639656020544,
      "zoom": 0.3991356522510006
    }
  },
  "description": "Integrates PDF reading with a language model to answer document-specific questions. Ideal for small-scale texts, it facilitates direct queries with immediate insights.",
  "name": "Clinical Extraction",
  "last_tested_version": "1.4.3",
  "endpoint_name": null,
  "is_component": false
}
