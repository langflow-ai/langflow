{
    "data": {
      "nodes": [
        {
          "id": "AzureOpenAIModel-Pk4b0",
          "type": "genericNode",
          "position": {
            "x": 2897.465476862704,
            "y": -486.1431963595753
          },
          "data": {
            "id": "AzureOpenAIModel-Pk4b0",
            "node": {
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Generate text using Azure OpenAI LLMs.",
              "display_name": "Azure OpenAI",
              "documentation": "https://python.langchain.com/docs/integrations/llms/azure_openai",
              "edited": false,
              "field_order": [
                "input_value",
                "system_prompt_template",
                "system_message",
                "stream",
                "azure_endpoint",
                "azure_deployment",
                "api_key",
                "api_version",
                "temperature",
                "max_tokens"
              ],
              "frozen": false,
              "icon": "Azure",
              "legacy": false,
              "lf_version": "1.1.1",
              "metadata": {},
              "minimized": false,
              "output_types": [],
              "outputs": [
                {
                  "allows_loop": false,
                  "cache": true,
                  "display_name": "Message",
                  "method": "text_response",
                  "name": "text_output",
                  "required_inputs": [],
                  "selected": "Message",
                  "tool_mode": true,
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                },
                {
                  "allows_loop": false,
                  "cache": true,
                  "display_name": "Language Model",
                  "method": "build_model",
                  "name": "model_output",
                  "required_inputs": [
                    "api_key",
                    "azure_deployment",
                    "azure_endpoint"
                  ],
                  "selected": "LanguageModel",
                  "tool_mode": true,
                  "types": [
                    "LanguageModel"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "api_key": {
                  "_input_type": "SecretStrInput",
                  "advanced": false,
                  "display_name": "API Key",
                  "dynamic": false,
                  "info": "",
                  "input_types": [],
                  "load_from_db": false,
                  "name": "api_key",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "api_version": {
                  "_input_type": "DropdownInput",
                  "advanced": false,
                  "combobox": false,
                  "display_name": "API Version",
                  "dynamic": false,
                  "info": "",
                  "name": "api_version",
                  "options": [
                    "2025-02-01-preview",
                    "2025-01-01-preview",
                    "2024-12-01-preview",
                    "2024-10-01-preview",
                    "2024-09-01-preview",
                    "2024-08-01-preview",
                    "2024-07-01-preview",
                    "2024-06-01",
                    "2024-03-01-preview",
                    "2024-02-15-preview",
                    "2023-12-01-preview",
                    "2023-05-15"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "2024-06-01"
                },
                "azure_deployment": {
                  "_input_type": "MessageTextInput",
                  "advanced": false,
                  "display_name": "Deployment Name",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "azure_deployment",
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "GPT316k"
                },
                "azure_endpoint": {
                  "_input_type": "MessageTextInput",
                  "advanced": false,
                  "display_name": "Azure Endpoint",
                  "dynamic": false,
                  "info": "Your Azure endpoint, including the resource. Example: `https://example-resource.azure.openai.com/`",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "azure_endpoint",
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "https://cog-54p2emd7pu2vu.openai.azure.com/"
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from langchain_openai import AzureChatOpenAI\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import MessageTextInput\nfrom langflow.io import DropdownInput, IntInput, SecretStrInput, SliderInput\n\n\nclass AzureChatOpenAIComponent(LCModelComponent):\n    display_name: str = \"Azure OpenAI\"\n    description: str = \"Generate text using Azure OpenAI LLMs.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/llms/azure_openai\"\n    beta = False\n    icon = \"Azure\"\n    name = \"AzureOpenAIModel\"\n\n    AZURE_OPENAI_API_VERSIONS = [\n        \"2024-06-01\",\n        \"2024-07-01-preview\",\n        \"2024-08-01-preview\",\n        \"2024-09-01-preview\",\n        \"2024-10-01-preview\",\n        \"2023-05-15\",\n        \"2023-12-01-preview\",\n        \"2024-02-15-preview\",\n        \"2024-03-01-preview\",\n        \"2024-12-01-preview\",\n        \"2025-01-01-preview\",\n        \"2025-02-01-preview\",\n    ]\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        MessageTextInput(\n            name=\"azure_endpoint\",\n            display_name=\"Azure Endpoint\",\n            info=\"Your Azure endpoint, including the resource. Example: `https://example-resource.azure.openai.com/`\",\n            required=True,\n        ),\n        MessageTextInput(name=\"azure_deployment\", display_name=\"Deployment Name\", required=True),\n        SecretStrInput(name=\"api_key\", display_name=\"API Key\", required=True),\n        DropdownInput(\n            name=\"api_version\",\n            display_name=\"API Version\",\n            options=sorted(AZURE_OPENAI_API_VERSIONS, reverse=True),\n            value=next(\n                (\n                    version\n                    for version in sorted(AZURE_OPENAI_API_VERSIONS, reverse=True)\n                    if not version.endswith(\"-preview\")\n                ),\n                AZURE_OPENAI_API_VERSIONS[0],\n            ),\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.7,\n            range_spec=RangeSpec(min=0, max=2, step=0.01),\n            info=\"Controls randomness. Lower values are more deterministic, higher values are more creative.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        azure_endpoint = self.azure_endpoint\n        azure_deployment = self.azure_deployment\n        api_version = self.api_version\n        api_key = self.api_key\n        temperature = self.temperature\n        max_tokens = self.max_tokens\n        stream = self.stream\n\n        try:\n            output = AzureChatOpenAI(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n                temperature=temperature,\n                max_tokens=max_tokens or None,\n                streaming=stream,\n            )\n        except Exception as e:\n            msg = f\"Could not connect to AzureOpenAI API: {e}\"\n            raise ValueError(msg) from e\n\n        return output\n"
                },
                "input_value": {
                  "_input_type": "MessageInput",
                  "advanced": false,
                  "display_name": "Input",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "input_value",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "max_tokens": {
                  "_input_type": "IntInput",
                  "advanced": true,
                  "display_name": "Max Tokens",
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "list": false,
                  "name": "max_tokens",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": ""
                },
                "stream": {
                  "_input_type": "BoolInput",
                  "advanced": true,
                  "display_name": "Stream",
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "list": false,
                  "name": "stream",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                },
                "system_message": {
                  "_input_type": "MultilineInput",
                  "advanced": false,
                  "display_name": "System Message",
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "system_message",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "You are a Pharmaceutical Researcher who has extensive experience with clinical trial design. Your job is to simplify the technicalities present in participation criterion of a clinical study for users who don't have a pharmaceutical or medical background. Make sure to provide answers free of medical jargon but that are upto a reading comprehension level of a high-school student. Make sure your response is professional and doesn't change the meaning of the input criterion that you received\"\n        "
                },
                "temperature": {
                  "_input_type": "FloatInput",
                  "advanced": true,
                  "display_name": "Temperature",
                  "dynamic": false,
                  "info": "Controls randomness. Lower values are more deterministic, higher values are more creative.",
                  "list": false,
                  "name": "temperature",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "type": "float",
                  "value": 0.7
                }
              },
              "tool_mode": false
            },
            "showNode": true,
            "type": "AzureOpenAIModel"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 711
          }
        },
        {
          "id": "TextInput-8nHuj",
          "type": "genericNode",
          "position": {
            "x": 3311.5626968839597,
            "y": -283.136538694538
          },
          "data": {
            "id": "TextInput-8nHuj",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Get text inputs from the Playground.",
              "display_name": "Text Input",
              "documentation": "",
              "edited": false,
              "field_order": [
                "input_value"
              ],
              "frozen": false,
              "icon": "type",
              "legacy": false,
              "lf_version": "1.1.1",
              "metadata": {},
              "minimized": false,
              "output_types": [],
              "outputs": [
                {
                  "allows_loop": false,
                  "cache": true,
                  "display_name": "Message",
                  "method": "text_response",
                  "name": "text",
                  "selected": "Message",
                  "tool_mode": true,
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                },
                "input_value": {
                  "_input_type": "MultilineInput",
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "input_value",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                }
              },
              "tool_mode": false
            },
            "showNode": true,
            "type": "TextInput"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 233
          }
        },
        {
          "id": "azure_ocr-lGcnI",
          "type": "genericNode",
          "position": {
            "x": 1671.1202487681728,
            "y": -441.40993493227415
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "file_path": {
                  "trace_as_metadata": true,
                  "list": true,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "file_path",
                  "value": "",
                  "display_name": "Server File Path",
                  "advanced": true,
                  "input_types": [
                    "Data",
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "url": {
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "url",
                  "value": "",
                  "display_name": "URL",
                  "advanced": false,
                  "input_types": [
                    "str",
                    "Data",
                    "Message",
                    "list"
                  ],
                  "dynamic": false,
                  "info": "URL to the document to process",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "\"\"\"Form Recognizer Component for processing and analyzing form data.\"\"\"\n\nimport asyncio\nimport concurrent.futures\nimport mimetypes\nimport os\nimport tempfile\nfrom pathlib import Path\nfrom urllib.parse import unquote, urlparse\n\nimport aiohttp\nimport requests\nfrom langflow.base.data import BaseFileComponent\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, Output\nfrom langflow.schema import Data\nfrom loguru import logger\n\n\nclass FormRecognizerComponent(BaseFileComponent):\n    \"\"\"Component for recognizing and processing form data.\"\"\"\n\n    display_name = \"Form Recognizer\"\n    description = \"Process documents using Azure Form Recognizer OCR capabilities\"\n    icon = \"Azure\"\n    name = \"azure_ocr\"\n    # legacy = True\n\n    VALID_EXTENSIONS = [\"pdf\", \"jpg\", \"jpeg\", \"png\", \"bmp\", \"tiff\", \"tif\"]\n\n    inputs = [\n        HandleInput(\n            name=\"url\",\n            display_name=\"URL\",\n            info=\"URL to the document to process\",\n            input_types=[\"str\", \"Data\", \"Message\", \"list\"],\n            required=False,\n        ),\n        # Include only the HandleInput and BoolInputs from base_inputs\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"file_path\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"silent_errors\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"delete_server_file_after_processing\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"ignore_unsupported_extensions\"\n        ),\n        next(\n            input\n            for input in BaseFileComponent._base_inputs\n            if input.name == \"ignore_unspecified_files\"\n        ),\n        DropdownInput(\n            name=\"model_type\",\n            display_name=\"Model Type\",\n            options=[\"prebuilt-document\", \"prebuilt-read\", \"prebuilt-layout\"],\n            value=\"prebuilt-document\",\n            info=\"Choose the Form Recognizer model to use\",\n        ),\n        BoolInput(\n            name=\"extract_tables\",\n            display_name=\"Extract Tables\",\n            value=True,\n            info=\"Extract and format tables from the document\",\n        ),\n        BoolInput(\n            name=\"include_confidence\",\n            display_name=\"Include Confidence Scores\",\n            value=False,\n            advanced=True,\n            info=\"Include confidence scores in the extracted text\",\n        ),\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"Use Concurrent Processing\",\n            value=True,\n            info=\"Enable concurrent processing of multiple files\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"Number of files to process concurrently\",\n            value=2,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Structured Data\", name=\"structured_data\", method=\"load_files\"\n        ),\n    ]\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.temp_dir = tempfile.mkdtemp()\n        self._downloaded_files = {}\n        self._text_content = \"\"\n\n\n    def get_text_content(self) -> str:\n        \"\"\"Return the concatenated text content from all processed pages.\"\"\"\n        return self._text_content\n\n    def _extract_filename_from_url(self, url: str) -> str:\n        \"\"\"Extract filename from URL or generate a default one.\"\"\"\n        try:\n            logger.debug(f\"Extracting filename from URL: {url}\")\n            parsed_url = urlparse(url)\n            path = unquote(parsed_url.path)\n            filename = os.path.basename(path)\n\n            if filename and \".\" in filename:\n                logger.debug(f\"Found filename in URL path: {filename}\")\n                return filename\n\n            response = requests.head(url, allow_redirects=True)\n            if \"content-disposition\" in response.headers:\n                content_disp = response.headers[\"content-disposition\"]\n                if \"filename=\" in content_disp:\n                    filename = content_disp.split(\"filename=\")[1].strip(\"\\\"'\")\n                    logger.debug(f\"Found filename in content-disposition: {filename}\")\n                    return filename\n\n            if \"content-type\" in response.headers:\n                ext = mimetypes.guess_extension(response.headers[\"content-type\"])\n                if ext:\n                    filename = f\"downloaded{ext}\"\n                    logger.debug(f\"Generated filename from content-type: {filename}\")\n                    return filename\n\n            logger.debug(\"Using default filename: downloaded.pdf\")\n            return \"downloaded.pdf\"\n        except Exception as e:\n            logger.error(f\"Error extracting filename from URL: {e!s}\")\n            return \"downloaded.pdf\"\n\n    async def _download_file_from_url(self, url: str) -> str | None:\n        \"\"\"Download a file from a URL.\"\"\"\n        try:\n            logger.debug(f\"Attempting to download file from URL: {url}\")\n            filename = self._extract_filename_from_url(url)\n            local_path = os.path.join(self.temp_dir, filename)\n            logger.debug(f\"Local path for download: {local_path}\")\n\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url) as response:\n                    response.raise_for_status()\n                    with open(local_path, \"wb\") as f:\n                        while True:\n                            chunk = await response.content.read(8192)\n                            if not chunk:\n                                break\n                            f.write(chunk)\n\n            self._downloaded_files[url] = local_path\n            logger.info(f\"Successfully downloaded file to {local_path}\")\n            return local_path\n\n        except Exception as e:\n            logger.error(f\"Error downloading file from URL: {e!s}\")\n            if not self.silent_errors:\n                raise\n            return None\n\n    def _extract_url_from_input(self, input_data) -> str | None:\n        \"\"\"Extract URL string from various input types.\"\"\"\n        logger.debug(f\"Extracting URL from input data type: {type(input_data)}\")\n\n        # Handle list of Data objects (from blob storage)\n        if isinstance(input_data, list):\n            logger.debug(f\"Processing list input with {len(input_data)} items\")\n            if input_data and isinstance(input_data[0], Data):\n                url = input_data[0].data.get(\"file_path\")\n                logger.debug(f\"Extracted URL from first Data object in list: {url}\")\n                return url\n            return None\n\n        if isinstance(input_data, str):\n            logger.debug(f\"Input is string: {input_data}\")\n            return input_data\n        elif isinstance(input_data, Data):\n            url = (\n                input_data.data.get(\"file_path\")\n                or input_data.data.get(\"url\")\n                or input_data.text\n            )\n            logger.debug(f\"Extracted URL from Data object: {url}\")\n            return url\n        elif hasattr(input_data, \"text\"):\n            logger.debug(f\"Extracted URL from text attribute: {input_data.text}\")\n            return input_data.text\n        elif hasattr(input_data, \"data\"):\n            url = (\n                input_data.data.get(\"file_path\")\n                or input_data.data.get(\"url\")\n                or input_data.text\n            )\n            logger.debug(f\"Extracted URL from data attribute: {url}\")\n            return url\n        logger.debug(\"No URL found in input data\")\n        return None\n\n    def _validate_and_resolve_paths(self) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Handle URLs and local paths.\"\"\"\n        resolved_files = []\n        logger.debug(\"Starting path validation and resolution\")\n\n        # Handle URL input if provided\n        if hasattr(self, \"url\") and self.url:\n            try:\n                logger.debug(f\"Processing URL input: {self.url}\")\n                # Extract URL from different input types\n                url = self._extract_url_from_input(self.url)\n                if not url:\n                    logger.warning(\"No valid URL found in input\")\n                    return resolved_files\n\n                # Create event loop for async download\n                loop = asyncio.new_event_loop()\n                asyncio.set_event_loop(loop)\n                try:\n                    local_path = loop.run_until_complete(\n                        self._download_file_from_url(url)\n                    )\n                finally:\n                    loop.close()\n\n                if local_path:\n                    # Create a new Data object with both the original URL and local path\n                    new_data = Data(\n                        data={\n                            self.SERVER_FILE_PATH_FIELDNAME: local_path,\n                            \"original_url\": url,\n                        }\n                    )\n                    logger.debug(\n                        f\"Created new Data object with local path: {local_path}\"\n                    )\n\n                    resolved_files.append(\n                        BaseFileComponent.BaseFile(\n                            new_data,\n                            Path(local_path),\n                            delete_after_processing=self.delete_server_file_after_processing,\n                        )\n                    )\n            except Exception as e:\n                logger.error(f\"Error processing URL {url}: {e!s}\")\n                if not self.silent_errors:\n                    raise\n\n        # Handle file_path input\n        file_path = self._file_path_as_list()\n        logger.debug(f\"Processing file_path input: {file_path}\")\n        for obj in file_path:\n            server_file_path = obj.data.get(self.SERVER_FILE_PATH_FIELDNAME)\n            logger.debug(f\"Processing server file path: {server_file_path}\")\n\n            if not server_file_path:\n                if not self.ignore_unspecified_files:\n                    msg = f\"Data object missing '{self.SERVER_FILE_PATH_FIELDNAME}' property.\"\n                    if not self.silent_errors:\n                        raise ValueError(msg)\n                continue\n\n            try:\n                # Check if it's a URL\n                if isinstance(server_file_path, str) and server_file_path.startswith(\n                    (\"http://\", \"https://\")\n                ):\n                    logger.debug(f\"Processing URL from file_path: {server_file_path}\")\n                    # Create event loop for async download\n                    loop = asyncio.new_event_loop()\n                    asyncio.set_event_loop(loop)\n                    try:\n                        local_path = loop.run_until_complete(\n                            self._download_file_from_url(server_file_path)\n                        )\n                    finally:\n                        loop.close()\n\n                    if not local_path:\n                        continue\n\n                    # Create a new Data object with both the original URL and local path\n                    new_data = Data(\n                        data={\n                            self.SERVER_FILE_PATH_FIELDNAME: local_path,\n                            \"original_url\": server_file_path,\n                        }\n                    )\n                    logger.debug(\n                        f\"Created new Data object with local path: {local_path}\"\n                    )\n\n                    resolved_files.append(\n                        BaseFileComponent.BaseFile(\n                            new_data,\n                            Path(local_path),\n                            delete_after_processing=self.delete_server_file_after_processing,\n                        )\n                    )\n                else:\n                    # Handle local files\n                    resolved_path = Path(self.resolve_path(str(server_file_path)))\n                    logger.debug(f\"Resolved local file path: {resolved_path}\")\n                    if not resolved_path.exists():\n                        msg = f\"File not found: {server_file_path}\"\n                        if not self.silent_errors:\n                            raise ValueError(msg)\n                        continue\n\n                    resolved_files.append(\n                        BaseFileComponent.BaseFile(\n                            obj,\n                            resolved_path,\n                            delete_after_processing=self.delete_server_file_after_processing,\n                        )\n                    )\n\n            except Exception as e:\n                logger.error(f\"Error processing path {server_file_path}: {e!s}\")\n                if not self.silent_errors:\n                    raise\n                continue\n\n        logger.debug(f\"Resolved {len(resolved_files)} files\")\n        return resolved_files\n\n    async def process_file(\n        self, file_path: str, *, silent_errors: bool = False\n    ) -> tuple[Data, str]:\n        \"\"\"Process a single file using the OCR service.\"\"\"\n        try:\n            from langflow.services.manager import service_manager\n\n            ocr_service = service_manager.get(\"ocr_service\")\n\n            with open(file_path, \"rb\") as file:\n                file_content = file.read()\n\n            extracted_content, plain_text = await ocr_service.process_document(\n                file_content=file_content,\n                model_type=self.model_type,\n                include_confidence=self.include_confidence,\n                extract_tables=self.extract_tables,\n            )\n\n            structured_data = Data(\n                text=plain_text,\n                data={\n                    self.SERVER_FILE_PATH_FIELDNAME: str(file_path),\n                    \"result\": extracted_content,\n                },\n            )\n\n            return structured_data, plain_text\n\n        except Exception as e:\n            logger.error(f\"Error processing file {file_path}: {e!s}\")\n            if not silent_errors:\n                raise\n            return None, \"\"\n\n    def process_files(\n        self, file_list: list[BaseFileComponent.BaseFile]\n    ) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Process multiple files with concurrent processing.\"\"\"\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = (\n            1\n            if not self.use_multithreading\n            else max(1, self.concurrency_multithreading)\n        )\n        file_count = len(file_list)\n\n        logger.info(f\"Processing {file_count} files with concurrency: {concurrency}\")\n\n        all_plain_text = []\n        processed_data = []\n\n        if concurrency > 1 and file_count > 1:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            try:\n                with concurrent.futures.ThreadPoolExecutor(\n                    max_workers=concurrency\n                ) as executor:\n                    future_to_file = {\n                        executor.submit(\n                            lambda path: loop.run_until_complete(\n                                self.process_file(\n                                    str(path), silent_errors=self.silent_errors\n                                )\n                            ),\n                            file.path,\n                        ): file\n                        for file in file_list\n                    }\n                    for future in concurrent.futures.as_completed(future_to_file):\n                        try:\n                            structured_data, plain_text = future.result()\n                            processed_data.append(structured_data)\n                            all_plain_text.append(plain_text)\n                        except Exception as e:\n                            logger.error(f\"Error in concurrent processing: {e!s}\")\n                            if not self.silent_errors:\n                                raise\n                            processed_data.append(None)\n                            all_plain_text.append(\"\")\n            finally:\n                loop.close()\n        else:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            try:\n                for file in file_list:\n                    try:\n                        structured_data, plain_text = loop.run_until_complete(\n                            self.process_file(\n                                str(file.path), silent_errors=self.silent_errors\n                            )\n                        )\n                        processed_data.append(structured_data)\n                        all_plain_text.append(plain_text)\n                    except Exception as e:\n                        logger.error(f\"Error processing file {file.path}: {e!s}\")\n                        if not self.silent_errors:\n                            raise\n                        processed_data.append(None)\n                        all_plain_text.append(\"\")\n            finally:\n                loop.close()\n\n        # Store concatenated text content\n        self._text_content = \"\\n\\n=== NEW DOCUMENT ===\\n\\n\".join(all_plain_text)\n\n        return self.rollup_data(file_list, processed_data)\n\n    def __del__(self):\n        \"\"\"Cleanup temporary files and directory.\"\"\"\n        try:\n            if hasattr(self, \"temp_dir\") and os.path.exists(self.temp_dir):\n                # Remove downloaded files\n                for file_path in self._downloaded_files.values():\n                    if os.path.exists(file_path):\n                        os.unlink(file_path)\n                # Remove the temporary directory\n                os.rmdir(self.temp_dir)\n        except Exception as e:\n            logger.error(f\"Error cleaning up temporary files: {e!s}\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "concurrency_multithreading": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "concurrency_multithreading",
                  "value": 2,
                  "display_name": "Processing Concurrency",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of files to process concurrently",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "delete_server_file_after_processing": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "delete_server_file_after_processing",
                  "value": true,
                  "display_name": "Delete Server File After Processing",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, the Server File Path will be deleted after processing.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "extract_tables": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "extract_tables",
                  "value": true,
                  "display_name": "Extract Tables",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Extract and format tables from the document",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "ignore_unspecified_files": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ignore_unspecified_files",
                  "value": false,
                  "display_name": "Ignore Unspecified Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, Data with no 'file_path' property will be ignored.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "ignore_unsupported_extensions": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ignore_unsupported_extensions",
                  "value": true,
                  "display_name": "Ignore Unsupported Extensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, files with unsupported extensions will not be processed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "include_confidence": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "include_confidence",
                  "value": false,
                  "display_name": "Include Confidence Scores",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Include confidence scores in the extracted text",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "model_type": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "prebuilt-document",
                    "prebuilt-read",
                    "prebuilt-layout"
                  ],
                  "options_metadata": [],
                  "combobox": false,
                  "dialog_inputs": {},
                  "toggle": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_type",
                  "value": "prebuilt-document",
                  "display_name": "Model Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Choose the Form Recognizer model to use",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "silent_errors": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "use_multithreading": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "use_multithreading",
                  "value": true,
                  "display_name": "Use Concurrent Processing",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Enable concurrent processing of multiple files",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Process documents using Azure Form Recognizer OCR capabilities",
              "icon": "Azure",
              "base_classes": [
                "Data"
              ],
              "display_name": "Form Recognizer",
              "documentation": "",
              "minimized": false,
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "structured_data",
                  "hidden": null,
                  "display_name": "Structured Data",
                  "method": "load_files",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null,
                  "allows_loop": false,
                  "options": null,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "url",
                "file_path",
                "silent_errors",
                "delete_server_file_after_processing",
                "ignore_unsupported_extensions",
                "ignore_unspecified_files",
                "model_type",
                "extract_tables",
                "include_confidence",
                "use_multithreading",
                "concurrency_multithreading"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false
            },
            "showNode": true,
            "type": "azure_ocr",
            "id": "azure_ocr-lGcnI"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 393
          }
        },
        {
          "id": "BlobStorage-p8kQL",
          "type": "genericNode",
          "position": {
            "x": 1275,
            "y": -720
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "\"\"\"Blob Storage Component for loading files from Azure Blob Storage.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.services.manager import service_manager\nfrom loguru import logger\n\n\nclass BlobStorageComponent(Component):\n    display_name = \"Blob Storage\"\n    description = \"Load files from Azure Blob Storage\"\n    documentation = \"http://docs.langflow.org/components/storage\"\n    icon = \"Autonomize\"\n    name = \"BlobStorage\"\n\n    # Match the property name expected by FileComponent\n    FILE_PATH_FIELD = \"file_path\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._container_list: list[str] = []\n        self._file_list: list[str] = []\n\n    inputs = [\n        StrInput(\n            name=\"storage_account\",\n            display_name=\"Storage Account\",\n            required=False,\n            info=\"Storage Account name\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"container_name\",\n            display_name=\"Container\",\n            info=\"Select a container from the storage account\",\n            required=True,\n            refresh_button=True,\n        ),\n        DropdownInput(\n            name=\"file_name\",\n            display_name=\"File\",\n            info=\"Select a file from the container\",\n            required=True,\n            refresh_button=True,\n        ),\n        BoolInput(\n            name=\"return_all_files\",\n            display_name=\"Return All Files\",\n            info=\"If true and no specific file is selected, returns all files in the container\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"file_path\",  # Match the property name expected by FileComponent\n            display_name=\"File Path\",\n            method=\"get_file_paths\",\n        ),\n    ]\n\n    async def update_build_config(\n        self, build_config: dict, field_value: Any, field_name: str | None = None\n    ):\n        \"\"\"Update the build configuration based on field changes.\"\"\"\n        logger.info(f\"update_build_config called with field_name: {field_name}\")\n\n        storage_account = getattr(self, \"storage_account\", None)\n        container_name = getattr(self, \"container_name\", None)\n\n        if field_name == \"container_name\":\n            try:\n                # Load the container options when the field is refreshed\n                service = service_manager.get(\"flexstore_service\")\n                self._container_list = await service.get_containers(storage_account)\n\n                build_config[\"container_name\"][\"options\"] = self._container_list\n                return build_config\n\n            except Exception as e:\n                logger.exception(f\"Error updating container list: {e!s}\")\n                raise\n\n        elif field_name == \"file_name\" and container_name:\n            try:\n                # Load the file options when the field is refreshed\n                service = service_manager.get(\"flexstore_service\")\n                self._file_list = await service.get_files(\n                    storage_account, container_name\n                )\n\n                build_config[\"file_name\"][\"options\"] = self._file_list\n                return build_config\n\n            except Exception as e:\n                logger.exception(f\"Error updating file list: {e!s}\")\n                raise\n\n        return build_config\n\n    async def get_file_paths(self) -> list[Data]:\n        \"\"\"Get file paths for the FileComponent to process.\"\"\"\n        try:\n            if not self.container_name:\n                logger.warning(\"Container name is required.\")\n                return []\n\n            service = service_manager.get(\"flexstore_service\")\n            file_paths = []\n\n            # If a specific file is selected\n            if self.file_name:\n                signed_url = await service.get_signed_url(\n                    self.storage_account, self.container_name, self.file_name\n                )\n                if signed_url:\n                    file_paths = [Data(data={self.FILE_PATH_FIELD: signed_url})]\n            # If no specific file is selected and return_all_files is True\n            elif self.return_all_files:\n                files = await service.get_files(\n                    self.storage_account, self.container_name\n                )\n                for file in files:\n                    signed_url = await service.get_signed_url(\n                        self.storage_account, self.container_name, file\n                    )\n                    if signed_url:\n                        file_paths.append(Data(data={self.FILE_PATH_FIELD: signed_url}))\n\n            if file_paths:\n                self.status = file_paths\n                logger.info(f\"Generated {len(file_paths)} file paths\")\n                for path in file_paths:\n                    logger.debug(f\"File path: {path.data.get(self.FILE_PATH_FIELD)}\")\n            else:\n                logger.warning(\"No file paths generated\")\n\n            return file_paths\n\n        except Exception as e:\n            logger.error(f\"Error in get_file_paths: {e!s}\")\n            return []\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "container_name": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "aircare-dev-4002",
                    "aml-environment-image-build",
                    "ang-images",
                    "anywhere-200-files-input",
                    "anywhere-200-files-output",
                    "anywhere-input-docs-test",
                    "anywhere-output-docs-test",
                    "argo-flow-artifacts",
                    "athena-data",
                    "autonomize-mlflow-artifacts",
                    "azure-webjobs-hosts",
                    "azure-webjobs-secrets",
                    "azureml",
                    "azureml-blobstore-3894b54e-0ee2-4e07-9b73-c3b30dc36b53",
                    "azureml-environments",
                    "backup-of-aws-instance",
                    "benefit-accumulator-guidelines",
                    "benefit-check-eoc",
                    "benefit-eoc-guidelines",
                    "benefit-eoc-output",
                    "benefit-eoc-payload",
                    "carelon-guidelines-v2",
                    "claims-docs",
                    "claims-qnext-response",
                    "cllm-v2-data",
                    "cms",
                    "datavant-storage-container",
                    "etf-images",
                    "fax-images",
                    "fax-images-2",
                    "fax-insights",
                    "fax-ocr-cache",
                    "fax-processor-validation-datasets",
                    "genesis-container",
                    "genesis-correspondence-automation-copilot",
                    "genesis-cph-demo-v2",
                    "genesis-dev-test-3012",
                    "genesis-dev-v2",
                    "genesis-platform-3010",
                    "genesis-platform-anywhere-prod",
                    "genesis-platform-cigna-dev",
                    "genesis-platform-demo",
                    "genesis-platform-demo-v2",
                    "genesis-platform-dev",
                    "genesis-platform-molina-uat",
                    "genesis-platform-qa",
                    "genesis-platform-v2-lab",
                    "hedis-page-images",
                    "hedis-page-ocr",
                    "indexbackup",
                    "insights-logs-auditevent",
                    "insights-metrics-pt1m",
                    "issue-test-1",
                    "job-test",
                    "k-hub-container",
                    "knowledgehubembeddings",
                    "load-testing-files-hedis",
                    "mail-images",
                    "mlflow",
                    "mlflow-dev-v2",
                    "mlflow-mssql",
                    "mlflow-qa",
                    "mlflowmssql",
                    "mlserver-artifacts",
                    "mlworkspace-backup",
                    "modelcards",
                    "modelhub",
                    "modelhub-demo-v2",
                    "modelhub-v2-lab",
                    "models",
                    "molina-refactor-temporary",
                    "molina-refactor-test",
                    "mosaic-models",
                    "mosaic-provider-contracts",
                    "mosaic-provider-contracts-temp",
                    "mosaic-testing",
                    "ner-container",
                    "nestedcontainer",
                    "pcp-docs",
                    "pcp-extraction-docs",
                    "pcp-ocr-cache",
                    "pharmacy-auth",
                    "prior-auth",
                    "prior-authorization",
                    "projectx-files",
                    "projectx-temp-files",
                    "revisions",
                    "snapshots",
                    "snapshotzips",
                    "spog-output",
                    "spog-qnext",
                    "string",
                    "temp-directory-genesis-studio",
                    "temp-studio",
                    "temp-studio-v2",
                    "temporal-poc",
                    "test-cms",
                    "test-storage-container",
                    "test1",
                    "tester-fax",
                    "umk2dev",
                    "weaviate-backups"
                  ],
                  "options_metadata": [],
                  "combobox": false,
                  "dialog_inputs": {},
                  "toggle": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "container_name",
                  "value": "genesis-container",
                  "display_name": "Container",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select a container from the storage account",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "file_name": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "0108_Subject199.pdf",
                    "2222222_Subject2.pdf",
                    "457889_Jane_foster.pdf",
                    "93451_Matt_Damon.pdf",
                    "PriorAuthSample1 (1).pdf",
                    "PriorAuthSample3 (1).pdf",
                    "PriorAuthSample5_1 (1).pdf",
                    "pre-authorization-sample.pdf",
                    "prior_auth.png"
                  ],
                  "options_metadata": [],
                  "combobox": false,
                  "dialog_inputs": {},
                  "toggle": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "file_name",
                  "value": "0108_Subject199.pdf",
                  "display_name": "File",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select a file from the container",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "return_all_files": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "return_all_files",
                  "value": true,
                  "display_name": "Return All Files",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If true and no specific file is selected, returns all files in the container",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "storage_account": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "storage_account",
                  "value": "",
                  "display_name": "Storage Account",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Storage Account name",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Load files from Azure Blob Storage",
              "icon": "Autonomize",
              "base_classes": [
                "Data"
              ],
              "display_name": "Blob Storage",
              "documentation": "http://docs.langflow.org/components/storage",
              "minimized": false,
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "file_path",
                  "hidden": null,
                  "display_name": "File Path",
                  "method": "get_file_paths",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null,
                  "allows_loop": false,
                  "options": null,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "storage_account",
                "container_name",
                "file_name",
                "return_all_files"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "category": "inputs",
              "key": "BlobStorage",
              "score": 0.007568328950209746
            },
            "showNode": true,
            "type": "BlobStorage",
            "id": "BlobStorage-p8kQL"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 365
          }
        },
        {
          "id": "ParseData-A0hiT",
          "type": "genericNode",
          "position": {
            "x": 2099.88777078647,
            "y": -90.99586871427516
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": true,
                  "list_add_label": "Add More",
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text. Should be a list of dicts.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langflow.custom import Component\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom typing import Any, List, Dict\nfrom langflow.schema.message import Message\nfrom langflow.schema import Data\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert a list of dicts (data) into plain text using a template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text. Should be a list of dicts.\",\n            is_list=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. Use {key} for keys in the data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of dicts, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n        Output(\n            display_name=\"Data Object List\",\n            name=\"data_object_list\",\n            info=\"Data as a list of Data objects, each having `text` formatted by Template (for compatibility)\",\n            method=\"parse_data_as_data_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[List[Dict[str, Any]], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = self.data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> List[Dict[str, Any]]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = self.data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item[\"text\"] = text\n        self.status = data_list\n        return data_list\n\n    def parse_data_as_data_list(self) -> List[\"Data\"]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = self.data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item[\"text\"] = text\n        self.status = data_list\n        return [Data(value=item) for item in data_list]\n\n    @staticmethod\n    def data_to_text(template: str, data: List[Dict[str, Any]], sep: str) -> str:\n        formatted = []\n        for item in data:\n            try:\n                formatted.append(template.format(**item))\n            except Exception:\n                formatted.append(str(item))\n        return sep.join(formatted)\n\n    @staticmethod\n    def data_to_text_list(template: str, data: List[Dict[str, Any]]):\n        text_list = []\n        data_list = []\n        for item in data:\n            try:\n                text = template.format(**item)\n            except Exception:\n                text = str(item)\n            text_list.append(text)\n            data_list.append(dict(item))\n        return text_list, data_list ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "template": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{text}",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. Use {key} for keys in the data.",
                  "title_case": false,
                  "copy_field": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Convert a list of dicts (data) into plain text using a template.",
              "icon": "braces",
              "base_classes": [
                "Data",
                "Dict",
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "minimized": false,
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "hidden": null,
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null,
                  "allows_loop": false,
                  "options": null,
                  "tool_mode": true
                },
                {
                  "types": [
                    "Dict"
                  ],
                  "selected": "Dict",
                  "name": "data_list",
                  "hidden": null,
                  "display_name": "Data List",
                  "method": "parse_data_as_list",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null,
                  "allows_loop": false,
                  "options": null,
                  "tool_mode": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data_object_list",
                  "hidden": null,
                  "display_name": "Data Object List",
                  "method": "parse_data_as_data_list",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null,
                  "allows_loop": false,
                  "options": null,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false
            },
            "showNode": true,
            "type": "ParseData",
            "id": "ParseData-A0hiT"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 397
          }
        },
        {
          "id": "PromptTemplate-hZehs",
          "type": "genericNode",
          "position": {
            "x": 2348.0070474874133,
            "y": -537.1752697993049
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import re\nfrom app.services.deps import get_prompt_service\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass PromptTemplateComponent(Component):\n    display_name = \"Prompt Template\"\n    description = \"Select or edit prompt templates.\"\n    icon = \"Autonomize\"\n    name = \"PromptTemplate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"saved_prompt\",\n            display_name=\"Choose from Templates\",\n            info=\"Select a Template\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"custom_prompt_text\",\n            display_name=\"Template\",\n            info=\"Edit the template here.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    def __init__(self, **data):\n        super().__init__(**data)\n        self.prompt_service = get_prompt_service()\n        self._custom_prompt_text_internal = \"\"\n\n    async def build_prompt(self) -> Message:\n        template = self._attributes.get(\"custom_prompt_text\", \"\")\n        variables = re.findall(r\"\\{\\{\\s*(\\w+)\\s*\\}\\}\", template)\n        for var in variables:\n            value = (\n                self._attributes.get(var)\n                or self._attributes.get(var.lower())\n                or self._attributes.get(var.title())\n                or \"\"\n            )\n            template = template.replace(f\"{{{{ {var} }}}}\", value)\n            template = template.replace(f\"{{{{{var}}}}}\", value)\n        return Message(text=template)\n\n    async def update_build_config(\n        self, build_config, field_value, field_name=None\n    ) -> dict:\n        if field_name == \"saved_prompt\":\n            try:\n                criteria = {\"max_results\": 100}\n                print(f\"Calling get_prompts with: {criteria}\")\n                prompts = await self.prompt_service.get_prompts(criteria)\n                prompt_list = prompts.get(\"prompts\", [])\n                template_names = [\n                    p.get(\"name\", \"Unnamed Template\")\n                    for p in prompt_list\n                    if isinstance(p, dict)\n                ]\n                build_config[\"saved_prompt\"][\"options\"] = template_names\n\n                if field_value:\n                    selected_prompt = next(\n                        (p for p in prompt_list if p.get(\"name\") == field_value), None\n                    )\n                    if selected_prompt:\n                        # Extract template string from SDK format\n                        template_content = \"\"\n                        latest_versions = selected_prompt.get(\"latest_versions\", [])\n                        if latest_versions and isinstance(latest_versions[0], dict):\n                            template_list = latest_versions[0].get(\"template\", [])\n                            if template_list and isinstance(template_list[0], dict):\n                                template_content = (\n                                    template_list[0].get(\"content\", {}).get(\"text\", \"\")\n                                )\n                        self._custom_prompt_text_internal = template_content\n                        build_config[\"custom_prompt_text\"][\"value\"] = template_content\n\n                        # Extract parameters from template and create dynamic inputs\n                        parameters = re.findall(\n                            r\"\\{\\{\\s*(\\w+)\\s*\\}\\}\", template_content\n                        )\n                        # Remove existing dynamic input fields\n                        fields_to_remove = []\n                        for key in build_config:\n                            if (\n                                isinstance(build_config[key], dict)\n                                and build_config[key].get(\"is_custom_field\") == True\n                                and build_config[key].get(\"dynamic\", False)\n                            ):\n                                fields_to_remove.append(key)\n                        for key in fields_to_remove:\n                            build_config.pop(key)\n                        # Add new input fields for parameters\n                        for param in parameters:\n                            param_name = param.strip().lower()  # force lowercase\n                            display_name = param_name.replace(\"_\", \" \").title()\n                            build_config[param_name] = {\n                                \"is_custom_field\": True,\n                                \"name\": param_name,\n                                \"display_name\": display_name,\n                                \"value\": \"\",\n                                \"info\": f\"Enter {display_name}\",\n                                \"required\": True,\n                                \"show\": True,\n                                \"multiline\": True,\n                                \"dynamic\": True,\n                                \"placeholder\": f\"Enter {display_name.lower()}\",\n                                \"advanced\": False,\n                                \"field_type\": \"str\",\n                                \"fileTypes\": [],\n                                \"file_path\": \"\",\n                                \"input_types\": [\"Message\", \"Text\"],\n                                \"list\": False,\n                                \"load_from_db\": False,\n                                \"title_case\": False,\n                                \"type\": \"str\",\n                            }\n            except Exception as e:\n                print(f\"Error fetching prompts: {e}\")\n                build_config[\"saved_prompt\"][\"options\"] = []\n        return build_config\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "custom_prompt_text": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "custom_prompt_text",
                  "value": "You are a Pharmaceutical Researcher who has extensive experience with clinical trial design. Your job is to simplify the technicalities present in participation criterion of a clinical study for users who don't have a pharmaceutical or medical background. Make sure to provide answers free of medical jargon but that are upto a reading comprehension level of a high-school student. Make sure your response is professional and doesn't change the meaning of the input criterion that you received",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Edit the template here.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "saved_prompt": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "TestPrompt-87840388-0578-42ec-8b8f-f89663202d8b",
                    "TestPrompt-325ad3a0-7fd9-4d62-a8cd-3dd62225cbc4",
                    "TestPrompt-bd5e97ee-4458-41b6-a587-83461ae342c7",
                    "TestPrompt-f432ab6a-f59e-497d-ab2d-2ba54383217a",
                    "TestPrompt-b78dc02b-52db-4a35-9d35-ff72c737be96",
                    "summarization-prompt",
                    "TestPrompt-ff07b7ec-3d17-4fed-8b56-52a8fe612753",
                    "TestPrompt-054fbeb7-56d4-47c1-b3bb-8212e2ffef1c",
                    "translation",
                    "TestPrompt-fa38c36f-6a87-4394-9a93-d21da2ecc927",
                    "factual-answering",
                    "TestPrompt-3888c643-06c9-41f0-bd63-995d1499236e",
                    "TestPrompt-c9921418-b126-43d7-8c4f-87735885ea59",
                    "TestPrompt-1f41bf7e-73d1-4990-8cbe-ca0c7ff19b4a",
                    "TestPrompt-f6d62cff-1ec0-44dd-beed-2756161779cd",
                    "task-instructions",
                    "task-focused",
                    "TestPrompt-c9145fc7-1147-4f39-91ec-6467c9ca50fd",
                    "TestPrompt-2795df13-65d7-41df-919b-31ecf3b6a1fc",
                    "question-answer",
                    "context-qa",
                    "TestPrompt-41b26b1d-9882-4ca8-a75e-9aeb7d2641f1",
                    "TestPrompt-c4e830d2-02dc-4533-b5b1-3e1b9ba49085",
                    "TestPrompt-452d748b-0663-46f1-9ddb-de8f1eac6604",
                    "educational-support",
                    "TestPrompt-a701643e-5d8c-4451-9ffe-d8ffed24126d",
                    "TestPrompt-d42a8c7b-e2e9-45fe-b0bf-b48a45c3ebf7",
                    "comprehensive-analyzer",
                    "TestPrompt-02a3249f-623e-4def-aad3-c05b2a364513",
                    "summarization-prompt-1",
                    "summarize",
                    "test-12",
                    "TestPrompt-624e7bf2-56d1-4255-a700-2398a3cbc9a9",
                    "ie-criteria-system-prompt",
                    "TestPrompt-71faae5d-1a9b-4fe7-bf9b-7c7cf5f1bf0a",
                    "TestPrompt-e55a45d8-f406-4365-9057-91ccb6c421ff",
                    "TestPrompt-776710d2-1a00-4a46-b072-d2859abd5ae6",
                    "testttt",
                    "concise-summarizer",
                    "TestPrompt-870713f0-a775-4eb2-8138-5a51bd0a62f6",
                    "TestPrompt-020d3130-a61d-4741-89b6-0978f8fd5602",
                    "TestPrompt-67352748-b967-45ed-b963-7e1bcb72b209",
                    "testing2",
                    "TestPrompt-1c272264-2a44-4ddc-9b0f-97d23ecce905",
                    "TestPrompt-cc939bb1-346b-430a-aa04-4855dbd9e24f",
                    "key-points-extractor",
                    "TestPrompt-452ac44a-7b16-4362-a895-ece62b3c8204",
                    "default-assistant",
                    "compare-and-contrast",
                    "TestPrompt-29a321ce-7145-417b-b191-4118803dc26a",
                    "technical-documentation",
                    "TestPrompt-323e2033-9a6b-430f-9a23-506329c5f143",
                    "clinical-summary"
                  ],
                  "options_metadata": [],
                  "combobox": false,
                  "dialog_inputs": {},
                  "toggle": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "saved_prompt",
                  "value": "ie-criteria-system-prompt",
                  "display_name": "Choose from Templates",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select a Template",
                  "real_time_refresh": true,
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "load_from_db": false
                }
              },
              "description": "Select or edit prompt templates.",
              "icon": "Autonomize",
              "base_classes": [
                "Message"
              ],
              "display_name": "Prompt Template",
              "documentation": "",
              "minimized": false,
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null,
                  "allows_loop": false,
                  "options": null,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "saved_prompt",
                "custom_prompt_text"
              ],
              "beta": false,
              "legacy": false,
              "edited": true,
              "metadata": {},
              "tool_mode": false
            },
            "showNode": true,
            "type": "PromptTemplate",
            "id": "PromptTemplate-hZehs"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 319
          }
        }
      ],
      "edges": [
        {
          "source": "AzureOpenAIModel-Pk4b0",
          "target": "TextInput-8nHuj",
          "sourceHandle": "{œdataTypeœ:œAzureOpenAIModelœ,œidœ:œAzureOpenAIModel-Pk4b0œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-8nHujœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-AzureOpenAIModel-Pk4b0{œdataTypeœ:œAzureOpenAIModelœ,œidœ:œAzureOpenAIModel-Pk4b0œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextInput-8nHuj{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-8nHujœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "sourceHandle": {
              "dataType": "AzureOpenAIModel",
              "id": "AzureOpenAIModel-Pk4b0",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextInput-8nHuj",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            }
          },
          "selected": false
        },
        {
          "source": "BlobStorage-p8kQL",
          "target": "azure_ocr-lGcnI",
          "sourceHandle": "{œdataTypeœ:œBlobStorageœ,œidœ:œBlobStorage-p8kQLœ,œnameœ:œfile_pathœ,œoutput_typesœ:[œDataœ]}",
          "targetHandle": "{œfieldNameœ:œurlœ,œidœ:œazure_ocr-lGcnIœ,œinputTypesœ:[œstrœ,œDataœ,œMessageœ,œlistœ],œtypeœ:œotherœ}",
          "id": "reactflow__edge-BlobStorage-p8kQL{œdataTypeœ:œBlobStorageœ,œidœ:œBlobStorage-p8kQLœ,œnameœ:œfile_pathœ,œoutput_typesœ:[œDataœ]}-azure_ocr-lGcnI{œfieldNameœ:œurlœ,œidœ:œazure_ocr-lGcnIœ,œinputTypesœ:[œstrœ,œDataœ,œMessageœ,œlistœ],œtypeœ:œotherœ}",
          "data": {
            "sourceHandle": {
              "dataType": "BlobStorage",
              "id": "BlobStorage-p8kQL",
              "name": "file_path",
              "output_types": [
                "Data"
              ]
            },
            "targetHandle": {
              "fieldName": "url",
              "id": "azure_ocr-lGcnI",
              "inputTypes": [
                "str",
                "Data",
                "Message",
                "list"
              ],
              "type": "other"
            }
          },
          "selected": false
        },
        {
          "source": "azure_ocr-lGcnI",
          "target": "ParseData-A0hiT",
          "sourceHandle": "{œdataTypeœ:œazure_ocrœ,œidœ:œazure_ocr-lGcnIœ,œnameœ:œstructured_dataœ,œoutput_typesœ:[œDataœ]}",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-A0hiTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "id": "reactflow__edge-azure_ocr-lGcnI{œdataTypeœ:œazure_ocrœ,œidœ:œazure_ocr-lGcnIœ,œnameœ:œstructured_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-A0hiT{œfieldNameœ:œdataœ,œidœ:œParseData-A0hiTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "sourceHandle": {
              "dataType": "azure_ocr",
              "id": "azure_ocr-lGcnI",
              "name": "structured_data",
              "output_types": [
                "Data"
              ]
            },
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-A0hiT",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            }
          },
          "selected": false
        },
        {
          "source": "ParseData-A0hiT",
          "target": "PromptTemplate-hZehs",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-A0hiTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "targetHandle": "{œfieldNameœ:œcustom_prompt_textœ,œidœ:œPromptTemplate-hZehsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-ParseData-A0hiT{œdataTypeœ:œParseDataœ,œidœ:œParseData-A0hiTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PromptTemplate-hZehs{œfieldNameœ:œcustom_prompt_textœ,œidœ:œPromptTemplate-hZehsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-A0hiT",
              "name": "text",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "custom_prompt_text",
              "id": "PromptTemplate-hZehs",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            }
          },
          "selected": false
        },
        {
          "source": "PromptTemplate-hZehs",
          "target": "AzureOpenAIModel-Pk4b0",
          "sourceHandle": "{œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-hZehsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAzureOpenAIModel-Pk4b0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-PromptTemplate-hZehs{œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-hZehsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-AzureOpenAIModel-Pk4b0{œfieldNameœ:œinput_valueœ,œidœ:œAzureOpenAIModel-Pk4b0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "sourceHandle": {
              "dataType": "PromptTemplate",
              "id": "PromptTemplate-hZehs",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AzureOpenAIModel-Pk4b0",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            }
          },
          "selected": false
        }
      ],
      "viewport": {
        "x": -494.47510642735915,
        "y": 379.2420759448787,
        "zoom": 0.4951714359665118
      }
    },
    "description": "The IE Criteria Structuring Agent organizes and transforms clinical trial eligibility criteria into a structured, standardized format, enabling efficient participant screening and data analysis for patient recruitment.",
    "name": "IE Criteria Simplification",
    "last_tested_version": "1.4.3",
    "endpoint_name": null,
    "is_component": false,
    "tags": [
      "document-qa"
    ]
  }
