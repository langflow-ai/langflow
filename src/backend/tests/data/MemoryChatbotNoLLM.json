{
    "id": "26c412c9-9e4a-406d-aadb-ef9a81badb3f",
    "data": {
        "nodes": [
            {
                "data": {
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt",
                    "id": "Prompt-iWbCC",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {
                            "template": [
                                "context",
                                "user_message"
                            ]
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "template"
                        ],
                        "frozen": false,
                        "icon": "prompts",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "name": "prompt",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n"
                            },
                            "context": {
                                "advanced": false,
                                "display_name": "context",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "context",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "type": "prompt",
                                "value": "{context}\n\nUser: {user_message}\nAI: "
                            },
                            "user_message": {
                                "advanced": false,
                                "display_name": "user_message",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "user_message",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            }
                        }
                    },
                    "type": "Prompt"
                },
                "dragging": false,
                "height": 494,
                "id": "Prompt-iWbCC",
                "position": {
                    "x": 1880.8227904110583,
                    "y": 625.8049209882275
                },
                "positionAbsolute": {
                    "x": 1880.8227904110583,
                    "y": 625.8049209882275
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Get chat inputs from the Playground.",
                    "display_name": "Chat Input",
                    "id": "ChatInput-CIGht",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "files": {
                                "trace_as_metadata": true,
                                "file_path": "",
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "files",
                                "display_name": "Files",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Files to be sent with the message.",
                                "title_case": false,
                                "type": "file"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            },
                            "should_store_message": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "should_store_message",
                                "display_name": "Store Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Get chat inputs from the Playground.",
                        "icon": "ChatInput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "type": "ChatInput"
                },
                "dragging": false,
                "height": 294,
                "id": "ChatInput-CIGht",
                "position": {
                    "x": 1275.9262193671882,
                    "y": 836.1228056896347
                },
                "positionAbsolute": {
                    "x": 1275.9262193671882,
                    "y": 836.1228056896347
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output",
                    "id": "ChatOutput-QA7ej",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "data_template": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{text}",
                                "name": "data_template",
                                "display_name": "Data Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "title_case": false,
                                "type": "str"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            },
                            "should_store_message": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "should_store_message",
                                "display_name": "Store Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Display a chat message in the Playground.",
                        "icon": "ChatOutput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Output",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "type": "ChatOutput"
                },
                "height": 294,
                "id": "ChatOutput-QA7ej",
                "position": {
                    "x": 2487.48936094892,
                    "y": 703.7197762654707
                },
                "selected": true,
                "type": "genericNode",
                "width": 384,
                "positionAbsolute": {
                    "x": 2487.48936094892,
                    "y": 703.7197762654707
                },
                "dragging": true
            },
            {
                "data": {
                    "description": "Retrieves stored chat messages from Sochflow tables or an external memory.",
                    "display_name": "Chat Memory",
                    "id": "Memory-amN4Z",
                    "node": {
                        "base_classes": [
                            "BaseChatMemory",
                            "Data",
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Retrieves stored chat messages from Sochflow tables or an external memory.",
                        "display_name": "Chat Memory",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "memory",
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                        ],
                        "frozen": false,
                        "icon": "message-square-more",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Messages (Data)",
                                "method": "retrieve_messages",
                                "name": "messages",
                                "selected": "Data",
                                "types": [
                                    "Data"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "cache": true,
                                "display_name": "Messages (Text)",
                                "method": "retrieve_messages_as_text",
                                "name": "messages_text",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "cache": true,
                                "display_name": "Memory",
                                "method": "build_lc_memory",
                                "name": "lc_memory",
                                "selected": "BaseChatMemory",
                                "types": [
                                    "BaseChatMemory"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages, LCBuiltinChatMemory\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import BaseChatMemory\nfrom langchain.memory import ConversationBufferMemory\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Sochflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Sochflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            if sender:\n                expected_type = \"Machine\" if sender == \"Machine\" else \"User\"\n                stored = [m for m in stored if m.type == expected_type]\n            if order == \"ASC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.graph.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n"
                            },
                            "memory": {
                                "advanced": false,
                                "display_name": "External Memory",
                                "dynamic": false,
                                "info": "Retrieve messages from an external memory. If empty, it will use the Sochflow tables.",
                                "input_types": [
                                    "BaseChatMessageHistory"
                                ],
                                "list": false,
                                "name": "memory",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "n_messages": {
                                "advanced": true,
                                "display_name": "Number of Messages",
                                "dynamic": false,
                                "info": "Number of messages to retrieve.",
                                "list": false,
                                "name": "n_messages",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 100
                            },
                            "order": {
                                "advanced": true,
                                "display_name": "Order",
                                "dynamic": false,
                                "info": "Order of the messages.",
                                "name": "order",
                                "options": [
                                    "Ascending",
                                    "Descending"
                                ],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Ascending"
                            },
                            "sender": {
                                "advanced": true,
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User",
                                    "Machine and User"
                                ],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine and User"
                            },
                            "sender_name": {
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "session_id": {
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "Session ID of the chat history.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "advanced": true,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{sender_name}: {text}"
                            }
                        }
                    },
                    "type": "Memory"
                },
                "dragging": false,
                "height": 366,
                "id": "Memory-amN4Z",
                "position": {
                    "x": 1308.5775646859402,
                    "y": 406.95204412025845
                },
                "positionAbsolute": {
                    "x": 1308.5775646859402,
                    "y": 406.95204412025845
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            }
        ],
        "edges": [
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-CIGht",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "user_message",
                        "id": "Prompt-iWbCC",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-ChatInput-CIGht{œdataTypeœ:œChatInputœ,œidœ:œChatInput-CIGhtœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-iWbCC{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-iWbCCœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "source": "ChatInput-CIGht",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-CIGhtœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-iWbCC",
                "targetHandle": "{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-iWbCCœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-amN4Z",
                        "name": "messages_text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "context",
                        "id": "Prompt-iWbCC",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-Memory-amN4Z{œdataTypeœ:œMemoryœ,œidœ:œMemory-amN4Zœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-iWbCC{œfieldNameœ:œcontextœ,œidœ:œPrompt-iWbCCœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "source": "Memory-amN4Z",
                "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-amN4Zœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-iWbCC",
                "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-iWbCCœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
            },
            {
                "source": "Prompt-iWbCC",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-iWbCCœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-QA7ej",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-QA7ejœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-QA7ej",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-iWbCC",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Prompt-iWbCC{œdataTypeœ:œPromptœ,œidœ:œPrompt-iWbCCœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-QA7ej{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-QA7ejœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
            }
        ],
        "viewport": {
            "x": -417.45799796990354,
            "y": 3.1615551909424653,
            "zoom": 0.45494095964690673
        }
    },
    "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history.",
    "name": "MemoryChatbotNoLLM",
    "last_tested_version": "1.0.12",
    "endpoint_name": null,
    "is_component": false
}