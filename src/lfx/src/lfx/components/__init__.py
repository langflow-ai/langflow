from __future__ import annotations

from typing import TYPE_CHECKING, Any

from lfx.components._importing import import_mod

if TYPE_CHECKING:
    # These imports are only for type checking and match _dynamic_imports
    from lfx.components import (
        Notion,
        agentql,
        agents,
        aiml,
        amazon,
        anthropic,
        apify,
        arxiv,
        assemblyai,
        azure,
        baidu,
        bing,
        chains,
        cleanlab,
        cloudflare,
        cohere,
        composio,
        confluence,
        crewai,
        custom_component,
        data,
        datastax,
        deactivated,
        deepseek,
        docling,
        documentloaders,
        duckduckgo,
        embeddings,
        exa,
        firecrawl,
        git,
        glean,
        google,
        groq,
        helpers,
        homeassistant,
        huggingface,
        ibm,
        icosacomputing,
        input_output,
        jigsawstack,
        langchain_utilities,
        langwatch,
        link_extractors,
        lmstudio,
        logic,
        maritalk,
        mem0,
        mistral,
        models,
        needle,
        notdiamond,
        novita,
        nvidia,
        olivya,
        ollama,
        openai,
        openrouter,
        output_parsers,
        perplexity,
        processing,
        prototypes,
        redis,
        sambanova,
        scrapegraph,
        searchapi,
        serpapi,
        tavily,
        textsplitters,
        toolkits,
        tools,
        twelvelabs,
        unstructured,
        vectara,
        vectorstores,
        vertexai,
        wikipedia,
        wolframalpha,
        xai,
        yahoosearch,
        youtube,
        zep,
    )

# Dynamic imports mapping - maps module name to module directory
# Include all component modules that exist in the directory
_dynamic_imports = {
    "agentql": "__module__",
    "agents": "__module__",
    "aiml": "__module__",
    "amazon": "__module__",
    "anthropic": "__module__",
    "apify": "__module__",
    "arxiv": "__module__",
    "assemblyai": "__module__",
    "azure": "__module__",
    "baidu": "__module__",
    "bing": "__module__",
    "chains": "__module__",
    "cleanlab": "__module__",
    "cloudflare": "__module__",
    "cohere": "__module__",
    "composio": "__module__",
    "confluence": "__module__",
    "crewai": "__module__",
    "custom_component": "__module__",
    "data": "__module__",
    "datastax": "__module__",
    "deactivated": "__module__",
    "deepseek": "__module__",
    "docling": "__module__",
    "documentloaders": "__module__",
    "duckduckgo": "__module__",
    "embeddings": "__module__",
    "exa": "__module__",
    "firecrawl": "__module__",
    "git": "__module__",
    "glean": "__module__",
    "google": "__module__",
    "groq": "__module__",
    "helpers": "__module__",
    "homeassistant": "__module__",
    "huggingface": "__module__",
    "ibm": "__module__",
    "icosacomputing": "__module__",
    "input_output": "__module__",
    "jigsawstack": "__module__",
    "langchain_utilities": "__module__",
    "langwatch": "__module__",
    "link_extractors": "__module__",
    "lmstudio": "__module__",
    "logic": "__module__",
    "maritalk": "__module__",
    "mem0": "__module__",
    "mistral": "__module__",
    "models": "__module__",
    "needle": "__module__",
    "notdiamond": "__module__",
    "Notion": "__module__",
    "novita": "__module__",
    "nvidia": "__module__",
    "olivya": "__module__",
    "ollama": "__module__",
    "openai": "__module__",
    "openrouter": "__module__",
    "output_parsers": "__module__",
    "perplexity": "__module__",
    "processing": "__module__",
    "prototypes": "__module__",
    "redis": "__module__",
    "sambanova": "__module__",
    "scrapegraph": "__module__",
    "searchapi": "__module__",
    "serpapi": "__module__",
    "tavily": "__module__",
    "textsplitters": "__module__",
    "toolkits": "__module__",
    "tools": "__module__",
    "twelvelabs": "__module__",
    "unstructured": "__module__",
    "vectara": "__module__",
    "vectorstores": "__module__",
    "vertexai": "__module__",
    "wikipedia": "__module__",
    "wolframalpha": "__module__",
    "xai": "__module__",
    "yahoosearch": "__module__",
    "youtube": "__module__",
    "zep": "__module__",
}

__all__ = [
    "Notion",
    "agentql",
    "agents",
    "aiml",
    "amazon",
    "anthropic",
    "apify",
    "arxiv",
    "assemblyai",
    "azure",
    "baidu",
    "bing",
    "chains",
    "cleanlab",
    "cloudflare",
    "cohere",
    "composio",
    "confluence",
    "crewai",
    "custom_component",
    "data",
    "datastax",
    "deactivated",
    "deepseek",
    "docling",
    "documentloaders",
    "duckduckgo",
    "embeddings",
    "exa",
    "firecrawl",
    "git",
    "glean",
    "google",
    "groq",
    "helpers",
    "homeassistant",
    "huggingface",
    "ibm",
    "icosacomputing",
    "input_output",
    "jigsawstack",
    "langchain_utilities",
    "langwatch",
    "link_extractors",
    "lmstudio",
    "logic",
    "maritalk",
    "mem0",
    "mistral",
    "models",
    "needle",
    "notdiamond",
    "novita",
    "nvidia",
    "olivya",
    "ollama",
    "openai",
    "openrouter",
    "output_parsers",
    "perplexity",
    "processing",
    "prototypes",
    "redis",
    "sambanova",
    "scrapegraph",
    "searchapi",
    "serpapi",
    "tavily",
    "textsplitters",
    "toolkits",
    "tools",
    "twelvelabs",
    "unstructured",
    "vectara",
    "vectorstores",
    "vertexai",
    "wikipedia",
    "wolframalpha",
    "xai",
    "yahoosearch",
    "youtube",
    "zep",
]


def __getattr__(attr_name: str) -> Any:
    """Lazily import component modules on attribute access."""
    if attr_name not in _dynamic_imports:
        msg = f"module '{__name__}' has no attribute '{attr_name}'"
        raise AttributeError(msg)
    try:
        result = import_mod(attr_name, _dynamic_imports[attr_name], __spec__.parent)
    except (ModuleNotFoundError, ImportError, AttributeError) as e:
        msg = f"Could not import '{attr_name}' from '{__name__}': {e}"
        raise AttributeError(msg) from e
    globals()[attr_name] = result
    return result


def __dir__() -> list[str]:
    return list(__all__)
